
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ac  080070ac  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080070ac  080070ac  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070ac  080070ac  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080070b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000009c0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a40  20000a40  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010467  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023b8  00000000  00000000  0003055a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d80  00000000  00000000  00032918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a94  00000000  00000000  00033698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020630  00000000  00000000  0003412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e47  00000000  00000000  0005475c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8b1d  00000000  00000000  000665a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e74  00000000  00000000  0012f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00132f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ef8 	.word	0x08006ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006ef8 	.word	0x08006ef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <hc_sr_04_init>:
#include "main.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr_04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fa7c 	bl	80037b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f003 f906 	bl	80034d8 <HAL_TIM_PWM_Start>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <hc_sr_04_convert_us_to_cm>:

uint32_t hc_sr_04_convert_us_to_cm(uint32_t distance_us)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <hc_sr_04_convert_us_to_cm+0x20>)
 80002e0:	fba2 2303 	umull	r2, r3, r2, r3
 80002e4:	095b      	lsrs	r3, r3, #5
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	8d3dcb09 	.word	0x8d3dcb09

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0ce      	sub	sp, #312	; 0x138
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fffb 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f853 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f9ff 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800030a:	f000 f9cd 	bl	80006a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800030e:	f000 f8b1 	bl	8000474 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000312:	f000 f953 	bl	80005bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buf_RX[IDX_RX_EMPTY], 1);
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <main+0x98>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	b29b      	uxth	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <main+0x9c>)
 8000320:	4413      	add	r3, r2
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <main+0xa0>)
 8000328:	f004 fde2 	bl	8004ef0 <HAL_UART_Receive_IT>
  hc_sr_04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 800032c:	2308      	movs	r3, #8
 800032e:	4a1b      	ldr	r2, [pc, #108]	; (800039c <main+0xa4>)
 8000330:	491b      	ldr	r1, [pc, #108]	; (80003a0 <main+0xa8>)
 8000332:	481c      	ldr	r0, [pc, #112]	; (80003a4 <main+0xac>)
 8000334:	f7ff ffac 	bl	8000290 <hc_sr_04_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USART_fSend("START\n\r");
 8000338:	481b      	ldr	r0, [pc, #108]	; (80003a8 <main+0xb0>)
 800033a:	f000 faa1 	bl	8000880 <USART_fSend>
  int16_t length = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
  char bFrame[300];
  char senderAddress[4];
  while (1)
  {
	  if ((length = getFrame(bFrame)) != -1) {
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fb79 	bl	8000a40 <getFrame>
 800034e:	4603      	mov	r3, r0
 8000350:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000354:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800035c:	d0f2      	beq.n	8000344 <main+0x4c>
		 if ((length = analizeFrame(bFrame,length,senderAddress)) != 0) {
 800035e:	1d3a      	adds	r2, r7, #4
 8000360:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fc0f 	bl	8000b8c <analizeFrame>
 800036e:	4603      	mov	r3, r0
 8000370:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000374:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0e3      	beq.n	8000344 <main+0x4c>
			 analizeCommend(bFrame,length,senderAddress);
 800037c:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 8000380:	1d3a      	adds	r2, r7, #4
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fdd0 	bl	8000f2c <analizeCommend>
	  if ((length = getFrame(bFrame)) != -1) {
 800038c:	e7da      	b.n	8000344 <main+0x4c>
 800038e:	bf00      	nop
 8000390:	200007d0 	.word	0x200007d0
 8000394:	200005d0 	.word	0x200005d0
 8000398:	20000134 	.word	0x20000134
 800039c:	200000e8 	.word	0x200000e8
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	200007d4 	.word	0x200007d4
 80003a8:	08006f10 	.word	0x08006f10

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b0a6      	sub	sp, #152	; 0x98
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f006 f906 	bl	80065cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2258      	movs	r2, #88	; 0x58
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f006 f8f8 	bl	80065cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003dc:	2302      	movs	r3, #2
 80003de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e4:	2310      	movs	r3, #16
 80003e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ea:	2302      	movs	r3, #2
 80003ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fb04 	bl	8001a18 <HAL_RCC_OscConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000416:	f000 fdc9 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	230f      	movs	r3, #15
 800041c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2302      	movs	r3, #2
 8000420:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000434:	2102      	movs	r1, #2
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fb42 	bl	8002ac0 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000442:	f000 fdb3 	bl	8000fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <SystemClock_Config+0xc4>)
 8000448:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800044e:	2300      	movs	r3, #0
 8000450:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000452:	2300      	movs	r3, #0
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fd67 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000464:	f000 fda2 	bl	8000fac <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3798      	adds	r7, #152	; 0x98
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	00101002 	.word	0x00101002

08000474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	; 0x40
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000488:	f107 031c 	add.w	r3, r7, #28
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a6:	463b      	mov	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b0:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004b2:	4a41      	ldr	r2, [pc, #260]	; (80005b8 <MX_TIM1_Init+0x144>)
 80004b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004b8:	2247      	movs	r2, #71	; 0x47
 80004ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004bc:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d0:	4b38      	ldr	r3, [pc, #224]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d6:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004dc:	4835      	ldr	r0, [pc, #212]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004de:	f002 ff43 	bl	8003368 <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80004e8:	f000 fd60 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	4619      	mov	r1, r3
 80004f8:	482e      	ldr	r0, [pc, #184]	; (80005b4 <MX_TIM1_Init+0x140>)
 80004fa:	f003 fc55 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000504:	f000 fd52 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000508:	482a      	ldr	r0, [pc, #168]	; (80005b4 <MX_TIM1_Init+0x140>)
 800050a:	f003 f8f1 	bl	80036f0 <HAL_TIM_IC_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000514:	f000 fd4a 	bl	8000fac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000518:	2304      	movs	r3, #4
 800051a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800051c:	2350      	movs	r3, #80	; 0x50
 800051e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	4619      	mov	r1, r3
 8000532:	4820      	ldr	r0, [pc, #128]	; (80005b4 <MX_TIM1_Init+0x140>)
 8000534:	f003 fd01 	bl	8003f3a <HAL_TIM_SlaveConfigSynchro>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800053e:	f000 fd35 	bl	8000fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000546:	2301      	movs	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	4619      	mov	r1, r3
 800055a:	4816      	ldr	r0, [pc, #88]	; (80005b4 <MX_TIM1_Init+0x140>)
 800055c:	f003 fa74 	bl	8003a48 <HAL_TIM_IC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000566:	f000 fd21 	bl	8000fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800056a:	2302      	movs	r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800056e:	2302      	movs	r3, #2
 8000570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	2204      	movs	r2, #4
 8000578:	4619      	mov	r1, r3
 800057a:	480e      	ldr	r0, [pc, #56]	; (80005b4 <MX_TIM1_Init+0x140>)
 800057c:	f003 fa64 	bl	8003a48 <HAL_TIM_IC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000586:	f000 fd11 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <MX_TIM1_Init+0x140>)
 800059c:	f004 fb70 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80005a6:	f000 fd01 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	3740      	adds	r7, #64	; 0x40
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000009c 	.word	0x2000009c
 80005b8:	40012c00 	.word	0x40012c00

080005bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <MX_TIM2_Init+0xe8>)
 80005f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_TIM2_Init+0xe8>)
 80005f8:	2223      	movs	r2, #35	; 0x23
 80005fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_TIM2_Init+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000604:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000608:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_TIM2_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000616:	4823      	ldr	r0, [pc, #140]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000618:	f002 fea6 	bl	8003368 <HAL_TIM_Base_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000622:	f000 fcc3 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800062c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000634:	f003 fbb8 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800063e:	f000 fcb5 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000644:	f002 fee7 	bl	8003416 <HAL_TIM_PWM_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800064e:	f000 fcad 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000662:	f004 fb0d 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800066c:	f000 fc9e 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000674:	230a      	movs	r3, #10
 8000676:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2208      	movs	r2, #8
 8000684:	4619      	mov	r1, r3
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000688:	f003 fa7a 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000692:	f000 fc8b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <MX_TIM2_Init+0xe8>)
 8000698:	f000 fd08 	bl	80010ac <HAL_TIM_MspPostInit>

}
 800069c:	bf00      	nop
 800069e:	3738      	adds	r7, #56	; 0x38
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000e8 	.word	0x200000e8

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	f004 fb54 	bl	8004d98 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 fc59 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000134 	.word	0x20000134
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xc4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_GPIO_Init+0xc4>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_GPIO_Init+0xc4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_GPIO_Init+0xc4>)
 800076c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_GPIO_Init+0xc4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f001 f92f 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0xc8>)
 80007a2:	f000 ff97 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f000 ff88 	bl	80016d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000800 	.word	0x48000800

080007d4 <GetSurvey>:

/* USER CODE BEGIN 4 */

uint32_t GetSurvey()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80007da:	2104      	movs	r1, #4
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <GetSurvey+0x2c>)
 80007de:	f003 fbef 	bl	8003fc0 <HAL_TIM_ReadCapturedValue>
 80007e2:	6078      	str	r0, [r7, #4]
	distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fd75 	bl	80002d4 <hc_sr_04_convert_us_to_cm>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <GetSurvey+0x30>)
 80007f0:	60da      	str	r2, [r3, #12]
	return distance_sensor.distance_cm;
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <GetSurvey+0x30>)
 80007f4:	68db      	ldr	r3, [r3, #12]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000009c 	.word	0x2000009c
 8000804:	200007d4 	.word	0x200007d4

08000808 <USART_keyboardhit>:

uint8_t USART_keyboardhit(){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	if(buffer_R.empty==buffer_R.busy){
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <USART_keyboardhit+0x20>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <USART_keyboardhit+0x20>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d101      	bne.n	800081c <USART_keyboardhit+0x14>
		return 0;
 8000818:	2300      	movs	r3, #0
 800081a:	e000      	b.n	800081e <USART_keyboardhit+0x16>
	}
	return 1;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000010 	.word	0x20000010

0800082c <USART_getchar>:

int8_t USART_getchar(){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	int16_t znak;
	if(USART_keyboardhit()){
 8000832:	f7ff ffe9 	bl	8000808 <USART_keyboardhit>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d019      	beq.n	8000870 <USART_getchar+0x44>
		znak = buffer_R.tab[buffer_R.busy];
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <USART_getchar+0x50>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <USART_getchar+0x50>)
 8000842:	6852      	ldr	r2, [r2, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	80fb      	strh	r3, [r7, #6]
		buffer_R.busy++;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <USART_getchar+0x50>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <USART_getchar+0x50>)
 8000852:	6053      	str	r3, [r2, #4]
		buffer_R.busy %= buffer_R.len;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <USART_getchar+0x50>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <USART_getchar+0x50>)
 800085a:	6892      	ldr	r2, [r2, #8]
 800085c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000860:	fb01 f202 	mul.w	r2, r1, r2
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <USART_getchar+0x50>)
 8000868:	6053      	str	r3, [r2, #4]
		return znak;
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	e001      	b.n	8000874 <USART_getchar+0x48>
	}
	else{
		return -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000010 	.word	0x20000010

08000880 <USART_fSend>:

void USART_fSend(char *msg, ...){
 8000880:	b40f      	push	{r0, r1, r2, r3}
 8000882:	b580      	push	{r7, lr}
 8000884:	b0a4      	sub	sp, #144	; 0x90
 8000886:	af00      	add	r7, sp, #0
	char tempDataToSend[128];
	int idx;
	va_list arglist;
	va_start(arglist, msg);
 8000888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800088c:	607b      	str	r3, [r7, #4]
	vsprintf(tempDataToSend, msg, arglist);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000898:	4618      	mov	r0, r3
 800089a:	f005 fe8d 	bl	80065b8 <vsiprintf>
	va_end(arglist);
	idx = buffer_T.empty;
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <USART_fSend+0xfc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008ac:	e020      	b.n	80008f0 <USART_fSend+0x70>
		buffer_T.tab[idx] = tempDataToSend[i];
 80008ae:	4b33      	ldr	r3, [pc, #204]	; (800097c <USART_fSend+0xfc>)
 80008b0:	68da      	ldr	r2, [r3, #12]
 80008b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008b6:	4413      	add	r3, r2
 80008b8:	f107 0108 	add.w	r1, r7, #8
 80008bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80008c0:	440a      	add	r2, r1
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
		idx++;
 80008c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		idx %= buffer_T.len;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <USART_fSend+0xfc>)
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80008dc:	fb01 f202 	mul.w	r2, r1, r2
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 80008e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc73 	bl	80001e0 <strlen>
 80008fa:	4602      	mov	r2, r0
 80008fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000900:	429a      	cmp	r2, r3
 8000902:	d8d4      	bhi.n	80008ae <USART_fSend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
	}
	__disable_irq();
	//Sprawdzamy czy nie trwa w tym momencie transmisja, jeśli nie to przestawiamy index i ją uruchamiamy
	if((buffer_T.busy == buffer_T.empty) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET)){
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <USART_fSend+0xfc>)
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <USART_fSend+0xfc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d125      	bne.n	8000960 <USART_fSend+0xe0>
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <USART_fSend+0x100>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	2b80      	cmp	r3, #128	; 0x80
 8000920:	d11e      	bne.n	8000960 <USART_fSend+0xe0>
		buffer_T.empty = idx;
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <USART_fSend+0xfc>)
 8000924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000928:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2,&buffer_T.tab[buffer_T.busy],1);
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <USART_fSend+0xfc>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <USART_fSend+0xfc>)
 8000930:	6852      	ldr	r2, [r2, #4]
 8000932:	4413      	add	r3, r2
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <USART_fSend+0x100>)
 800093a:	f004 fa7b 	bl	8004e34 <HAL_UART_Transmit_IT>
		buffer_T.busy++;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <USART_fSend+0xfc>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <USART_fSend+0xfc>)
 8000946:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <USART_fSend+0xfc>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <USART_fSend+0xfc>)
 800094e:	6892      	ldr	r2, [r2, #8]
 8000950:	fb93 f1f2 	sdiv	r1, r3, r2
 8000954:	fb01 f202 	mul.w	r2, r1, r2
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <USART_fSend+0xfc>)
 800095c:	6053      	str	r3, [r2, #4]
 800095e:	e003      	b.n	8000968 <USART_fSend+0xe8>
	}
	else{
		buffer_T.empty = idx;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <USART_fSend+0xfc>)
 8000962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000966:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000968:	b662      	cpsie	i
}
 800096a:	bf00      	nop
	}
	__enable_irq();
}
 800096c:	bf00      	nop
 800096e:	3790      	adds	r7, #144	; 0x90
 8000970:	46bd      	mov	sp, r7
 8000972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000976:	b004      	add	sp, #16
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000000 	.word	0x20000000
 8000980:	20000134 	.word	0x20000134

08000984 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && buffer_T.busy != buffer_T.empty){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <HAL_UART_TxCpltCallback+0x60>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d123      	bne.n	80009dc <HAL_UART_TxCpltCallback+0x58>
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d01d      	beq.n	80009dc <HAL_UART_TxCpltCallback+0x58>
		uint8_t znak = buffer_T.tab[buffer_T.busy];
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009a6:	6852      	ldr	r2, [r2, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	73fb      	strb	r3, [r7, #15]
		buffer_T.busy++;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009b6:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009be:	6892      	ldr	r2, [r2, #8]
 80009c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009c4:	fb01 f202 	mul.w	r2, r1, r2
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_UART_TxCpltCallback+0x64>)
 80009cc:	6053      	str	r3, [r2, #4]
		HAL_UART_Transmit_IT(&huart2,&znak,1);
 80009ce:	f107 030f 	add.w	r3, r7, #15
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <HAL_UART_TxCpltCallback+0x60>)
 80009d8:	f004 fa2c 	bl	8004e34 <HAL_UART_Transmit_IT>
	}
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000134 	.word	0x20000134
 80009e8:	20000000 	.word	0x20000000

080009ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_RxCpltCallback+0x4c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d119      	bne.n	8000a30 <HAL_UART_RxCpltCallback+0x44>
			buffer_R.empty++;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a04:	6013      	str	r3, [r2, #0]
			buffer_R.empty %= buffer_R.len;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a0c:	6892      	ldr	r2, [r2, #8]
 8000a0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a12:	fb01 f202 	mul.w	r2, r1, r2
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a1a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,&buffer_R.tab[buffer_R.empty],1);
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_UART_RxCpltCallback+0x50>)
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <HAL_UART_RxCpltCallback+0x4c>)
 8000a2c:	f004 fa60 	bl	8004ef0 <HAL_UART_Receive_IT>
		}
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000134 	.word	0x20000134
 8000a3c:	20000010 	.word	0x20000010

08000a40 <getFrame>:

int16_t getFrame(char *bufferedFrame) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	static int16_t numberOfChars = -1;
	static char frameBuf[frameMaxSize - 2];
	int16_t charFromFrame;
    int16_t ret;
	static uint8_t tildeOccured = 0;
	if ((charFromFrame = USART_getchar()) != -1) {
 8000a48:	f7ff fef0 	bl	800082c <USART_getchar>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	81fb      	strh	r3, [r7, #14]
 8000a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	f000 808c 	beq.w	8000b74 <getFrame+0x134>
		if (charFromFrame == startFrame) {
 8000a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a60:	2b7b      	cmp	r3, #123	; 0x7b
 8000a62:	d106      	bne.n	8000a72 <getFrame+0x32>
			numberOfChars = 0;
 8000a64:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <getFrame+0x140>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	801a      	strh	r2, [r3, #0]
			tildeOccured = 0;
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <getFrame+0x144>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e080      	b.n	8000b74 <getFrame+0x134>
		}
		else if (numberOfChars >= 0) {
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <getFrame+0x140>)
 8000a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db7b      	blt.n	8000b74 <getFrame+0x134>
			if (tildeOccured == 1) {
 8000a7c:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <getFrame+0x144>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d13a      	bne.n	8000afa <getFrame+0xba>
				switch (charFromFrame) {
 8000a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a88:	2b60      	cmp	r3, #96	; 0x60
 8000a8a:	d006      	beq.n	8000a9a <getFrame+0x5a>
 8000a8c:	2b60      	cmp	r3, #96	; 0x60
 8000a8e:	dc2b      	bgt.n	8000ae8 <getFrame+0xa8>
 8000a90:	2b5b      	cmp	r3, #91	; 0x5b
 8000a92:	d00f      	beq.n	8000ab4 <getFrame+0x74>
 8000a94:	2b5d      	cmp	r3, #93	; 0x5d
 8000a96:	d01a      	beq.n	8000ace <getFrame+0x8e>
 8000a98:	e026      	b.n	8000ae8 <getFrame+0xa8>
					case codingChar:
						frameBuf[numberOfChars++] = codingChar;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <getFrame+0x140>)
 8000a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aa0:	b293      	uxth	r3, r2
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b219      	sxth	r1, r3
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <getFrame+0x140>)
 8000aaa:	8019      	strh	r1, [r3, #0]
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <getFrame+0x148>)
 8000aae:	2160      	movs	r1, #96	; 0x60
 8000ab0:	5499      	strb	r1, [r3, r2]
						break;
 8000ab2:	e01e      	b.n	8000af2 <getFrame+0xb2>
					case codeStartcharFromFrame:
						frameBuf[numberOfChars++] = startFrame;
 8000ab4:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <getFrame+0x140>)
 8000ab6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aba:	b293      	uxth	r3, r2
 8000abc:	3301      	adds	r3, #1
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b219      	sxth	r1, r3
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <getFrame+0x140>)
 8000ac4:	8019      	strh	r1, [r3, #0]
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <getFrame+0x148>)
 8000ac8:	217b      	movs	r1, #123	; 0x7b
 8000aca:	5499      	strb	r1, [r3, r2]
						break;
 8000acc:	e011      	b.n	8000af2 <getFrame+0xb2>
					case codeEndcharFromFrame:
						frameBuf[numberOfChars++] = endFrame;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <getFrame+0x140>)
 8000ad0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ad4:	b293      	uxth	r3, r2
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b219      	sxth	r1, r3
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <getFrame+0x140>)
 8000ade:	8019      	strh	r1, [r3, #0]
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <getFrame+0x148>)
 8000ae2:	217d      	movs	r1, #125	; 0x7d
 8000ae4:	5499      	strb	r1, [r3, r2]
						break;
 8000ae6:	e004      	b.n	8000af2 <getFrame+0xb2>
					default:
						numberOfChars = -1;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <getFrame+0x140>)
 8000aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aee:	801a      	strh	r2, [r3, #0]
						break;
 8000af0:	bf00      	nop
				}
				tildeOccured = 0;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <getFrame+0x144>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e032      	b.n	8000b60 <getFrame+0x120>
			}
			else {
				if (charFromFrame == codingChar) {
 8000afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000afe:	2b60      	cmp	r3, #96	; 0x60
 8000b00:	d103      	bne.n	8000b0a <getFrame+0xca>
					tildeOccured = 1;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <getFrame+0x144>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e02a      	b.n	8000b60 <getFrame+0x120>
				}
				else if (charFromFrame == endFrame) {
 8000b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0e:	2b7d      	cmp	r3, #125	; 0x7d
 8000b10:	d115      	bne.n	8000b3e <getFrame+0xfe>
					ret = numberOfChars;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <getFrame+0x140>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	81bb      	strh	r3, [r7, #12]
					numberOfChars = -1;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <getFrame+0x140>)
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	801a      	strh	r2, [r3, #0]
					if (ret >= (frameMinSize-2)) {
 8000b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	dd1b      	ble.n	8000b60 <getFrame+0x120>
						memcpy(bufferedFrame, frameBuf, ret + 1);
 8000b28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <getFrame+0x148>)
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f005 fd90 	bl	8006658 <memcpy>
						return ret;
 8000b38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b3c:	e01c      	b.n	8000b78 <getFrame+0x138>
					}
				}
				else {
					frameBuf[numberOfChars] = charFromFrame;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <getFrame+0x140>)
 8000b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b44:	461a      	mov	r2, r3
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	b2d9      	uxtb	r1, r3
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <getFrame+0x148>)
 8000b4c:	5499      	strb	r1, [r3, r2]
					numberOfChars++;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <getFrame+0x140>)
 8000b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	3301      	adds	r3, #1
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <getFrame+0x140>)
 8000b5e:	801a      	strh	r2, [r3, #0]
				}
			}
			if (numberOfChars >= (frameMaxSize - 2)) {
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <getFrame+0x140>)
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000b6a:	dd03      	ble.n	8000b74 <getFrame+0x134>
				numberOfChars = -1;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <getFrame+0x140>)
 8000b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b72:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000020 	.word	0x20000020
 8000b84:	200007e4 	.word	0x200007e4
 8000b88:	200007e8 	.word	0x200007e8

08000b8c <analizeFrame>:


uint8_t analizeFrame(char *bufferedFrame, int16_t len, char *sender_add) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	460b      	mov	r3, r1
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	817b      	strh	r3, [r7, #10]
	uint8_t intCRC;
	uint16_t commandLength;
	uint8_t i;
	uint8_t crc_temp;

	if (strncmp(bufferedFrame, device_address, 3) == 0) {
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4949      	ldr	r1, [pc, #292]	; (8000cc4 <analizeFrame+0x138>)
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f005 fd1c 	bl	80065dc <strncmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8086 	bne.w	8000cb8 <analizeFrame+0x12c>
		//Pobranie i sprawdzenie nadawcy
		memcpy(sender_add, bufferedFrame + 3, 3);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f005 fd4f 	bl	8006658 <memcpy>
		//string null-terminated na końcu
		sender_add[3]=0;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3; ++i) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	77fb      	strb	r3, [r7, #31]
 8000bc6:	e01c      	b.n	8000c02 <analizeFrame+0x76>
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b40      	cmp	r3, #64	; 0x40
 8000bd2:	d905      	bls.n	8000be0 <analizeFrame+0x54>
 8000bd4:	7ffb      	ldrb	r3, [r7, #31]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b5a      	cmp	r3, #90	; 0x5a
 8000bde:	d90d      	bls.n	8000bfc <analizeFrame+0x70>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000be0:	7ffb      	ldrb	r3, [r7, #31]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000be8:	2b60      	cmp	r3, #96	; 0x60
 8000bea:	d905      	bls.n	8000bf8 <analizeFrame+0x6c>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b7a      	cmp	r3, #122	; 0x7a
 8000bf6:	d901      	bls.n	8000bfc <analizeFrame+0x70>
				return 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e05e      	b.n	8000cba <analizeFrame+0x12e>
		for (i = 0; i < 3; ++i) {
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	77fb      	strb	r3, [r7, #31]
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d9df      	bls.n	8000bc8 <analizeFrame+0x3c>
			}
		}
		//Pobranie i sprawdzenie zakresu znaków (dla crc)
		//string crc - wartość crc zapisana w postaci znakowej np."25"
		memcpy(stringCRC, bufferedFrame + len - 2, 2);
 8000c08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	82bb      	strh	r3, [r7, #20]
		stringCRC[2] = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < 2; ++i) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
 8000c20:	e012      	b.n	8000c48 <analizeFrame+0xbc>
			if (!(stringCRC[i] >= 0x30 && stringCRC[i] <= 0x39)) {
 8000c22:	7ffb      	ldrb	r3, [r7, #31]
 8000c24:	3320      	adds	r3, #32
 8000c26:	443b      	add	r3, r7
 8000c28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000c2e:	d906      	bls.n	8000c3e <analizeFrame+0xb2>
 8000c30:	7ffb      	ldrb	r3, [r7, #31]
 8000c32:	3320      	adds	r3, #32
 8000c34:	443b      	add	r3, r7
 8000c36:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c3a:	2b39      	cmp	r3, #57	; 0x39
 8000c3c:	d901      	bls.n	8000c42 <analizeFrame+0xb6>
				return 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e03b      	b.n	8000cba <analizeFrame+0x12e>
		for (i = 0; i < 2; ++i) {
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	3301      	adds	r3, #1
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	7ffb      	ldrb	r3, [r7, #31]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d9e9      	bls.n	8000c22 <analizeFrame+0x96>
			}
		}
		//Pobranie danych
		//Pobieranie długości danych (długość ramki - stałe elementy)
		commandLength = len - 8;
 8000c4e:	897b      	ldrh	r3, [r7, #10]
 8000c50:	3b08      	subs	r3, #8
 8000c52:	83bb      	strh	r3, [r7, #28]
		memcpy(bufferedFrame, bufferedFrame + 6, commandLength);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3306      	adds	r3, #6
 8000c58:	8bba      	ldrh	r2, [r7, #28]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f005 fcfb 	bl	8006658 <memcpy>
		//string null-terminated na końcu
		bufferedFrame[commandLength] = 0;
 8000c62:	8bbb      	ldrh	r3, [r7, #28]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]

		//Sprawdzenie konkretnych wartości CRC
		intCRC = atoi(stringCRC);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fbdb 	bl	800642c <atoi>
 8000c76:	4603      	mov	r3, r0
 8000c78:	76fb      	strb	r3, [r7, #27]
		if ((crc_temp = CRC_100(bufferedFrame, commandLength)) != intCRC) {
 8000c7a:	8bbb      	ldrh	r3, [r7, #28]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f000 f925 	bl	8000ed0 <CRC_100>
 8000c86:	4603      	mov	r3, r0
 8000c88:	76bb      	strb	r3, [r7, #26]
 8000c8a:	7eba      	ldrb	r2, [r7, #26]
 8000c8c:	7efb      	ldrb	r3, [r7, #27]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d010      	beq.n	8000cb4 <analizeFrame+0x128>
			sprintf(wrong_, "WRONG_CRC_%02d;", crc_temp);
 8000c92:	7ebb      	ldrb	r3, [r7, #26]
 8000c94:	461a      	mov	r2, r3
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <analizeFrame+0x13c>)
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <analizeFrame+0x140>)
 8000c9a:	f005 fc57 	bl	800654c <siprintf>
			sendFrame(sender_add, wrong_, strlen(wrong_));
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <analizeFrame+0x140>)
 8000ca0:	f7ff fa9e 	bl	80001e0 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4908      	ldr	r1, [pc, #32]	; (8000ccc <analizeFrame+0x140>)
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f810 	bl	8000cd0 <sendFrame>
			return 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e002      	b.n	8000cba <analizeFrame+0x12e>
		}
		return 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <analizeFrame+0x12e>
	}
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08006f3c 	.word	0x08006f3c
 8000cc8:	08006f18 	.word	0x08006f18
 8000ccc:	200005bc 	.word	0x200005bc

08000cd0 <sendFrame>:

void sendFrame(char dst[4], char *com, uint8_t com_len) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000cdc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000ce0:	6018      	str	r0, [r3, #0]
 8000ce2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000ce6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000cea:	6019      	str	r1, [r3, #0]
 8000cec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000cf0:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000cf4:	701a      	strb	r2, [r3, #0]
	char frameToSend[frameMin + 510 + 1];
	uint16_t codeCommandLength;
	uint8_t crc;
	char codeCommand[510];

	codeCommandLength = code_Command(com, codeCommand, com_len);
 8000cf6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000cfa:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	f107 0114 	add.w	r1, r7, #20
 8000d04:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d08:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	f000 f87f 	bl	8000e10 <code_Command>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

	frameToSend[0] = startFrame;
 8000d18:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d1c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000d20:	227b      	movs	r2, #123	; 0x7b
 8000d22:	701a      	strb	r2, [r3, #0]
	memcpy(frameToSend + 1, dst, 3);
 8000d24:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000d2e:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 8000d32:	2203      	movs	r2, #3
 8000d34:	6809      	ldr	r1, [r1, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 fc8e 	bl	8006658 <memcpy>
	memcpy(frameToSend + 1 + 3, device_address, 3);
 8000d3c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d40:	3304      	adds	r3, #4
 8000d42:	2203      	movs	r2, #3
 8000d44:	4930      	ldr	r1, [pc, #192]	; (8000e08 <sendFrame+0x138>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 fc86 	bl	8006658 <memcpy>

	memcpy(frameToSend + 1 + 3 + 3, codeCommand, codeCommandLength);
 8000d4c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d50:	3307      	adds	r3, #7
 8000d52:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000d56:	f107 0114 	add.w	r1, r7, #20
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fc7c 	bl	8006658 <memcpy>

	//przed zakodowaniem znaków
	crc = CRC_100(com, com_len);
 8000d60:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d64:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d6e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d72:	4611      	mov	r1, r2
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f000 f8ab 	bl	8000ed0 <CRC_100>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	// 78/10 =7
	// 7+48 = 55
	// "7"
	frameToSend[1 + 3 + 3 + codeCommandLength] = crc / 10 + 48;
 8000d80:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <sendFrame+0x13c>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000d92:	3307      	adds	r3, #7
 8000d94:	3230      	adds	r2, #48	; 0x30
 8000d96:	b2d1      	uxtb	r1, r2
 8000d98:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000d9c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000da0:	54d1      	strb	r1, [r2, r3]
	// 78 % 10 = 8
	// 8 + 48 = 56
	// "8"
	frameToSend[1 + 3 + 3  + codeCommandLength + 1] = crc % 10 + 48;
 8000da2:	f897 241d 	ldrb.w	r2, [r7, #1053]	; 0x41d
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <sendFrame+0x13c>)
 8000da8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dac:	08d9      	lsrs	r1, r3, #3
 8000dae:	460b      	mov	r3, r1
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	3230      	adds	r2, #48	; 0x30
 8000dc2:	b2d1      	uxtb	r1, r2
 8000dc4:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000dc8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000dcc:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 2] = endFrame;
 8000dce:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dd2:	3309      	adds	r3, #9
 8000dd4:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000dd8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000ddc:	217d      	movs	r1, #125	; 0x7d
 8000dde:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 3] = 0;
 8000de0:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000de4:	330a      	adds	r3, #10
 8000de6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000dea:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000dee:	2100      	movs	r1, #0
 8000df0:	54d1      	strb	r1, [r2, r3]

	USART_fSend(frameToSend);
 8000df2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd42 	bl	8000880 <USART_fSend>
}
 8000dfc:	bf00      	nop
 8000dfe:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08006f3c 	.word	0x08006f3c
 8000e0c:	cccccccd 	.word	0xcccccccd

08000e10 <code_Command>:

//Przerobienie znaków początku, końca i znaku kodującego na nadające się do przesyłania w ramce
int16_t code_Command(char *src, char *dst, uint8_t com_len) {
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	uint16_t j;
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	82fb      	strh	r3, [r7, #22]
 8000e22:	2300      	movs	r3, #0
 8000e24:	82bb      	strh	r3, [r7, #20]
 8000e26:	e045      	b.n	8000eb4 <code_Command+0xa4>

		switch (src[i]) {
 8000e28:	8afb      	ldrh	r3, [r7, #22]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b7d      	cmp	r3, #125	; 0x7d
 8000e32:	d022      	beq.n	8000e7a <code_Command+0x6a>
 8000e34:	2b7d      	cmp	r3, #125	; 0x7d
 8000e36:	dc2e      	bgt.n	8000e96 <code_Command+0x86>
 8000e38:	2b60      	cmp	r3, #96	; 0x60
 8000e3a:	d002      	beq.n	8000e42 <code_Command+0x32>
 8000e3c:	2b7b      	cmp	r3, #123	; 0x7b
 8000e3e:	d00e      	beq.n	8000e5e <code_Command+0x4e>
 8000e40:	e029      	b.n	8000e96 <code_Command+0x86>
		case codingChar:
			dst[j++] = codingChar;
 8000e42:	8abb      	ldrh	r3, [r7, #20]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	82ba      	strh	r2, [r7, #20]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2260      	movs	r2, #96	; 0x60
 8000e50:	701a      	strb	r2, [r3, #0]
			dst[j] = codingChar;
 8000e52:	8abb      	ldrh	r3, [r7, #20]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	4413      	add	r3, r2
 8000e58:	2260      	movs	r2, #96	; 0x60
 8000e5a:	701a      	strb	r2, [r3, #0]
			break;
 8000e5c:	e024      	b.n	8000ea8 <code_Command+0x98>
		case startFrame:
			dst[j++] = codingChar;
 8000e5e:	8abb      	ldrh	r3, [r7, #20]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	82ba      	strh	r2, [r7, #20]
 8000e64:	461a      	mov	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	4413      	add	r3, r2
 8000e6a:	2260      	movs	r2, #96	; 0x60
 8000e6c:	701a      	strb	r2, [r3, #0]
			dst[j] = '[';
 8000e6e:	8abb      	ldrh	r3, [r7, #20]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	225b      	movs	r2, #91	; 0x5b
 8000e76:	701a      	strb	r2, [r3, #0]
			break;
 8000e78:	e016      	b.n	8000ea8 <code_Command+0x98>
		case endFrame:
			dst[j++] = codingChar;
 8000e7a:	8abb      	ldrh	r3, [r7, #20]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	82ba      	strh	r2, [r7, #20]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	4413      	add	r3, r2
 8000e86:	2260      	movs	r2, #96	; 0x60
 8000e88:	701a      	strb	r2, [r3, #0]
			dst[j] = ']';
 8000e8a:	8abb      	ldrh	r3, [r7, #20]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	225d      	movs	r2, #93	; 0x5d
 8000e92:	701a      	strb	r2, [r3, #0]
			break;
 8000e94:	e008      	b.n	8000ea8 <code_Command+0x98>
		default:
			dst[j] = src[i];
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	441a      	add	r2, r3
 8000e9c:	8abb      	ldrh	r3, [r7, #20]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	701a      	strb	r2, [r3, #0]
			break;
 8000ea6:	bf00      	nop
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000ea8:	8afb      	ldrh	r3, [r7, #22]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	82fb      	strh	r3, [r7, #22]
 8000eae:	8abb      	ldrh	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	82bb      	strh	r3, [r7, #20]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	8afa      	ldrh	r2, [r7, #22]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3b4      	bcc.n	8000e28 <code_Command+0x18>
		}
	}
	return j;
 8000ebe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <CRC_100>:

uint8_t CRC_100(char *src, uint8_t len) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t temp = src[0];
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e009      	b.n	8000efc <CRC_100+0x2c>
		temp ^= src[i];
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	4053      	eors	r3, r2
 8000ef4:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3f1      	bcc.n	8000ee8 <CRC_100+0x18>
	}
	temp %= 100;
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <CRC_100+0x58>)
 8000f08:	fba2 1203 	umull	r1, r2, r2, r3
 8000f0c:	0952      	lsrs	r2, r2, #5
 8000f0e:	2164      	movs	r1, #100	; 0x64
 8000f10:	fb01 f202 	mul.w	r2, r1, r2
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	73bb      	strb	r3, [r7, #14]
	return temp;
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	51eb851f 	.word	0x51eb851f

08000f2c <analizeCommend>:

void analizeCommend(char* com, uint8_t len, char* sender_add) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	460b      	mov	r3, r1
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	72fb      	strb	r3, [r7, #11]
	if (strncmp(com,"GetSurvey()", (unsigned)11) == 0) {
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	4918      	ldr	r1, [pc, #96]	; (8000fa0 <analizeCommend+0x74>)
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f005 fb4c 	bl	80065dc <strncmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d125      	bne.n	8000f96 <analizeCommend+0x6a>
		uint32_t distance = GetSurvey();
 8000f4a:	f7ff fc43 	bl	80007d4 <GetSurvey>
 8000f4e:	6278      	str	r0, [r7, #36]	; 0x24
		char stringDistance[20];
		sprintf(stringDistance, "%lu", (unsigned long)distance);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f56:	4913      	ldr	r1, [pc, #76]	; (8000fa4 <analizeCommend+0x78>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 faf7 	bl	800654c <siprintf>
		strcat(stringDistance, "cm");
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f93c 	bl	80001e0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4413      	add	r3, r2
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <analizeCommend+0x7c>)
 8000f74:	8811      	ldrh	r1, [r2, #0]
 8000f76:	7892      	ldrb	r2, [r2, #2]
 8000f78:	8019      	strh	r1, [r3, #0]
 8000f7a:	709a      	strb	r2, [r3, #2]
		sendFrame(sender_add, stringDistance, strlen(stringDistance));
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f92d 	bl	80001e0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fe9d 	bl	8000cd0 <sendFrame>
	}
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08006f28 	.word	0x08006f28
 8000fa4:	08006f34 	.word	0x08006f34
 8000fa8:	08006f38 	.word	0x08006f38

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x44>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fab8 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_TIM_Base_MspInit+0xa4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12a      	bne.n	8001078 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001064:	2306      	movs	r3, #6
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f000 fb2f 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001076:	e010      	b.n	800109a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001080:	d10b      	bne.n	800109a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d11d      	bne.n	800110a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 80010e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80010f8:	230a      	movs	r3, #10
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 fae5 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_UART_MspInit+0x8c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d130      	bne.n	800119c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_UART_MspInit+0x90>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116a:	230c      	movs	r3, #12
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117a:	2307      	movs	r3, #7
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f000 faa4 	bl	80016d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2026      	movs	r0, #38	; 0x26
 8001192:	f000 f9f2 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001196:	2026      	movs	r0, #38	; 0x26
 8001198:	f000 fa0b 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f8c4 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART2_IRQHandler+0x10>)
 8001206:	f003 feb7 	bl	8004f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000134 	.word	0x20000134

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f005 f9dc 	bl	8006600 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20010000 	.word	0x20010000
 8001274:	00000400 	.word	0x00000400
 8001278:	200008f0 	.word	0x200008f0
 800127c:	20000a40 	.word	0x20000a40

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a8:	f7ff ffea 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f005 f99b 	bl	800660c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff f80f 	bl	80002f8 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012e8:	080070b4 	.word	0x080070b4
  ldr r2, =_sbss
 80012ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012f0:	20000a40 	.word	0x20000a40

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f92b 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fe50 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f943 	bl	80015ce <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f90b 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000024 	.word	0x20000024
 800137c:	2000002c 	.word	0x2000002c
 8001380:	20000028 	.word	0x20000028

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000002c 	.word	0x2000002c
 80013a8:	200008f4 	.word	0x200008f4

080013ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200008f4 	.word	0x200008f4

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e020      	b.n	800164c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 020e 	bic.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800166a:	2b02      	cmp	r3, #2
 800166c:	d005      	beq.n	800167a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e027      	b.n	80016ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 020e 	bic.w	r2, r2, #14
 8001688:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
    } 
  }
  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	e160      	b.n	80019a6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8152 	beq.w	80019a0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_Init+0x40>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d130      	bne.n	8001776 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174a:	2201      	movs	r2, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 0201 	and.w	r2, r3, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b03      	cmp	r3, #3
 8001780:	d017      	beq.n	80017b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d123      	bne.n	8001806 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	6939      	ldr	r1, [r7, #16]
 8001802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0203 	and.w	r2, r3, #3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80ac 	beq.w	80019a0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001860:	4a59      	ldr	r2, [pc, #356]	; (80019c8 <HAL_GPIO_Init+0x2f4>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188a:	d025      	beq.n	80018d8 <HAL_GPIO_Init+0x204>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x2f8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d01f      	beq.n	80018d4 <HAL_GPIO_Init+0x200>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_GPIO_Init+0x2fc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_GPIO_Init+0x1fc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x300>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1f8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x304>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1f4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x308>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1f0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x30c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1ec>
 80018bc:	2306      	movs	r3, #6
 80018be:	e00c      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018c0:	2307      	movs	r3, #7
 80018c2:	e00a      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018c4:	2305      	movs	r3, #5
 80018c6:	e008      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x206>
 80018d8:	2300      	movs	r3, #0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ea:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x2f4>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_GPIO_Init+0x310>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800191c:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <HAL_GPIO_Init+0x310>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x310>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001946:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_GPIO_Init+0x310>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_GPIO_Init+0x310>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_GPIO_Init+0x310>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x310>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_GPIO_Init+0x310>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f ae97 	bne.w	80016e4 <HAL_GPIO_Init+0x10>
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	48001400 	.word	0x48001400
 80019e0:	48001800 	.word	0x48001800
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f001 b83a 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 816f 	beq.w	8001d32 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a54:	4bb5      	ldr	r3, [pc, #724]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d00c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a60:	4bb2      	ldr	r3, [pc, #712]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d15c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x10e>
 8001a6c:	4baf      	ldr	r3, [pc, #700]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d155      	bne.n	8001b26 <HAL_RCC_OscConfig+0x10e>
 8001a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x94>
 8001aa6:	4ba1      	ldr	r3, [pc, #644]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e015      	b.n	8001ad8 <HAL_RCC_OscConfig+0xc0>
 8001aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ac8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ad4:	4b95      	ldr	r3, [pc, #596]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001adc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001ae0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ae4:	fa92 f2a2 	rbit	r2, r2
 8001ae8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001aec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001af0:	fab2 f282 	clz	r2, r2
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f002 021f 	and.w	r2, r2, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8111 	beq.w	8001d30 <HAL_RCC_OscConfig+0x318>
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8108 	bne.w	8001d30 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f000 bfc6 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12e>
 8001b38:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7b      	ldr	r2, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e036      	b.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
 8001b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x158>
 8001b56:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a74      	ldr	r2, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e021      	b.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x184>
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
 8001b9c:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a62      	ldr	r2, [pc, #392]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d059      	beq.n	8001c78 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fbf2 	bl	80013ac <HAL_GetTick>
 8001bc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bce:	f7ff fbed 	bl	80013ac <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d902      	bls.n	8001be4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	f000 bf67 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8001be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001bf8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1fe>
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x22a>
 8001c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c46:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c4a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c4e:	fa92 f2a2 	rbit	r2, r2
 8001c52:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001c56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c5a:	fab2 f282 	clz	r2, r2
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f002 021f 	and.w	r2, r2, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0ab      	beq.n	8001bce <HAL_RCC_OscConfig+0x1b6>
 8001c76:	e05c      	b.n	8001d32 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb98 	bl	80013ac <HAL_GetTick>
 8001c7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7ff fb93 	bl	80013ac <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d902      	bls.n	8001c98 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f000 bf0d 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001cac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x2b2>
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2de>
 8001cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ce6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x314>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001cfe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d02:	fa92 f2a2 	rbit	r2, r2
 8001d06:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d0a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ab      	bne.n	8001c82 <HAL_RCC_OscConfig+0x26a>
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_OscConfig+0x31a>
 8001d2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 817f 	beq.w	8002046 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d48:	4ba7      	ldr	r3, [pc, #668]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d54:	4ba4      	ldr	r3, [pc, #656]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d173      	bne.n	8001e48 <HAL_RCC_OscConfig+0x430>
 8001d60:	4ba1      	ldr	r3, [pc, #644]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6c:	d16c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x430>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001d80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x386>
 8001d98:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e013      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3ae>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001db0:	2302      	movs	r3, #2
 8001db2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001db6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001dcc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001dd0:	fa92 f2a2 	rbit	r2, r2
 8001dd4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001dd8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f042 0220 	orr.w	r2, r2, #32
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f002 021f 	and.w	r2, r2, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3f6>
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d002      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f000 be52 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	21f8      	movs	r1, #248	; 0xf8
 8001e24:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e2c:	fa91 f1a1 	rbit	r1, r1
 8001e30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e38:	fab1 f181 	clz	r1, r1
 8001e3c:	b2c9      	uxtb	r1, r1
 8001e3e:	408b      	lsls	r3, r1
 8001e40:	4969      	ldr	r1, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e0fe      	b.n	8002046 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8088 	beq.w	8001f6a <HAL_RCC_OscConfig+0x552>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001e6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	461a      	mov	r2, r3
 8001e82:	2301      	movs	r3, #1
 8001e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fa91 	bl	80013ac <HAL_GetTick>
 8001e8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fa8c 	bl	80013ac <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d902      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f000 be06 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001eb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4be>
 8001ed0:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e013      	b.n	8001efe <HAL_RCC_OscConfig+0x4e6>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001eee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2202      	movs	r2, #2
 8001f00:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f08:	fa92 f2a2 	rbit	r2, r2
 8001f0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0af      	beq.n	8001e90 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	21f8      	movs	r1, #248	; 0xf8
 8001f46:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f4e:	fa91 f1a1 	rbit	r1, r1
 8001f52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f5a:	fab1 f181 	clz	r1, r1
 8001f5e:	b2c9      	uxtb	r1, r1
 8001f60:	408b      	lsls	r3, r1
 8001f62:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e06d      	b.n	8002046 <HAL_RCC_OscConfig+0x62e>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001f7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	461a      	mov	r2, r3
 8001f92:	2300      	movs	r3, #0
 8001f94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fa09 	bl	80013ac <HAL_GetTick>
 8001f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fa04 	bl	80013ac <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d902      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f000 bd7e 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x5d4>
 8001fe0:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <HAL_RCC_OscConfig+0x5d0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e016      	b.n	8002014 <HAL_RCC_OscConfig+0x5fc>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002004:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002010:	4bbf      	ldr	r3, [pc, #764]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2202      	movs	r2, #2
 8002016:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800201a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002026:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ac      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8113 	beq.w	8002282 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d07c      	beq.n	8002166 <HAL_RCC_OscConfig+0x74e>
 800206c:	2301      	movs	r3, #1
 800206e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800207e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4ba2      	ldr	r3, [pc, #648]	; (8002314 <HAL_RCC_OscConfig+0x8fc>)
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	461a      	mov	r2, r3
 8002092:	2301      	movs	r3, #1
 8002094:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff f989 	bl	80013ac <HAL_GetTick>
 800209a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff f984 	bl	80013ac <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d902      	bls.n	80020b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f000 bcfe 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002114:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 8002118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002122:	2102      	movs	r1, #2
 8002124:	6019      	str	r1, [r3, #0]
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f1a3 	rbit	r1, r3
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800213c:	6019      	str	r1, [r3, #0]
  return result;
 800213e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002142:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d09d      	beq.n	80020a0 <HAL_RCC_OscConfig+0x688>
 8002164:	e08d      	b.n	8002282 <HAL_RCC_OscConfig+0x86a>
 8002166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002184:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002192:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x8fc>)
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff f900 	bl	80013ac <HAL_GetTick>
 80021ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff f8fb 	bl	80013ac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	f000 bc75 	b.w	8002ab2 <HAL_RCC_OscConfig+0x109a>
 80021c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021d0:	2202      	movs	r2, #2
 80021d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021f4:	2202      	movs	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002220:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002232:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 8002236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002240:	2102      	movs	r1, #2
 8002242:	6019      	str	r1, [r3, #0]
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f1a3 	rbit	r1, r3
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800225a:	6019      	str	r1, [r3, #0]
  return result;
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d197      	bne.n	80021b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002286:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 81a5 	beq.w	80025e2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RCC_OscConfig+0x8f8>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_OscConfig+0x900>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_OscConfig+0x900>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x900>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f0:	f7ff f85c 	bl	80013ac <HAL_GetTick>
 80022f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e010      	b.n	800231c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7ff f857 	bl	80013ac <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d908      	bls.n	800231c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e3d1      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	10908120 	.word	0x10908120
 8002318:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_OscConfig+0xb3c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0e8      	beq.n	80022fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x92e>
 8002338:	4b87      	ldr	r3, [pc, #540]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a86      	ldr	r2, [pc, #536]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e035      	b.n	80023b2 <HAL_RCC_OscConfig+0x99a>
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x958>
 8002356:	4b80      	ldr	r3, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	e020      	b.n	80023b2 <HAL_RCC_OscConfig+0x99a>
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x982>
 8002380:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a74      	ldr	r2, [pc, #464]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	4b72      	ldr	r3, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a71      	ldr	r2, [pc, #452]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x99a>
 800239a:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a6b      	ldr	r2, [pc, #428]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8081 	beq.w	80024c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fff2 	bl	80013ac <HAL_GetTick>
 80023c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00b      	b.n	80023e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe ffed 	bl	80013ac <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e365      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fa93 f2a3 	rbit	r2, r3
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800242c:	601a      	str	r2, [r3, #0]
  return result;
 800242e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002432:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002436:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0xa3a>
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	e013      	b.n	800247a <HAL_RCC_OscConfig+0xa62>
 8002452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002456:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002462:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002470:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002482:	2102      	movs	r1, #2
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800248a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fa92 f1a2 	rbit	r1, r2
 8002494:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002498:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800249c:	6011      	str	r1, [r2, #0]
  return result;
 800249e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024a2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d084      	beq.n	80023ce <HAL_RCC_OscConfig+0x9b6>
 80024c4:	e083      	b.n	80025ce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7fe ff71 	bl	80013ac <HAL_GetTick>
 80024ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe ff6c 	bl	80013ac <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e2e4      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 80024e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002506:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002510:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002514:	2202      	movs	r2, #2
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800251c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800252a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002538:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0xb44>
 800254e:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_RCC_OscConfig+0xb40>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	e017      	b.n	8002584 <HAL_RCC_OscConfig+0xb6c>
 8002554:	40007000 	.word	0x40007000
 8002558:	40021000 	.word	0x40021000
 800255c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002560:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4bb3      	ldr	r3, [pc, #716]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002588:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800258c:	2102      	movs	r1, #2
 800258e:	6011      	str	r1, [r2, #0]
 8002590:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002594:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	fa92 f1a2 	rbit	r1, r2
 800259e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025a2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80025a6:	6011      	str	r1, [r2, #0]
  return result;
 80025a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ac:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d180      	bne.n	80024d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ce:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a9d      	ldr	r2, [pc, #628]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 825e 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b96      	ldr	r3, [pc, #600]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f000 821f 	beq.w	8002a40 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b02      	cmp	r3, #2
 8002610:	f040 8170 	bne.w	80028f4 <HAL_RCC_OscConfig+0xedc>
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800261c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002638:	601a      	str	r2, [r3, #0]
  return result;
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002642:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fea7 	bl	80013ac <HAL_GetTick>
 800265e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fea2 	bl	80013ac <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e21c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0xcaa>
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e027      	b.n	8002712 <HAL_RCC_OscConfig+0xcfa>
 80026c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fa93 f2a3 	rbit	r2, r3
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002716:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800271a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800271e:	6011      	str	r1, [r2, #0]
 8002720:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002724:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	fa92 f1a2 	rbit	r1, r2
 800272e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002732:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002736:	6011      	str	r1, [r2, #0]
  return result;
 8002738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d182      	bne.n	8002664 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 8002774:	4313      	orrs	r3, r2
 8002776:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	430b      	orrs	r3, r1
 800279a:	492d      	ldr	r1, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027c4:	601a      	str	r2, [r3, #0]
  return result;
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fde1 	bl	80013ac <HAL_GetTick>
 80027ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ee:	e009      	b.n	8002804 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fddc 	bl	80013ac <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e156      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8002804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002808:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800280c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002816:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002824:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002828:	601a      	str	r2, [r3, #0]
  return result;
 800282a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002832:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0xe3c>
 8002848:	4b01      	ldr	r3, [pc, #4]	; (8002850 <HAL_RCC_OscConfig+0xe38>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e02a      	b.n	80028a4 <HAL_RCC_OscConfig+0xe8c>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002858:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800285c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002866:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002874:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002882:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	fa93 f2a3 	rbit	r2, r3
 8002896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b86      	ldr	r3, [pc, #536]	; (8002abc <HAL_RCC_OscConfig+0x10a4>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028b0:	6011      	str	r1, [r2, #0]
 80028b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	fa92 f1a2 	rbit	r1, r2
 80028c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028c4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80028c8:	6011      	str	r1, [r2, #0]
  return result;
 80028ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028ce:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f43f af7f 	beq.w	80027f0 <HAL_RCC_OscConfig+0xdd8>
 80028f2:	e0dd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1098>
 80028f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002906:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002914:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002918:	601a      	str	r2, [r3, #0]
  return result;
 800291a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002922:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800292e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	461a      	mov	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe fd37 	bl	80013ac <HAL_GetTick>
 800293e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e009      	b.n	8002958 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fd32 	bl	80013ac <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0ac      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800297c:	601a      	str	r2, [r3, #0]
  return result;
 800297e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002982:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002986:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0xf8a>
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x10a4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e027      	b.n	80029f2 <HAL_RCC_OscConfig+0xfda>
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029cc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4b33      	ldr	r3, [pc, #204]	; (8002abc <HAL_RCC_OscConfig+0x10a4>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029fe:	6011      	str	r1, [r2, #0]
 8002a00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fa92 f1a2 	rbit	r1, r2
 8002a0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a12:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a16:	6011      	str	r1, [r2, #0]
  return result;
 8002a18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a1c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d182      	bne.n	8002944 <HAL_RCC_OscConfig+0xf2c>
 8002a3e:	e037      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e02e      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_OscConfig+0x10a4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_RCC_OscConfig+0x10a4>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a68:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d117      	bne.n	8002aac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a80:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b09e      	sub	sp, #120	; 0x78
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e162      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	498b      	ldr	r1, [pc, #556]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e14a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	497f      	ldr	r1, [pc, #508]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80dc 	beq.w	8002cec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xf6>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xa6>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	667b      	str	r3, [r7, #100]	; 0x64
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17b      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0f3      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d13c      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x178>
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_ClockConfig+0x148>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13a      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1a0>
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	617a      	str	r2, [r7, #20]
  return result;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fb76 	bl	80013ac <HAL_GetTick>
 8002cc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fb72 	bl	80013ac <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e061      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d62:	f000 f829 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	22f0      	movs	r2, #240	; 0xf0
 8002d72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x2ec>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fac4 	bl	8001324 <HAL_InitTick>
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3778      	adds	r7, #120	; 0x78
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08006f40 	.word	0x08006f40
 8002db0:	20000024 	.word	0x20000024
 8002db4:	20000028 	.word	0x20000028

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b08b      	sub	sp, #44	; 0x2c
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e03f      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dea:	623b      	str	r3, [r7, #32]
      break;
 8002dec:	e03f      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002df4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002df8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	607a      	str	r2, [r7, #4]
  return result;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	40d3      	lsrs	r3, r2
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e0e:	5cd3      	ldrb	r3, [r2, r3]
 8002e10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	60fa      	str	r2, [r7, #12]
  return result;
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	40d3      	lsrs	r3, r2
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e40:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e007      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	623b      	str	r3, [r7, #32]
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e6a:	623b      	str	r3, [r7, #32]
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	372c      	adds	r7, #44	; 0x2c
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	007a1200 	.word	0x007a1200
 8002e84:	08006f58 	.word	0x08006f58
 8002e88:	08006f68 	.word	0x08006f68

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000024 	.word	0x20000024

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eaa:	f7ff ffef 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ebc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	603a      	str	r2, [r7, #0]
  return result;
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	40d3      	lsrs	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08006f50 	.word	0x08006f50

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eee:	f7ff ffcd 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002efc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	603a      	str	r2, [r7, #0]
  return result;
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	40d3      	lsrs	r3, r2
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08006f50 	.word	0x08006f50

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b092      	sub	sp, #72	; 0x48
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80d4 	beq.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f50:	4b4e      	ldr	r3, [pc, #312]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a4a      	ldr	r2, [pc, #296]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	61d3      	str	r3, [r2, #28]
 8002f68:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b42      	ldr	r3, [pc, #264]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a41      	ldr	r2, [pc, #260]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fa0b 	bl	80013ac <HAL_GetTick>
 8002f96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe fa07 	bl	80013ac <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1d6      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8084 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d07c      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	461a      	mov	r2, r3
 8003002:	2301      	movs	r3, #1
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	461a      	mov	r2, r3
 8003026:	2300      	movs	r3, #0
 8003028:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800302a:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04b      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe f9b7 	bl	80013ac <HAL_GetTick>
 800303e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003040:	e00a      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe f9b3 	bl	80013ac <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e180      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003058:	2302      	movs	r3, #2
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	61fb      	str	r3, [r7, #28]
  return result;
 8003070:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d108      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003086:	4b01      	ldr	r3, [pc, #4]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	e00d      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	10908100 	.word	0x10908100
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	4b9a      	ldr	r3, [pc, #616]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	613a      	str	r2, [r7, #16]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fa92 f2a2 	rbit	r2, r2
 80030b2:	60fa      	str	r2, [r7, #12]
  return result;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0b7      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030d2:	4b8f      	ldr	r3, [pc, #572]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	498c      	ldr	r1, [pc, #560]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a87      	ldr	r2, [pc, #540]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003104:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	497f      	ldr	r1, [pc, #508]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003122:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4978      	ldr	r1, [pc, #480]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	4970      	ldr	r1, [pc, #448]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f023 0210 	bic.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4969      	ldr	r1, [pc, #420]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800317c:	4b64      	ldr	r3, [pc, #400]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	4961      	ldr	r1, [pc, #388]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f023 0220 	bic.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	495a      	ldr	r1, [pc, #360]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b8:	4b55      	ldr	r3, [pc, #340]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	4952      	ldr	r1, [pc, #328]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	494b      	ldr	r1, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4943      	ldr	r1, [pc, #268]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003212:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	493c      	ldr	r1, [pc, #240]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003230:	4b37      	ldr	r3, [pc, #220]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	4934      	ldr	r1, [pc, #208]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800324e:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	492d      	ldr	r1, [pc, #180]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	4925      	ldr	r1, [pc, #148]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	491e      	ldr	r1, [pc, #120]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	490f      	ldr	r1, [pc, #60]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003302:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	4913      	ldr	r1, [pc, #76]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	490b      	ldr	r1, [pc, #44]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003336:	4313      	orrs	r3, r2
 8003338:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003352:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3748      	adds	r7, #72	; 0x48
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e049      	b.n	800340e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fe36 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fe4e 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e049      	b.n	80034bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f841 	bl	80034c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fdf7 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_TIM_PWM_Start+0x24>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e03c      	b.n	8003576 <HAL_TIM_PWM_Start+0x9e>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d109      	bne.n	8003516 <HAL_TIM_PWM_Start+0x3e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e02f      	b.n	8003576 <HAL_TIM_PWM_Start+0x9e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d109      	bne.n	8003530 <HAL_TIM_PWM_Start+0x58>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e022      	b.n	8003576 <HAL_TIM_PWM_Start+0x9e>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d109      	bne.n	800354a <HAL_TIM_PWM_Start+0x72>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e015      	b.n	8003576 <HAL_TIM_PWM_Start+0x9e>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b10      	cmp	r3, #16
 800354e:	d109      	bne.n	8003564 <HAL_TIM_PWM_Start+0x8c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e008      	b.n	8003576 <HAL_TIM_PWM_Start+0x9e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0a1      	b.n	80036c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xb6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	e023      	b.n	80035d6 <HAL_TIM_PWM_Start+0xfe>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d104      	bne.n	800359e <HAL_TIM_PWM_Start+0xc6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800359c:	e01b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xfe>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0xd6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ac:	e013      	b.n	80035d6 <HAL_TIM_PWM_Start+0xfe>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0xe6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035bc:	e00b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xfe>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0xf6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	e003      	b.n	80035d6 <HAL_TIM_PWM_Start+0xfe>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fb28 	bl	8004c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_TIM_PWM_Start+0x1f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_TIM_PWM_Start+0x148>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <HAL_TIM_PWM_Start+0x1f8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_TIM_PWM_Start+0x148>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <HAL_TIM_PWM_Start+0x1fc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <HAL_TIM_PWM_Start+0x148>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_TIM_PWM_Start+0x200>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_TIM_PWM_Start+0x148>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	; (80036dc <HAL_TIM_PWM_Start+0x204>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_TIM_PWM_Start+0x148>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_TIM_PWM_Start+0x208>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_TIM_PWM_Start+0x14c>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_TIM_PWM_Start+0x14e>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a23      	ldr	r2, [pc, #140]	; (80036cc <HAL_TIM_PWM_Start+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01d      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d018      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_TIM_PWM_Start+0x20c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <HAL_TIM_PWM_Start+0x210>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_TIM_PWM_Start+0x1f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_TIM_PWM_Start+0x1fc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1a8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_TIM_PWM_Start+0x208>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d115      	bne.n	80036ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_TIM_PWM_Start+0x214>)
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d015      	beq.n	80036be <HAL_TIM_PWM_Start+0x1e6>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d011      	beq.n	80036be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800
 80036e0:	40015000 	.word	0x40015000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800
 80036ec:	00010007 	.word	0x00010007

080036f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e049      	b.n	8003796 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f841 	bl	800379e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 fc8a 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_IT+0x1e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	e023      	b.n	800381a <HAL_TIM_IC_Start_IT+0x66>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0x2e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e01b      	b.n	800381a <HAL_TIM_IC_Start_IT+0x66>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_IT+0x3e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e013      	b.n	800381a <HAL_TIM_IC_Start_IT+0x66>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_IT+0x4e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e00b      	b.n	800381a <HAL_TIM_IC_Start_IT+0x66>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_IT+0x5e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e003      	b.n	800381a <HAL_TIM_IC_Start_IT+0x66>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003818:	b2db      	uxtb	r3, r3
 800381a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_TIM_IC_Start_IT+0x78>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e013      	b.n	8003854 <HAL_TIM_IC_Start_IT+0xa0>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d104      	bne.n	800383c <HAL_TIM_IC_Start_IT+0x88>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e00b      	b.n	8003854 <HAL_TIM_IC_Start_IT+0xa0>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d104      	bne.n	800384c <HAL_TIM_IC_Start_IT+0x98>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e003      	b.n	8003854 <HAL_TIM_IC_Start_IT+0xa0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003852:	b2db      	uxtb	r3, r3
 8003854:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800385c:	7b7b      	ldrb	r3, [r7, #13]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0dd      	b.n	8003a22 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <HAL_TIM_IC_Start_IT+0xc2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	e023      	b.n	80038be <HAL_TIM_IC_Start_IT+0x10a>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d104      	bne.n	8003886 <HAL_TIM_IC_Start_IT+0xd2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003884:	e01b      	b.n	80038be <HAL_TIM_IC_Start_IT+0x10a>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d104      	bne.n	8003896 <HAL_TIM_IC_Start_IT+0xe2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	e013      	b.n	80038be <HAL_TIM_IC_Start_IT+0x10a>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_IC_Start_IT+0xf2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038a4:	e00b      	b.n	80038be <HAL_TIM_IC_Start_IT+0x10a>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_IC_Start_IT+0x102>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	e003      	b.n	80038be <HAL_TIM_IC_Start_IT+0x10a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_IC_Start_IT+0x11a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_IC_Start_IT+0x142>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_IC_Start_IT+0x12a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_IC_Start_IT+0x142>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x13a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_IC_Start_IT+0x142>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d841      	bhi.n	8003980 <HAL_TIM_IC_Start_IT+0x1cc>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_TIM_IC_Start_IT+0x150>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003939 	.word	0x08003939
 8003908:	08003981 	.word	0x08003981
 800390c:	08003981 	.word	0x08003981
 8003910:	08003981 	.word	0x08003981
 8003914:	0800394b 	.word	0x0800394b
 8003918:	08003981 	.word	0x08003981
 800391c:	08003981 	.word	0x08003981
 8003920:	08003981 	.word	0x08003981
 8003924:	0800395d 	.word	0x0800395d
 8003928:	08003981 	.word	0x08003981
 800392c:	08003981 	.word	0x08003981
 8003930:	08003981 	.word	0x08003981
 8003934:	0800396f 	.word	0x0800396f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0202 	orr.w	r2, r2, #2
 8003946:	60da      	str	r2, [r3, #12]
      break;
 8003948:	e01d      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0204 	orr.w	r2, r2, #4
 8003958:	60da      	str	r2, [r3, #12]
      break;
 800395a:	e014      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0208 	orr.w	r2, r2, #8
 800396a:	60da      	str	r2, [r3, #12]
      break;
 800396c:	e00b      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0210 	orr.w	r2, r2, #16
 800397c:	60da      	str	r2, [r3, #12]
      break;
 800397e:	e002      	b.n	8003986 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	bf00      	nop
  }

  if (status == HAL_OK)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d149      	bne.n	8003a20 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f94d 	bl	8004c34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <HAL_TIM_IC_Start_IT+0x278>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d018      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_TIM_IC_Start_IT+0x27c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_TIM_IC_Start_IT+0x280>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_TIM_IC_Start_IT+0x284>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_TIM_IC_Start_IT+0x288>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_IC_Start_IT+0x22c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_TIM_IC_Start_IT+0x28c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d115      	bne.n	8003a0c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_TIM_IC_Start_IT+0x290>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d015      	beq.n	8003a1e <HAL_TIM_IC_Start_IT+0x26a>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d011      	beq.n	8003a1e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e008      	b.n	8003a1e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e000      	b.n	8003a20 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40013400 	.word	0x40013400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40015000 	.word	0x40015000
 8003a44:	00010007 	.word	0x00010007

08003a48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e088      	b.n	8003b78 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a84:	f000 ff18 	bl	80048b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 020c 	bic.w	r2, r2, #12
 8003a96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	619a      	str	r2, [r3, #24]
 8003aaa:	e060      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d11c      	bne.n	8003aec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003ac2:	f000 ff96 	bl	80049f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ad4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6999      	ldr	r1, [r3, #24]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	e040      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d11b      	bne.n	8003b2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b02:	f000 ffe3 	bl	8004acc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 020c 	bic.w	r2, r2, #12
 8003b14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]
 8003b28:	e021      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d11c      	bne.n	8003b6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b40:	f001 f800 	bl	8004b44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69d9      	ldr	r1, [r3, #28]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021a      	lsls	r2, r3, #8
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]
 8003b68:	e001      	b.n	8003b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e0ff      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b14      	cmp	r3, #20
 8003baa:	f200 80f0 	bhi.w	8003d8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003c09 	.word	0x08003c09
 8003bb8:	08003d8f 	.word	0x08003d8f
 8003bbc:	08003d8f 	.word	0x08003d8f
 8003bc0:	08003d8f 	.word	0x08003d8f
 8003bc4:	08003c49 	.word	0x08003c49
 8003bc8:	08003d8f 	.word	0x08003d8f
 8003bcc:	08003d8f 	.word	0x08003d8f
 8003bd0:	08003d8f 	.word	0x08003d8f
 8003bd4:	08003c8b 	.word	0x08003c8b
 8003bd8:	08003d8f 	.word	0x08003d8f
 8003bdc:	08003d8f 	.word	0x08003d8f
 8003be0:	08003d8f 	.word	0x08003d8f
 8003be4:	08003ccb 	.word	0x08003ccb
 8003be8:	08003d8f 	.word	0x08003d8f
 8003bec:	08003d8f 	.word	0x08003d8f
 8003bf0:	08003d8f 	.word	0x08003d8f
 8003bf4:	08003d0d 	.word	0x08003d0d
 8003bf8:	08003d8f 	.word	0x08003d8f
 8003bfc:	08003d8f 	.word	0x08003d8f
 8003c00:	08003d8f 	.word	0x08003d8f
 8003c04:	08003d4d 	.word	0x08003d4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fab8 	bl	8004184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0208 	orr.w	r2, r2, #8
 8003c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
      break;
 8003c46:	e0a5      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fb32 	bl	80042b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	021a      	lsls	r2, r3, #8
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	619a      	str	r2, [r3, #24]
      break;
 8003c88:	e084      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fba5 	bl	80043e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0208 	orr.w	r2, r2, #8
 8003ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0204 	bic.w	r2, r2, #4
 8003cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69d9      	ldr	r1, [r3, #28]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	61da      	str	r2, [r3, #28]
      break;
 8003cc8:	e064      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fc17 	bl	8004504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	021a      	lsls	r2, r3, #8
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	61da      	str	r2, [r3, #28]
      break;
 8003d0a:	e043      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fc66 	bl	80045e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d4a:	e023      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fcb0 	bl	80046b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d8c:	e002      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
      break;
 8003d92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0b6      	b.n	8003f32 <HAL_TIM_ConfigClockSource+0x18a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e00:	d03e      	beq.n	8003e80 <HAL_TIM_ConfigClockSource+0xd8>
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	f200 8087 	bhi.w	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	f000 8086 	beq.w	8003f1e <HAL_TIM_ConfigClockSource+0x176>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d87f      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e18:	2b70      	cmp	r3, #112	; 0x70
 8003e1a:	d01a      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0xaa>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d87b      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e20:	2b60      	cmp	r3, #96	; 0x60
 8003e22:	d050      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0x11e>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d877      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e28:	2b50      	cmp	r3, #80	; 0x50
 8003e2a:	d03c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xfe>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d873      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d058      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x13e>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d86f      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d064      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x15e>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d86b      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d060      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x15e>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d867      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05c      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x15e>
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d05a      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x15e>
 8003e50:	e062      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e62:	f000 fec7 	bl	8004bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	609a      	str	r2, [r3, #8]
      break;
 8003e7e:	e04f      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e90:	f000 feb0 	bl	8004bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea2:	609a      	str	r2, [r3, #8]
      break;
 8003ea4:	e03c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f000 fd6e 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2150      	movs	r1, #80	; 0x50
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fe7d 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e02c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 fdca 	bl	8004a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2160      	movs	r1, #96	; 0x60
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fe6d 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e01c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 fd4e 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fe5d 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8003f04:	e00c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f000 fe54 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8003f16:	e003      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e000      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e031      	b.n	8003fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fc13 	bl	8004790 <TIM_SlaveTimer_SetConfig>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e018      	b.n	8003fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fa2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d831      	bhi.n	8004038 <HAL_TIM_ReadCapturedValue+0x78>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004039 	.word	0x08004039
 8003fe4:	08004039 	.word	0x08004039
 8003fe8:	08004039 	.word	0x08004039
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	08004039 	.word	0x08004039
 8003ff4:	08004039 	.word	0x08004039
 8003ff8:	08004039 	.word	0x08004039
 8003ffc:	08004025 	.word	0x08004025
 8004000:	08004039 	.word	0x08004039
 8004004:	08004039 	.word	0x08004039
 8004008:	08004039 	.word	0x08004039
 800400c:	0800402f 	.word	0x0800402f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	60fb      	str	r3, [r7, #12]

      break;
 8004018:	e00f      	b.n	800403a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	60fb      	str	r3, [r7, #12]

      break;
 8004022:	e00a      	b.n	800403a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	60fb      	str	r3, [r7, #12]

      break;
 800402c:	e005      	b.n	800403a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	60fb      	str	r3, [r7, #12]

      break;
 8004036:	e000      	b.n	800403a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004038:	bf00      	nop
  }

  return tmpreg;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <TIM_Base_SetConfig+0x11c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004066:	d00f      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3f      	ldr	r2, [pc, #252]	; (8004168 <TIM_Base_SetConfig+0x120>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3e      	ldr	r2, [pc, #248]	; (800416c <TIM_Base_SetConfig+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3d      	ldr	r2, [pc, #244]	; (8004170 <TIM_Base_SetConfig+0x128>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <TIM_Base_SetConfig+0x12c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d108      	bne.n	800409a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a31      	ldr	r2, [pc, #196]	; (8004164 <TIM_Base_SetConfig+0x11c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01f      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d01b      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2e      	ldr	r2, [pc, #184]	; (8004168 <TIM_Base_SetConfig+0x120>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d017      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	; (800416c <TIM_Base_SetConfig+0x124>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <TIM_Base_SetConfig+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <TIM_Base_SetConfig+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2b      	ldr	r2, [pc, #172]	; (800417c <TIM_Base_SetConfig+0x134>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <TIM_Base_SetConfig+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a25      	ldr	r2, [pc, #148]	; (8004174 <TIM_Base_SetConfig+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <TIM_Base_SetConfig+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_Base_SetConfig+0x100>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <TIM_Base_SetConfig+0x128>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x100>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <TIM_Base_SetConfig+0x130>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x100>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <TIM_Base_SetConfig+0x134>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x100>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a11      	ldr	r2, [pc, #68]	; (8004180 <TIM_Base_SetConfig+0x138>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x100>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <TIM_Base_SetConfig+0x12c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40013400 	.word	0x40013400
 8004174:	40015000 	.word	0x40015000
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0302 	bic.w	r3, r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <TIM_OC1_SetConfig+0x11c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <TIM_OC1_SetConfig+0x88>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <TIM_OC1_SetConfig+0x120>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00f      	beq.n	800420c <TIM_OC1_SetConfig+0x88>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a2e      	ldr	r2, [pc, #184]	; (80042a8 <TIM_OC1_SetConfig+0x124>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00b      	beq.n	800420c <TIM_OC1_SetConfig+0x88>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <TIM_OC1_SetConfig+0x128>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_OC1_SetConfig+0x88>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <TIM_OC1_SetConfig+0x12c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC1_SetConfig+0x88>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2b      	ldr	r2, [pc, #172]	; (80042b4 <TIM_OC1_SetConfig+0x130>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10c      	bne.n	8004226 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0308 	bic.w	r3, r3, #8
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <TIM_OC1_SetConfig+0x11c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_OC1_SetConfig+0xd2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <TIM_OC1_SetConfig+0x120>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_OC1_SetConfig+0xd2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <TIM_OC1_SetConfig+0x124>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_OC1_SetConfig+0xd2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <TIM_OC1_SetConfig+0x128>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_OC1_SetConfig+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <TIM_OC1_SetConfig+0x12c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_OC1_SetConfig+0xd2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <TIM_OC1_SetConfig+0x130>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800
 80042b4:	40015000 	.word	0x40015000

080042b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0210 	bic.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <TIM_OC2_SetConfig+0x110>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_OC2_SetConfig+0x74>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <TIM_OC2_SetConfig+0x114>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC2_SetConfig+0x74>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_OC2_SetConfig+0x118>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10d      	bne.n	8004348 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <TIM_OC2_SetConfig+0x110>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <TIM_OC2_SetConfig+0xc0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <TIM_OC2_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_OC2_SetConfig+0xc0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <TIM_OC2_SetConfig+0x11c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC2_SetConfig+0xc0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <TIM_OC2_SetConfig+0x120>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC2_SetConfig+0xc0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <TIM_OC2_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC2_SetConfig+0xc0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <TIM_OC2_SetConfig+0x118>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d113      	bne.n	80043a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800437e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004386:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40013400 	.word	0x40013400
 80043d0:	40015000 	.word	0x40015000
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800

080043e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <TIM_OC3_SetConfig+0x10c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <TIM_OC3_SetConfig+0x72>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <TIM_OC3_SetConfig+0x110>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC3_SetConfig+0x72>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <TIM_OC3_SetConfig+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10d      	bne.n	800446e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <TIM_OC3_SetConfig+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_OC3_SetConfig+0xbe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <TIM_OC3_SetConfig+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_OC3_SetConfig+0xbe>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <TIM_OC3_SetConfig+0x118>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_OC3_SetConfig+0xbe>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <TIM_OC3_SetConfig+0x11c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_OC3_SetConfig+0xbe>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <TIM_OC3_SetConfig+0x120>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_OC3_SetConfig+0xbe>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <TIM_OC3_SetConfig+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d113      	bne.n	80044c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40015000 	.word	0x40015000
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800

08004504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	031b      	lsls	r3, r3, #12
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1a      	ldr	r2, [pc, #104]	; (80045cc <TIM_OC4_SetConfig+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <TIM_OC4_SetConfig+0x8c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <TIM_OC4_SetConfig+0xcc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00f      	beq.n	8004590 <TIM_OC4_SetConfig+0x8c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <TIM_OC4_SetConfig+0xd0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_OC4_SetConfig+0x8c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <TIM_OC4_SetConfig+0xd4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_OC4_SetConfig+0x8c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <TIM_OC4_SetConfig+0xd8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC4_SetConfig+0x8c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <TIM_OC4_SetConfig+0xdc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d109      	bne.n	80045a4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800
 80045e0:	40015000 	.word	0x40015000

080045e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004628:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <TIM_OC5_SetConfig+0xbc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_OC5_SetConfig+0x82>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <TIM_OC5_SetConfig+0xc0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_OC5_SetConfig+0x82>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <TIM_OC5_SetConfig+0xc4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_OC5_SetConfig+0x82>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a16      	ldr	r2, [pc, #88]	; (80046ac <TIM_OC5_SetConfig+0xc8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC5_SetConfig+0x82>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <TIM_OC5_SetConfig+0xcc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC5_SetConfig+0x82>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <TIM_OC5_SetConfig+0xd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d109      	bne.n	800467a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	621a      	str	r2, [r3, #32]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40015000 	.word	0x40015000

080046b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	051b      	lsls	r3, r3, #20
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <TIM_OC6_SetConfig+0xc0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <TIM_OC6_SetConfig+0x84>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a19      	ldr	r2, [pc, #100]	; (800477c <TIM_OC6_SetConfig+0xc4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00f      	beq.n	800473c <TIM_OC6_SetConfig+0x84>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <TIM_OC6_SetConfig+0xc8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00b      	beq.n	800473c <TIM_OC6_SetConfig+0x84>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a17      	ldr	r2, [pc, #92]	; (8004784 <TIM_OC6_SetConfig+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC6_SetConfig+0x84>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a16      	ldr	r2, [pc, #88]	; (8004788 <TIM_OC6_SetConfig+0xd0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC6_SetConfig+0x84>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <TIM_OC6_SetConfig+0xd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d109      	bne.n	8004750 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40013400 	.word	0x40013400
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800
 800478c:	40015000 	.word	0x40015000

08004790 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b70      	cmp	r3, #112	; 0x70
 80047dc:	d01a      	beq.n	8004814 <TIM_SlaveTimer_SetConfig+0x84>
 80047de:	2b70      	cmp	r3, #112	; 0x70
 80047e0:	d860      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 80047e2:	2b60      	cmp	r3, #96	; 0x60
 80047e4:	d054      	beq.n	8004890 <TIM_SlaveTimer_SetConfig+0x100>
 80047e6:	2b60      	cmp	r3, #96	; 0x60
 80047e8:	d85c      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 80047ea:	2b50      	cmp	r3, #80	; 0x50
 80047ec:	d046      	beq.n	800487c <TIM_SlaveTimer_SetConfig+0xec>
 80047ee:	2b50      	cmp	r3, #80	; 0x50
 80047f0:	d858      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d019      	beq.n	800482a <TIM_SlaveTimer_SetConfig+0x9a>
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d854      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d055      	beq.n	80048aa <TIM_SlaveTimer_SetConfig+0x11a>
 80047fe:	2b30      	cmp	r3, #48	; 0x30
 8004800:	d850      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 8004802:	2b20      	cmp	r3, #32
 8004804:	d051      	beq.n	80048aa <TIM_SlaveTimer_SetConfig+0x11a>
 8004806:	2b20      	cmp	r3, #32
 8004808:	d84c      	bhi.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04d      	beq.n	80048aa <TIM_SlaveTimer_SetConfig+0x11a>
 800480e:	2b10      	cmp	r3, #16
 8004810:	d04b      	beq.n	80048aa <TIM_SlaveTimer_SetConfig+0x11a>
 8004812:	e047      	b.n	80048a4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	f000 f9e6 	bl	8004bf4 <TIM_ETR_SetConfig>
      break;
 8004828:	e040      	b.n	80048ac <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b05      	cmp	r3, #5
 8004830:	d101      	bne.n	8004836 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e03b      	b.n	80048ae <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
      break;
 800487a:	e017      	b.n	80048ac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004888:	461a      	mov	r2, r3
 800488a:	f000 f883 	bl	8004994 <TIM_TI1_ConfigInputStage>
      break;
 800488e:	e00d      	b.n	80048ac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489c:	461a      	mov	r2, r3
 800489e:	f000 f8e5 	bl	8004a6c <TIM_TI2_ConfigInputStage>
      break;
 80048a2:	e003      	b.n	80048ac <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	75fb      	strb	r3, [r7, #23]
      break;
 80048a8:	e000      	b.n	80048ac <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80048aa:	bf00      	nop
  }

  return status;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_TI1_SetConfig+0xc4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d017      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d013      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <TIM_TI1_SetConfig+0xc8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00f      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a22      	ldr	r2, [pc, #136]	; (8004984 <TIM_TI1_SetConfig+0xcc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a21      	ldr	r2, [pc, #132]	; (8004988 <TIM_TI1_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a20      	ldr	r2, [pc, #128]	; (800498c <TIM_TI1_SetConfig+0xd4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_TI1_SetConfig+0x5e>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <TIM_TI1_SetConfig+0xd8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <TIM_TI1_SetConfig+0x62>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <TIM_TI1_SetConfig+0x64>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e003      	b.n	800493a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	b2db      	uxtb	r3, r3
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f023 030a 	bic.w	r3, r3, #10
 8004954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 030a 	and.w	r3, r3, #10
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40013400 	.word	0x40013400
 800498c:	40014000 	.word	0x40014000
 8004990:	40015000 	.word	0x40015000

08004994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 030a 	bic.w	r3, r3, #10
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	031b      	lsls	r3, r3, #12
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0210 	bic.w	r2, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	031b      	lsls	r3, r3, #12
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	031b      	lsls	r3, r3, #12
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	031b      	lsls	r3, r3, #12
 8004b9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f043 0307 	orr.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2201      	movs	r2, #1
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1a      	ldr	r2, [r3, #32]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	401a      	ands	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e06d      	b.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d009      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d004      	beq.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d14:	d018      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10c      	bne.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40015000 	.word	0x40015000
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40014000 	.word	0x40014000

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e040      	b.n	8004e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc f9ac 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	; 0x24
 8004dc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fbca 	bl	8005570 <UART_SetConfig>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e022      	b.n	8004e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fd92 	bl	8005918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fe19 	bl	8005a5c <UART_CheckIdleState>
 8004e2a:	4603      	mov	r3, r0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b08b      	sub	sp, #44	; 0x2c
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d147      	bne.n	8004eda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_UART_Transmit_IT+0x22>
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e040      	b.n	8004edc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8c:	d107      	bne.n	8004e9e <HAL_UART_Transmit_IT+0x6a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <HAL_UART_Transmit_IT+0xb4>)
 8004e9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e9c:	e002      	b.n	8004ea4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a12      	ldr	r2, [pc, #72]	; (8004eec <HAL_UART_Transmit_IT+0xb8>)
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	372c      	adds	r7, #44	; 0x2c
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	08005fb5 	.word	0x08005fb5
 8004eec:	08005efd 	.word	0x08005efd

08004ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d132      	bne.n	8004f6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_UART_Receive_IT+0x24>
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e02b      	b.n	8004f70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d018      	beq.n	8004f5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69f9      	ldr	r1, [r7, #28]
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	461a      	mov	r2, r3
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fe89 	bl	8005c7c <UART_Start_Receive_IT>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	e000      	b.n	8004f70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	; 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b0ba      	sub	sp, #232	; 0xe8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004fa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d115      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00f      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 82ab 	beq.w	800552c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
      }
      return;
 8004fde:	e2a5      	b.n	800552c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8117 	beq.w	8005218 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ffa:	4b85      	ldr	r3, [pc, #532]	; (8005210 <HAL_UART_IRQHandler+0x298>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 810a 	beq.w	8005218 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_UART_IRQHandler+0xbc>
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_UART_IRQHandler+0xec>
 8005040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2202      	movs	r2, #2
 8005052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_UART_IRQHandler+0x11c>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2204      	movs	r2, #4
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c6:	f043 0208 	orr.w	r2, r3, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d012      	beq.n	8005102 <HAL_UART_IRQHandler+0x18a>
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8211 	beq.w	8005530 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800511a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d005      	beq.n	800515a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005152:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04f      	beq.n	80051fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fe54 	bl	8005e08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d141      	bne.n	80051f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800519a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800519e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1d9      	bne.n	800516e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d013      	beq.n	80051ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <HAL_UART_IRQHandler+0x29c>)
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc fa42 	bl	8001658 <HAL_DMA_Abort_IT>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d017      	beq.n	800520a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051e4:	4610      	mov	r0, r2
 80051e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	e00f      	b.n	800520a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9aa 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	e00b      	b.n	800520a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f9a6 	bl	8005544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	e007      	b.n	800520a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f9a2 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005208:	e192      	b.n	8005530 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520a:	bf00      	nop
    return;
 800520c:	e190      	b.n	8005530 <HAL_UART_IRQHandler+0x5b8>
 800520e:	bf00      	nop
 8005210:	04000120 	.word	0x04000120
 8005214:	08005ed1 	.word	0x08005ed1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 814b 	bne.w	80054b8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8144 	beq.w	80054b8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 813d 	beq.w	80054b8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	f040 80b5 	bne.w	80053c0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005262:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8164 	beq.w	8005534 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005276:	429a      	cmp	r2, r3
 8005278:	f080 815c 	bcs.w	8005534 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2b20      	cmp	r3, #32
 800528e:	f000 8086 	beq.w	800539e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1da      	bne.n	8005292 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005300:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005304:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005308:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e1      	bne.n	80052dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800532a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800533c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800533e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005342:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800534a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005380:	65bb      	str	r3, [r7, #88]	; 0x58
 8005382:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e4      	bne.n	800535e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	4618      	mov	r0, r3
 800539a:	f7fc f924 	bl	80015e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8cd 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053be:	e0b9      	b.n	8005534 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80ab 	beq.w	8005538 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80053e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80a6 	beq.w	8005538 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
 8005410:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e4      	bne.n	80053ec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	623b      	str	r3, [r7, #32]
   return(result);
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005446:	633a      	str	r2, [r7, #48]	; 0x30
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e3      	bne.n	8005422 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60fb      	str	r3, [r7, #12]
   return(result);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	617b      	str	r3, [r7, #20]
   return(result);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e4      	bne.n	800546e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f851 	bl	8005558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b6:	e03f      	b.n	8005538 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00e      	beq.n	80054e2 <HAL_UART_IRQHandler+0x56a>
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 ff9c 	bl	8006418 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054e0:	e02d      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01c      	beq.n	800553c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
    }
    return;
 800550a:	e017      	b.n	800553c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d012      	beq.n	800553e <HAL_UART_IRQHandler+0x5c6>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00c      	beq.n	800553e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fda5 	bl	8006074 <UART_EndTransmit_IT>
    return;
 800552a:	e008      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
      return;
 800552c:	bf00      	nop
 800552e:	e006      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005530:	bf00      	nop
 8005532:	e004      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <HAL_UART_IRQHandler+0x5c6>
    return;
 800553c:	bf00      	nop
  }

}
 800553e:	37e8      	adds	r7, #232	; 0xe8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b92      	ldr	r3, [pc, #584]	; (80057e4 <UART_SetConfig+0x274>)
 800559c:	4013      	ands	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	6979      	ldr	r1, [r7, #20]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a80      	ldr	r2, [pc, #512]	; (80057e8 <UART_SetConfig+0x278>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d120      	bne.n	800562e <UART_SetConfig+0xbe>
 80055ec:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <UART_SetConfig+0x27c>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d817      	bhi.n	8005628 <UART_SetConfig+0xb8>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x90>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005611 	.word	0x08005611
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005623 	.word	0x08005623
 800560c:	08005617 	.word	0x08005617
 8005610:	2301      	movs	r3, #1
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e0b5      	b.n	8005782 <UART_SetConfig+0x212>
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e0b2      	b.n	8005782 <UART_SetConfig+0x212>
 800561c:	2304      	movs	r3, #4
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e0af      	b.n	8005782 <UART_SetConfig+0x212>
 8005622:	2308      	movs	r3, #8
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e0ac      	b.n	8005782 <UART_SetConfig+0x212>
 8005628:	2310      	movs	r3, #16
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e0a9      	b.n	8005782 <UART_SetConfig+0x212>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6f      	ldr	r2, [pc, #444]	; (80057f0 <UART_SetConfig+0x280>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d124      	bne.n	8005682 <UART_SetConfig+0x112>
 8005638:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <UART_SetConfig+0x27c>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005644:	d011      	beq.n	800566a <UART_SetConfig+0xfa>
 8005646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800564a:	d817      	bhi.n	800567c <UART_SetConfig+0x10c>
 800564c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005650:	d011      	beq.n	8005676 <UART_SetConfig+0x106>
 8005652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005656:	d811      	bhi.n	800567c <UART_SetConfig+0x10c>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <UART_SetConfig+0xf4>
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d006      	beq.n	8005670 <UART_SetConfig+0x100>
 8005662:	e00b      	b.n	800567c <UART_SetConfig+0x10c>
 8005664:	2300      	movs	r3, #0
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e08b      	b.n	8005782 <UART_SetConfig+0x212>
 800566a:	2302      	movs	r3, #2
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e088      	b.n	8005782 <UART_SetConfig+0x212>
 8005670:	2304      	movs	r3, #4
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e085      	b.n	8005782 <UART_SetConfig+0x212>
 8005676:	2308      	movs	r3, #8
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e082      	b.n	8005782 <UART_SetConfig+0x212>
 800567c:	2310      	movs	r3, #16
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e07f      	b.n	8005782 <UART_SetConfig+0x212>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <UART_SetConfig+0x284>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d124      	bne.n	80056d6 <UART_SetConfig+0x166>
 800568c:	4b57      	ldr	r3, [pc, #348]	; (80057ec <UART_SetConfig+0x27c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005694:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005698:	d011      	beq.n	80056be <UART_SetConfig+0x14e>
 800569a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800569e:	d817      	bhi.n	80056d0 <UART_SetConfig+0x160>
 80056a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a4:	d011      	beq.n	80056ca <UART_SetConfig+0x15a>
 80056a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056aa:	d811      	bhi.n	80056d0 <UART_SetConfig+0x160>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x148>
 80056b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056b4:	d006      	beq.n	80056c4 <UART_SetConfig+0x154>
 80056b6:	e00b      	b.n	80056d0 <UART_SetConfig+0x160>
 80056b8:	2300      	movs	r3, #0
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e061      	b.n	8005782 <UART_SetConfig+0x212>
 80056be:	2302      	movs	r3, #2
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e05e      	b.n	8005782 <UART_SetConfig+0x212>
 80056c4:	2304      	movs	r3, #4
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e05b      	b.n	8005782 <UART_SetConfig+0x212>
 80056ca:	2308      	movs	r3, #8
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e058      	b.n	8005782 <UART_SetConfig+0x212>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e055      	b.n	8005782 <UART_SetConfig+0x212>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a47      	ldr	r2, [pc, #284]	; (80057f8 <UART_SetConfig+0x288>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d124      	bne.n	800572a <UART_SetConfig+0x1ba>
 80056e0:	4b42      	ldr	r3, [pc, #264]	; (80057ec <UART_SetConfig+0x27c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80056e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056ec:	d011      	beq.n	8005712 <UART_SetConfig+0x1a2>
 80056ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056f2:	d817      	bhi.n	8005724 <UART_SetConfig+0x1b4>
 80056f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f8:	d011      	beq.n	800571e <UART_SetConfig+0x1ae>
 80056fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056fe:	d811      	bhi.n	8005724 <UART_SetConfig+0x1b4>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <UART_SetConfig+0x19c>
 8005704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005708:	d006      	beq.n	8005718 <UART_SetConfig+0x1a8>
 800570a:	e00b      	b.n	8005724 <UART_SetConfig+0x1b4>
 800570c:	2300      	movs	r3, #0
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e037      	b.n	8005782 <UART_SetConfig+0x212>
 8005712:	2302      	movs	r3, #2
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e034      	b.n	8005782 <UART_SetConfig+0x212>
 8005718:	2304      	movs	r3, #4
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e031      	b.n	8005782 <UART_SetConfig+0x212>
 800571e:	2308      	movs	r3, #8
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e02e      	b.n	8005782 <UART_SetConfig+0x212>
 8005724:	2310      	movs	r3, #16
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e02b      	b.n	8005782 <UART_SetConfig+0x212>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a33      	ldr	r2, [pc, #204]	; (80057fc <UART_SetConfig+0x28c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d124      	bne.n	800577e <UART_SetConfig+0x20e>
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <UART_SetConfig+0x27c>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800573c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005740:	d011      	beq.n	8005766 <UART_SetConfig+0x1f6>
 8005742:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005746:	d817      	bhi.n	8005778 <UART_SetConfig+0x208>
 8005748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800574c:	d011      	beq.n	8005772 <UART_SetConfig+0x202>
 800574e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005752:	d811      	bhi.n	8005778 <UART_SetConfig+0x208>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <UART_SetConfig+0x1f0>
 8005758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800575c:	d006      	beq.n	800576c <UART_SetConfig+0x1fc>
 800575e:	e00b      	b.n	8005778 <UART_SetConfig+0x208>
 8005760:	2300      	movs	r3, #0
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e00d      	b.n	8005782 <UART_SetConfig+0x212>
 8005766:	2302      	movs	r3, #2
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e00a      	b.n	8005782 <UART_SetConfig+0x212>
 800576c:	2304      	movs	r3, #4
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e007      	b.n	8005782 <UART_SetConfig+0x212>
 8005772:	2308      	movs	r3, #8
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e004      	b.n	8005782 <UART_SetConfig+0x212>
 8005778:	2310      	movs	r3, #16
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e001      	b.n	8005782 <UART_SetConfig+0x212>
 800577e:	2310      	movs	r3, #16
 8005780:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578a:	d16b      	bne.n	8005864 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d838      	bhi.n	8005804 <UART_SetConfig+0x294>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <UART_SetConfig+0x228>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057cd 	.word	0x080057cd
 80057a4:	08005805 	.word	0x08005805
 80057a8:	080057d3 	.word	0x080057d3
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005805 	.word	0x08005805
 80057b4:	08005805 	.word	0x08005805
 80057b8:	080057db 	.word	0x080057db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057bc:	f7fd fb72 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 80057c0:	61b8      	str	r0, [r7, #24]
        break;
 80057c2:	e024      	b.n	800580e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c4:	f7fd fb90 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 80057c8:	61b8      	str	r0, [r7, #24]
        break;
 80057ca:	e020      	b.n	800580e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <UART_SetConfig+0x290>)
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e01d      	b.n	800580e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d2:	f7fd faf1 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 80057d6:	61b8      	str	r0, [r7, #24]
        break;
 80057d8:	e019      	b.n	800580e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	61bb      	str	r3, [r7, #24]
        break;
 80057e0:	e015      	b.n	800580e <UART_SetConfig+0x29e>
 80057e2:	bf00      	nop
 80057e4:	efff69f3 	.word	0xefff69f3
 80057e8:	40013800 	.word	0x40013800
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40004400 	.word	0x40004400
 80057f4:	40004800 	.word	0x40004800
 80057f8:	40004c00 	.word	0x40004c00
 80057fc:	40005000 	.word	0x40005000
 8005800:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	77bb      	strb	r3, [r7, #30]
        break;
 800580c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d073      	beq.n	80058fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	005a      	lsls	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	441a      	add	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d916      	bls.n	800585e <UART_SetConfig+0x2ee>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005836:	d212      	bcs.n	800585e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f023 030f 	bic.w	r3, r3, #15
 8005840:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	b29a      	uxth	r2, r3
 800584e:	89fb      	ldrh	r3, [r7, #14]
 8005850:	4313      	orrs	r3, r2
 8005852:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	89fa      	ldrh	r2, [r7, #14]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e04e      	b.n	80058fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77bb      	strb	r3, [r7, #30]
 8005862:	e04b      	b.n	80058fc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005864:	7ffb      	ldrb	r3, [r7, #31]
 8005866:	2b08      	cmp	r3, #8
 8005868:	d827      	bhi.n	80058ba <UART_SetConfig+0x34a>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0x300>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005895 	.word	0x08005895
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058a5 	.word	0x080058a5
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058ab 	.word	0x080058ab
 8005884:	080058bb 	.word	0x080058bb
 8005888:	080058bb 	.word	0x080058bb
 800588c:	080058bb 	.word	0x080058bb
 8005890:	080058b3 	.word	0x080058b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fd fb06 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8005898:	61b8      	str	r0, [r7, #24]
        break;
 800589a:	e013      	b.n	80058c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800589c:	f7fd fb24 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 80058a0:	61b8      	str	r0, [r7, #24]
        break;
 80058a2:	e00f      	b.n	80058c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <UART_SetConfig+0x3a4>)
 80058a6:	61bb      	str	r3, [r7, #24]
        break;
 80058a8:	e00c      	b.n	80058c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058aa:	f7fd fa85 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 80058ae:	61b8      	str	r0, [r7, #24]
        break;
 80058b0:	e008      	b.n	80058c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	61bb      	str	r3, [r7, #24]
        break;
 80058b8:	e004      	b.n	80058c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	77bb      	strb	r3, [r7, #30]
        break;
 80058c2:	bf00      	nop
    }

    if (pclk != 0U)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d018      	beq.n	80058fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	085a      	lsrs	r2, r3, #1
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	441a      	add	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d909      	bls.n	80058f8 <UART_SetConfig+0x388>
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ea:	d205      	bcs.n	80058f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	e001      	b.n	80058fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005908:	7fbb      	ldrb	r3, [r7, #30]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	007a1200 	.word	0x007a1200

08005918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a16:	d10a      	bne.n	8005a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b098      	sub	sp, #96	; 0x60
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a6c:	f7fb fc9e 	bl	80013ac <HAL_GetTick>
 8005a70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d12e      	bne.n	8005ade <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f88c 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d021      	beq.n	8005ade <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aae:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e062      	b.n	8005ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d149      	bne.n	8005b80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f856 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d03c      	beq.n	8005b80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	623b      	str	r3, [r7, #32]
   return(result);
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30
 8005b26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b58:	61fa      	str	r2, [r7, #28]
 8005b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	617b      	str	r3, [r7, #20]
   return(result);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e011      	b.n	8005ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3758      	adds	r7, #88	; 0x58
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbc:	e049      	b.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d045      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fb fbf1 	bl	80013ac <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e048      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d031      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d110      	bne.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f8ff 	bl	8005e08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e029      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d111      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f8e5 	bl	8005e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e00f      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	bf0c      	ite	eq
 8005c62:	2301      	moveq	r3, #1
 8005c64:	2300      	movne	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d0a6      	beq.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b097      	sub	sp, #92	; 0x5c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d10e      	bne.n	8005cce <UART_Start_Receive_IT+0x52>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <UART_Start_Receive_IT+0x48>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cc2:	e02d      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ccc:	e028      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <UART_Start_Receive_IT+0x76>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <UART_Start_Receive_IT+0x6c>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	22ff      	movs	r2, #255	; 0xff
 8005ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ce6:	e01b      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	227f      	movs	r2, #127	; 0x7f
 8005cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf0:	e016      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfa:	d10d      	bne.n	8005d18 <UART_Start_Receive_IT+0x9c>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <UART_Start_Receive_IT+0x92>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	227f      	movs	r2, #127	; 0x7f
 8005d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d0c:	e008      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	223f      	movs	r2, #63	; 0x3f
 8005d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d16:	e003      	b.n	8005d20 <UART_Start_Receive_IT+0xa4>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	657b      	str	r3, [r7, #84]	; 0x54
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d50:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6c:	d107      	bne.n	8005d7e <UART_Start_Receive_IT+0x102>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <UART_Start_Receive_IT+0x184>)
 8005d7a:	669a      	str	r2, [r3, #104]	; 0x68
 8005d7c:	e002      	b.n	8005d84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <UART_Start_Receive_IT+0x188>)
 8005d82:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d019      	beq.n	8005dc0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_Start_Receive_IT+0x110>
 8005dbe:	e018      	b.n	8005df2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f043 0320 	orr.w	r3, r3, #32
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69f9      	ldr	r1, [r7, #28]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	375c      	adds	r7, #92	; 0x5c
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	08006271 	.word	0x08006271
 8005e04:	080060c9 	.word	0x080060c9

08005e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b095      	sub	sp, #84	; 0x54
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e5      	bne.n	8005e42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d118      	bne.n	8005eb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0310 	bic.w	r3, r3, #16
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e6      	bne.n	8005e7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ec4:	bf00      	nop
 8005ec6:	3754      	adds	r7, #84	; 0x54
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff fb28 	bl	8005544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b08f      	sub	sp, #60	; 0x3c
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f08:	2b21      	cmp	r3, #33	; 0x21
 8005f0a:	d14d      	bne.n	8005fa8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d132      	bne.n	8005f7e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e6      	bne.n	8005f18 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005f7c:	e014      	b.n	8005fa8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005fa8:	bf00      	nop
 8005faa:	373c      	adds	r7, #60	; 0x3c
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b091      	sub	sp, #68	; 0x44
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc0:	2b21      	cmp	r3, #33	; 0x21
 8005fc2:	d151      	bne.n	8006068 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d132      	bne.n	8006036 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	617b      	str	r3, [r7, #20]
   return(result);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006034:	e018      	b.n	8006068 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	881a      	ldrh	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006048:	b292      	uxth	r2, r2
 800604a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006050:	1c9a      	adds	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006068:	bf00      	nop
 800606a:	3744      	adds	r7, #68	; 0x44
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	60bb      	str	r3, [r7, #8]
   return(result);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	613b      	str	r3, [r7, #16]
   return(result);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e6      	bne.n	800607c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fa fc62 	bl	8000984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c0:	bf00      	nop
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b09c      	sub	sp, #112	; 0x70
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e0:	2b22      	cmp	r3, #34	; 0x22
 80060e2:	f040 80b9 	bne.w	8006258 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80060f4:	b2d9      	uxtb	r1, r3
 80060f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	400a      	ands	r2, r1
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 809c 	bne.w	8006268 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800613e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006144:	66bb      	str	r3, [r7, #104]	; 0x68
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800614e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006150:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800615c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e6      	bne.n	8006130 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	667b      	str	r3, [r7, #100]	; 0x64
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006182:	647a      	str	r2, [r7, #68]	; 0x44
 8006184:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d018      	beq.n	80061ea <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	623b      	str	r3, [r7, #32]
   return(result);
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061cc:	663b      	str	r3, [r7, #96]	; 0x60
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
 80061d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d12e      	bne.n	8006250 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	60fb      	str	r3, [r7, #12]
   return(result);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f023 0310 	bic.w	r3, r3, #16
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	617b      	str	r3, [r7, #20]
   return(result);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e6      	bne.n	80061f8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b10      	cmp	r3, #16
 8006236:	d103      	bne.n	8006240 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2210      	movs	r2, #16
 800623e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff f985 	bl	8005558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800624e:	e00b      	b.n	8006268 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fa fbcb 	bl	80009ec <HAL_UART_RxCpltCallback>
}
 8006256:	e007      	b.n	8006268 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0208 	orr.w	r2, r2, #8
 8006266:	619a      	str	r2, [r3, #24]
}
 8006268:	bf00      	nop
 800626a:	3770      	adds	r7, #112	; 0x70
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b09c      	sub	sp, #112	; 0x70
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800627e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006288:	2b22      	cmp	r3, #34	; 0x22
 800628a:	f040 80b9 	bne.w	8006400 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006294:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800629e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80062a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062a6:	4013      	ands	r3, r2
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	1c9a      	adds	r2, r3, #2
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 809c 	bne.w	8006410 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ec:	667b      	str	r3, [r7, #100]	; 0x64
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f6:	657b      	str	r3, [r7, #84]	; 0x54
 80062f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e6      	bne.n	80062d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	663b      	str	r3, [r7, #96]	; 0x60
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800632a:	643a      	str	r2, [r7, #64]	; 0x40
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d018      	beq.n	8006392 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	61fb      	str	r3, [r7, #28]
   return(result);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006380:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	2b01      	cmp	r3, #1
 8006398:	d12e      	bne.n	80063f8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 0310 	bic.w	r3, r3, #16
 80063b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6979      	ldr	r1, [r7, #20]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	613b      	str	r3, [r7, #16]
   return(result);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e6      	bne.n	80063a0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d103      	bne.n	80063e8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2210      	movs	r2, #16
 80063e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff f8b1 	bl	8005558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063f6:	e00b      	b.n	8006410 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa faf7 	bl	80009ec <HAL_UART_RxCpltCallback>
}
 80063fe:	e007      	b.n	8006410 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0208 	orr.w	r2, r2, #8
 800640e:	619a      	str	r2, [r3, #24]
}
 8006410:	bf00      	nop
 8006412:	3770      	adds	r7, #112	; 0x70
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <atoi>:
 800642c:	220a      	movs	r2, #10
 800642e:	2100      	movs	r1, #0
 8006430:	f000 b882 	b.w	8006538 <strtol>

08006434 <_strtol_l.constprop.0>:
 8006434:	2b01      	cmp	r3, #1
 8006436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643a:	d001      	beq.n	8006440 <_strtol_l.constprop.0+0xc>
 800643c:	2b24      	cmp	r3, #36	; 0x24
 800643e:	d906      	bls.n	800644e <_strtol_l.constprop.0+0x1a>
 8006440:	f000 f8de 	bl	8006600 <__errno>
 8006444:	2316      	movs	r3, #22
 8006446:	6003      	str	r3, [r0, #0]
 8006448:	2000      	movs	r0, #0
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006534 <_strtol_l.constprop.0+0x100>
 8006452:	460d      	mov	r5, r1
 8006454:	462e      	mov	r6, r5
 8006456:	f815 4b01 	ldrb.w	r4, [r5], #1
 800645a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800645e:	f017 0708 	ands.w	r7, r7, #8
 8006462:	d1f7      	bne.n	8006454 <_strtol_l.constprop.0+0x20>
 8006464:	2c2d      	cmp	r4, #45	; 0x2d
 8006466:	d132      	bne.n	80064ce <_strtol_l.constprop.0+0x9a>
 8006468:	782c      	ldrb	r4, [r5, #0]
 800646a:	2701      	movs	r7, #1
 800646c:	1cb5      	adds	r5, r6, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d05b      	beq.n	800652a <_strtol_l.constprop.0+0xf6>
 8006472:	2b10      	cmp	r3, #16
 8006474:	d109      	bne.n	800648a <_strtol_l.constprop.0+0x56>
 8006476:	2c30      	cmp	r4, #48	; 0x30
 8006478:	d107      	bne.n	800648a <_strtol_l.constprop.0+0x56>
 800647a:	782c      	ldrb	r4, [r5, #0]
 800647c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006480:	2c58      	cmp	r4, #88	; 0x58
 8006482:	d14d      	bne.n	8006520 <_strtol_l.constprop.0+0xec>
 8006484:	786c      	ldrb	r4, [r5, #1]
 8006486:	2310      	movs	r3, #16
 8006488:	3502      	adds	r5, #2
 800648a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800648e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006492:	f04f 0e00 	mov.w	lr, #0
 8006496:	fbb8 f9f3 	udiv	r9, r8, r3
 800649a:	4676      	mov	r6, lr
 800649c:	fb03 8a19 	mls	sl, r3, r9, r8
 80064a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80064a4:	f1bc 0f09 	cmp.w	ip, #9
 80064a8:	d816      	bhi.n	80064d8 <_strtol_l.constprop.0+0xa4>
 80064aa:	4664      	mov	r4, ip
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	dd24      	ble.n	80064fa <_strtol_l.constprop.0+0xc6>
 80064b0:	f1be 3fff 	cmp.w	lr, #4294967295
 80064b4:	d008      	beq.n	80064c8 <_strtol_l.constprop.0+0x94>
 80064b6:	45b1      	cmp	r9, r6
 80064b8:	d31c      	bcc.n	80064f4 <_strtol_l.constprop.0+0xc0>
 80064ba:	d101      	bne.n	80064c0 <_strtol_l.constprop.0+0x8c>
 80064bc:	45a2      	cmp	sl, r4
 80064be:	db19      	blt.n	80064f4 <_strtol_l.constprop.0+0xc0>
 80064c0:	fb06 4603 	mla	r6, r6, r3, r4
 80064c4:	f04f 0e01 	mov.w	lr, #1
 80064c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064cc:	e7e8      	b.n	80064a0 <_strtol_l.constprop.0+0x6c>
 80064ce:	2c2b      	cmp	r4, #43	; 0x2b
 80064d0:	bf04      	itt	eq
 80064d2:	782c      	ldrbeq	r4, [r5, #0]
 80064d4:	1cb5      	addeq	r5, r6, #2
 80064d6:	e7ca      	b.n	800646e <_strtol_l.constprop.0+0x3a>
 80064d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064dc:	f1bc 0f19 	cmp.w	ip, #25
 80064e0:	d801      	bhi.n	80064e6 <_strtol_l.constprop.0+0xb2>
 80064e2:	3c37      	subs	r4, #55	; 0x37
 80064e4:	e7e2      	b.n	80064ac <_strtol_l.constprop.0+0x78>
 80064e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064ea:	f1bc 0f19 	cmp.w	ip, #25
 80064ee:	d804      	bhi.n	80064fa <_strtol_l.constprop.0+0xc6>
 80064f0:	3c57      	subs	r4, #87	; 0x57
 80064f2:	e7db      	b.n	80064ac <_strtol_l.constprop.0+0x78>
 80064f4:	f04f 3eff 	mov.w	lr, #4294967295
 80064f8:	e7e6      	b.n	80064c8 <_strtol_l.constprop.0+0x94>
 80064fa:	f1be 3fff 	cmp.w	lr, #4294967295
 80064fe:	d105      	bne.n	800650c <_strtol_l.constprop.0+0xd8>
 8006500:	2322      	movs	r3, #34	; 0x22
 8006502:	6003      	str	r3, [r0, #0]
 8006504:	4646      	mov	r6, r8
 8006506:	b942      	cbnz	r2, 800651a <_strtol_l.constprop.0+0xe6>
 8006508:	4630      	mov	r0, r6
 800650a:	e79e      	b.n	800644a <_strtol_l.constprop.0+0x16>
 800650c:	b107      	cbz	r7, 8006510 <_strtol_l.constprop.0+0xdc>
 800650e:	4276      	negs	r6, r6
 8006510:	2a00      	cmp	r2, #0
 8006512:	d0f9      	beq.n	8006508 <_strtol_l.constprop.0+0xd4>
 8006514:	f1be 0f00 	cmp.w	lr, #0
 8006518:	d000      	beq.n	800651c <_strtol_l.constprop.0+0xe8>
 800651a:	1e69      	subs	r1, r5, #1
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	e7f3      	b.n	8006508 <_strtol_l.constprop.0+0xd4>
 8006520:	2430      	movs	r4, #48	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1b1      	bne.n	800648a <_strtol_l.constprop.0+0x56>
 8006526:	2308      	movs	r3, #8
 8006528:	e7af      	b.n	800648a <_strtol_l.constprop.0+0x56>
 800652a:	2c30      	cmp	r4, #48	; 0x30
 800652c:	d0a5      	beq.n	800647a <_strtol_l.constprop.0+0x46>
 800652e:	230a      	movs	r3, #10
 8006530:	e7ab      	b.n	800648a <_strtol_l.constprop.0+0x56>
 8006532:	bf00      	nop
 8006534:	08006f79 	.word	0x08006f79

08006538 <strtol>:
 8006538:	4613      	mov	r3, r2
 800653a:	460a      	mov	r2, r1
 800653c:	4601      	mov	r1, r0
 800653e:	4802      	ldr	r0, [pc, #8]	; (8006548 <strtol+0x10>)
 8006540:	6800      	ldr	r0, [r0, #0]
 8006542:	f7ff bf77 	b.w	8006434 <_strtol_l.constprop.0>
 8006546:	bf00      	nop
 8006548:	2000007c 	.word	0x2000007c

0800654c <siprintf>:
 800654c:	b40e      	push	{r1, r2, r3}
 800654e:	b500      	push	{lr}
 8006550:	b09c      	sub	sp, #112	; 0x70
 8006552:	ab1d      	add	r3, sp, #116	; 0x74
 8006554:	9002      	str	r0, [sp, #8]
 8006556:	9006      	str	r0, [sp, #24]
 8006558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800655c:	4809      	ldr	r0, [pc, #36]	; (8006584 <siprintf+0x38>)
 800655e:	9107      	str	r1, [sp, #28]
 8006560:	9104      	str	r1, [sp, #16]
 8006562:	4909      	ldr	r1, [pc, #36]	; (8006588 <siprintf+0x3c>)
 8006564:	f853 2b04 	ldr.w	r2, [r3], #4
 8006568:	9105      	str	r1, [sp, #20]
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	a902      	add	r1, sp, #8
 8006570:	f000 f9d2 	bl	8006918 <_svfiprintf_r>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	b01c      	add	sp, #112	; 0x70
 800657c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006580:	b003      	add	sp, #12
 8006582:	4770      	bx	lr
 8006584:	2000007c 	.word	0x2000007c
 8006588:	ffff0208 	.word	0xffff0208

0800658c <_vsiprintf_r>:
 800658c:	b500      	push	{lr}
 800658e:	b09b      	sub	sp, #108	; 0x6c
 8006590:	9100      	str	r1, [sp, #0]
 8006592:	9104      	str	r1, [sp, #16]
 8006594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006598:	9105      	str	r1, [sp, #20]
 800659a:	9102      	str	r1, [sp, #8]
 800659c:	4905      	ldr	r1, [pc, #20]	; (80065b4 <_vsiprintf_r+0x28>)
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	4669      	mov	r1, sp
 80065a2:	f000 f9b9 	bl	8006918 <_svfiprintf_r>
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	b01b      	add	sp, #108	; 0x6c
 80065ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80065b2:	bf00      	nop
 80065b4:	ffff0208 	.word	0xffff0208

080065b8 <vsiprintf>:
 80065b8:	4613      	mov	r3, r2
 80065ba:	460a      	mov	r2, r1
 80065bc:	4601      	mov	r1, r0
 80065be:	4802      	ldr	r0, [pc, #8]	; (80065c8 <vsiprintf+0x10>)
 80065c0:	6800      	ldr	r0, [r0, #0]
 80065c2:	f7ff bfe3 	b.w	800658c <_vsiprintf_r>
 80065c6:	bf00      	nop
 80065c8:	2000007c 	.word	0x2000007c

080065cc <memset>:
 80065cc:	4402      	add	r2, r0
 80065ce:	4603      	mov	r3, r0
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d100      	bne.n	80065d6 <memset+0xa>
 80065d4:	4770      	bx	lr
 80065d6:	f803 1b01 	strb.w	r1, [r3], #1
 80065da:	e7f9      	b.n	80065d0 <memset+0x4>

080065dc <strncmp>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	b16a      	cbz	r2, 80065fc <strncmp+0x20>
 80065e0:	3901      	subs	r1, #1
 80065e2:	1884      	adds	r4, r0, r2
 80065e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d103      	bne.n	80065f8 <strncmp+0x1c>
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d001      	beq.n	80065f8 <strncmp+0x1c>
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d1f5      	bne.n	80065e4 <strncmp+0x8>
 80065f8:	1ad0      	subs	r0, r2, r3
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	4610      	mov	r0, r2
 80065fe:	e7fc      	b.n	80065fa <strncmp+0x1e>

08006600 <__errno>:
 8006600:	4b01      	ldr	r3, [pc, #4]	; (8006608 <__errno+0x8>)
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	2000007c 	.word	0x2000007c

0800660c <__libc_init_array>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4d0d      	ldr	r5, [pc, #52]	; (8006644 <__libc_init_array+0x38>)
 8006610:	4c0d      	ldr	r4, [pc, #52]	; (8006648 <__libc_init_array+0x3c>)
 8006612:	1b64      	subs	r4, r4, r5
 8006614:	10a4      	asrs	r4, r4, #2
 8006616:	2600      	movs	r6, #0
 8006618:	42a6      	cmp	r6, r4
 800661a:	d109      	bne.n	8006630 <__libc_init_array+0x24>
 800661c:	4d0b      	ldr	r5, [pc, #44]	; (800664c <__libc_init_array+0x40>)
 800661e:	4c0c      	ldr	r4, [pc, #48]	; (8006650 <__libc_init_array+0x44>)
 8006620:	f000 fc6a 	bl	8006ef8 <_init>
 8006624:	1b64      	subs	r4, r4, r5
 8006626:	10a4      	asrs	r4, r4, #2
 8006628:	2600      	movs	r6, #0
 800662a:	42a6      	cmp	r6, r4
 800662c:	d105      	bne.n	800663a <__libc_init_array+0x2e>
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	f855 3b04 	ldr.w	r3, [r5], #4
 8006634:	4798      	blx	r3
 8006636:	3601      	adds	r6, #1
 8006638:	e7ee      	b.n	8006618 <__libc_init_array+0xc>
 800663a:	f855 3b04 	ldr.w	r3, [r5], #4
 800663e:	4798      	blx	r3
 8006640:	3601      	adds	r6, #1
 8006642:	e7f2      	b.n	800662a <__libc_init_array+0x1e>
 8006644:	080070ac 	.word	0x080070ac
 8006648:	080070ac 	.word	0x080070ac
 800664c:	080070ac 	.word	0x080070ac
 8006650:	080070b0 	.word	0x080070b0

08006654 <__retarget_lock_acquire_recursive>:
 8006654:	4770      	bx	lr

08006656 <__retarget_lock_release_recursive>:
 8006656:	4770      	bx	lr

08006658 <memcpy>:
 8006658:	440a      	add	r2, r1
 800665a:	4291      	cmp	r1, r2
 800665c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006660:	d100      	bne.n	8006664 <memcpy+0xc>
 8006662:	4770      	bx	lr
 8006664:	b510      	push	{r4, lr}
 8006666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800666a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666e:	4291      	cmp	r1, r2
 8006670:	d1f9      	bne.n	8006666 <memcpy+0xe>
 8006672:	bd10      	pop	{r4, pc}

08006674 <_free_r>:
 8006674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006676:	2900      	cmp	r1, #0
 8006678:	d044      	beq.n	8006704 <_free_r+0x90>
 800667a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800667e:	9001      	str	r0, [sp, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f1a1 0404 	sub.w	r4, r1, #4
 8006686:	bfb8      	it	lt
 8006688:	18e4      	addlt	r4, r4, r3
 800668a:	f000 f8df 	bl	800684c <__malloc_lock>
 800668e:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <_free_r+0x94>)
 8006690:	9801      	ldr	r0, [sp, #4]
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	b933      	cbnz	r3, 80066a4 <_free_r+0x30>
 8006696:	6063      	str	r3, [r4, #4]
 8006698:	6014      	str	r4, [r2, #0]
 800669a:	b003      	add	sp, #12
 800669c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066a0:	f000 b8da 	b.w	8006858 <__malloc_unlock>
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	d908      	bls.n	80066ba <_free_r+0x46>
 80066a8:	6825      	ldr	r5, [r4, #0]
 80066aa:	1961      	adds	r1, r4, r5
 80066ac:	428b      	cmp	r3, r1
 80066ae:	bf01      	itttt	eq
 80066b0:	6819      	ldreq	r1, [r3, #0]
 80066b2:	685b      	ldreq	r3, [r3, #4]
 80066b4:	1949      	addeq	r1, r1, r5
 80066b6:	6021      	streq	r1, [r4, #0]
 80066b8:	e7ed      	b.n	8006696 <_free_r+0x22>
 80066ba:	461a      	mov	r2, r3
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b10b      	cbz	r3, 80066c4 <_free_r+0x50>
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	d9fa      	bls.n	80066ba <_free_r+0x46>
 80066c4:	6811      	ldr	r1, [r2, #0]
 80066c6:	1855      	adds	r5, r2, r1
 80066c8:	42a5      	cmp	r5, r4
 80066ca:	d10b      	bne.n	80066e4 <_free_r+0x70>
 80066cc:	6824      	ldr	r4, [r4, #0]
 80066ce:	4421      	add	r1, r4
 80066d0:	1854      	adds	r4, r2, r1
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	d1e0      	bne.n	800669a <_free_r+0x26>
 80066d8:	681c      	ldr	r4, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	6053      	str	r3, [r2, #4]
 80066de:	440c      	add	r4, r1
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	e7da      	b.n	800669a <_free_r+0x26>
 80066e4:	d902      	bls.n	80066ec <_free_r+0x78>
 80066e6:	230c      	movs	r3, #12
 80066e8:	6003      	str	r3, [r0, #0]
 80066ea:	e7d6      	b.n	800669a <_free_r+0x26>
 80066ec:	6825      	ldr	r5, [r4, #0]
 80066ee:	1961      	adds	r1, r4, r5
 80066f0:	428b      	cmp	r3, r1
 80066f2:	bf04      	itt	eq
 80066f4:	6819      	ldreq	r1, [r3, #0]
 80066f6:	685b      	ldreq	r3, [r3, #4]
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	bf04      	itt	eq
 80066fc:	1949      	addeq	r1, r1, r5
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	6054      	str	r4, [r2, #4]
 8006702:	e7ca      	b.n	800669a <_free_r+0x26>
 8006704:	b003      	add	sp, #12
 8006706:	bd30      	pop	{r4, r5, pc}
 8006708:	20000a38 	.word	0x20000a38

0800670c <sbrk_aligned>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4e0e      	ldr	r6, [pc, #56]	; (8006748 <sbrk_aligned+0x3c>)
 8006710:	460c      	mov	r4, r1
 8006712:	6831      	ldr	r1, [r6, #0]
 8006714:	4605      	mov	r5, r0
 8006716:	b911      	cbnz	r1, 800671e <sbrk_aligned+0x12>
 8006718:	f000 fba6 	bl	8006e68 <_sbrk_r>
 800671c:	6030      	str	r0, [r6, #0]
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fba1 	bl	8006e68 <_sbrk_r>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d00a      	beq.n	8006740 <sbrk_aligned+0x34>
 800672a:	1cc4      	adds	r4, r0, #3
 800672c:	f024 0403 	bic.w	r4, r4, #3
 8006730:	42a0      	cmp	r0, r4
 8006732:	d007      	beq.n	8006744 <sbrk_aligned+0x38>
 8006734:	1a21      	subs	r1, r4, r0
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fb96 	bl	8006e68 <_sbrk_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d101      	bne.n	8006744 <sbrk_aligned+0x38>
 8006740:	f04f 34ff 	mov.w	r4, #4294967295
 8006744:	4620      	mov	r0, r4
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	20000a3c 	.word	0x20000a3c

0800674c <_malloc_r>:
 800674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006750:	1ccd      	adds	r5, r1, #3
 8006752:	f025 0503 	bic.w	r5, r5, #3
 8006756:	3508      	adds	r5, #8
 8006758:	2d0c      	cmp	r5, #12
 800675a:	bf38      	it	cc
 800675c:	250c      	movcc	r5, #12
 800675e:	2d00      	cmp	r5, #0
 8006760:	4607      	mov	r7, r0
 8006762:	db01      	blt.n	8006768 <_malloc_r+0x1c>
 8006764:	42a9      	cmp	r1, r5
 8006766:	d905      	bls.n	8006774 <_malloc_r+0x28>
 8006768:	230c      	movs	r3, #12
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	2600      	movs	r6, #0
 800676e:	4630      	mov	r0, r6
 8006770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006774:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006848 <_malloc_r+0xfc>
 8006778:	f000 f868 	bl	800684c <__malloc_lock>
 800677c:	f8d8 3000 	ldr.w	r3, [r8]
 8006780:	461c      	mov	r4, r3
 8006782:	bb5c      	cbnz	r4, 80067dc <_malloc_r+0x90>
 8006784:	4629      	mov	r1, r5
 8006786:	4638      	mov	r0, r7
 8006788:	f7ff ffc0 	bl	800670c <sbrk_aligned>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	4604      	mov	r4, r0
 8006790:	d155      	bne.n	800683e <_malloc_r+0xf2>
 8006792:	f8d8 4000 	ldr.w	r4, [r8]
 8006796:	4626      	mov	r6, r4
 8006798:	2e00      	cmp	r6, #0
 800679a:	d145      	bne.n	8006828 <_malloc_r+0xdc>
 800679c:	2c00      	cmp	r4, #0
 800679e:	d048      	beq.n	8006832 <_malloc_r+0xe6>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	4631      	mov	r1, r6
 80067a4:	4638      	mov	r0, r7
 80067a6:	eb04 0903 	add.w	r9, r4, r3
 80067aa:	f000 fb5d 	bl	8006e68 <_sbrk_r>
 80067ae:	4581      	cmp	r9, r0
 80067b0:	d13f      	bne.n	8006832 <_malloc_r+0xe6>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	1a6d      	subs	r5, r5, r1
 80067b6:	4629      	mov	r1, r5
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff ffa7 	bl	800670c <sbrk_aligned>
 80067be:	3001      	adds	r0, #1
 80067c0:	d037      	beq.n	8006832 <_malloc_r+0xe6>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	442b      	add	r3, r5
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	f8d8 3000 	ldr.w	r3, [r8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d038      	beq.n	8006842 <_malloc_r+0xf6>
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	42a2      	cmp	r2, r4
 80067d4:	d12b      	bne.n	800682e <_malloc_r+0xe2>
 80067d6:	2200      	movs	r2, #0
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e00f      	b.n	80067fc <_malloc_r+0xb0>
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	1b52      	subs	r2, r2, r5
 80067e0:	d41f      	bmi.n	8006822 <_malloc_r+0xd6>
 80067e2:	2a0b      	cmp	r2, #11
 80067e4:	d917      	bls.n	8006816 <_malloc_r+0xca>
 80067e6:	1961      	adds	r1, r4, r5
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	6025      	str	r5, [r4, #0]
 80067ec:	bf18      	it	ne
 80067ee:	6059      	strne	r1, [r3, #4]
 80067f0:	6863      	ldr	r3, [r4, #4]
 80067f2:	bf08      	it	eq
 80067f4:	f8c8 1000 	streq.w	r1, [r8]
 80067f8:	5162      	str	r2, [r4, r5]
 80067fa:	604b      	str	r3, [r1, #4]
 80067fc:	4638      	mov	r0, r7
 80067fe:	f104 060b 	add.w	r6, r4, #11
 8006802:	f000 f829 	bl	8006858 <__malloc_unlock>
 8006806:	f026 0607 	bic.w	r6, r6, #7
 800680a:	1d23      	adds	r3, r4, #4
 800680c:	1af2      	subs	r2, r6, r3
 800680e:	d0ae      	beq.n	800676e <_malloc_r+0x22>
 8006810:	1b9b      	subs	r3, r3, r6
 8006812:	50a3      	str	r3, [r4, r2]
 8006814:	e7ab      	b.n	800676e <_malloc_r+0x22>
 8006816:	42a3      	cmp	r3, r4
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	d1dd      	bne.n	80067d8 <_malloc_r+0x8c>
 800681c:	f8c8 2000 	str.w	r2, [r8]
 8006820:	e7ec      	b.n	80067fc <_malloc_r+0xb0>
 8006822:	4623      	mov	r3, r4
 8006824:	6864      	ldr	r4, [r4, #4]
 8006826:	e7ac      	b.n	8006782 <_malloc_r+0x36>
 8006828:	4634      	mov	r4, r6
 800682a:	6876      	ldr	r6, [r6, #4]
 800682c:	e7b4      	b.n	8006798 <_malloc_r+0x4c>
 800682e:	4613      	mov	r3, r2
 8006830:	e7cc      	b.n	80067cc <_malloc_r+0x80>
 8006832:	230c      	movs	r3, #12
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4638      	mov	r0, r7
 8006838:	f000 f80e 	bl	8006858 <__malloc_unlock>
 800683c:	e797      	b.n	800676e <_malloc_r+0x22>
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	e7dc      	b.n	80067fc <_malloc_r+0xb0>
 8006842:	605b      	str	r3, [r3, #4]
 8006844:	deff      	udf	#255	; 0xff
 8006846:	bf00      	nop
 8006848:	20000a38 	.word	0x20000a38

0800684c <__malloc_lock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_lock+0x8>)
 800684e:	f7ff bf01 	b.w	8006654 <__retarget_lock_acquire_recursive>
 8006852:	bf00      	nop
 8006854:	20000a34 	.word	0x20000a34

08006858 <__malloc_unlock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_unlock+0x8>)
 800685a:	f7ff befc 	b.w	8006656 <__retarget_lock_release_recursive>
 800685e:	bf00      	nop
 8006860:	20000a34 	.word	0x20000a34

08006864 <__ssputs_r>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	688e      	ldr	r6, [r1, #8]
 800686a:	461f      	mov	r7, r3
 800686c:	42be      	cmp	r6, r7
 800686e:	680b      	ldr	r3, [r1, #0]
 8006870:	4682      	mov	sl, r0
 8006872:	460c      	mov	r4, r1
 8006874:	4690      	mov	r8, r2
 8006876:	d82c      	bhi.n	80068d2 <__ssputs_r+0x6e>
 8006878:	898a      	ldrh	r2, [r1, #12]
 800687a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800687e:	d026      	beq.n	80068ce <__ssputs_r+0x6a>
 8006880:	6965      	ldr	r5, [r4, #20]
 8006882:	6909      	ldr	r1, [r1, #16]
 8006884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006888:	eba3 0901 	sub.w	r9, r3, r1
 800688c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006890:	1c7b      	adds	r3, r7, #1
 8006892:	444b      	add	r3, r9
 8006894:	106d      	asrs	r5, r5, #1
 8006896:	429d      	cmp	r5, r3
 8006898:	bf38      	it	cc
 800689a:	461d      	movcc	r5, r3
 800689c:	0553      	lsls	r3, r2, #21
 800689e:	d527      	bpl.n	80068f0 <__ssputs_r+0x8c>
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7ff ff53 	bl	800674c <_malloc_r>
 80068a6:	4606      	mov	r6, r0
 80068a8:	b360      	cbz	r0, 8006904 <__ssputs_r+0xa0>
 80068aa:	6921      	ldr	r1, [r4, #16]
 80068ac:	464a      	mov	r2, r9
 80068ae:	f7ff fed3 	bl	8006658 <memcpy>
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	6126      	str	r6, [r4, #16]
 80068c0:	6165      	str	r5, [r4, #20]
 80068c2:	444e      	add	r6, r9
 80068c4:	eba5 0509 	sub.w	r5, r5, r9
 80068c8:	6026      	str	r6, [r4, #0]
 80068ca:	60a5      	str	r5, [r4, #8]
 80068cc:	463e      	mov	r6, r7
 80068ce:	42be      	cmp	r6, r7
 80068d0:	d900      	bls.n	80068d4 <__ssputs_r+0x70>
 80068d2:	463e      	mov	r6, r7
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	4632      	mov	r2, r6
 80068d8:	4641      	mov	r1, r8
 80068da:	f000 faab 	bl	8006e34 <memmove>
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	1b9b      	subs	r3, r3, r6
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	4433      	add	r3, r6
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	2000      	movs	r0, #0
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	462a      	mov	r2, r5
 80068f2:	f000 fac9 	bl	8006e88 <_realloc_r>
 80068f6:	4606      	mov	r6, r0
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d1e0      	bne.n	80068be <__ssputs_r+0x5a>
 80068fc:	6921      	ldr	r1, [r4, #16]
 80068fe:	4650      	mov	r0, sl
 8006900:	f7ff feb8 	bl	8006674 <_free_r>
 8006904:	230c      	movs	r3, #12
 8006906:	f8ca 3000 	str.w	r3, [sl]
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	e7e9      	b.n	80068ec <__ssputs_r+0x88>

08006918 <_svfiprintf_r>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	4698      	mov	r8, r3
 800691e:	898b      	ldrh	r3, [r1, #12]
 8006920:	061b      	lsls	r3, r3, #24
 8006922:	b09d      	sub	sp, #116	; 0x74
 8006924:	4607      	mov	r7, r0
 8006926:	460d      	mov	r5, r1
 8006928:	4614      	mov	r4, r2
 800692a:	d50e      	bpl.n	800694a <_svfiprintf_r+0x32>
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	b963      	cbnz	r3, 800694a <_svfiprintf_r+0x32>
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	f7ff ff0b 	bl	800674c <_malloc_r>
 8006936:	6028      	str	r0, [r5, #0]
 8006938:	6128      	str	r0, [r5, #16]
 800693a:	b920      	cbnz	r0, 8006946 <_svfiprintf_r+0x2e>
 800693c:	230c      	movs	r3, #12
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	e0d0      	b.n	8006ae8 <_svfiprintf_r+0x1d0>
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	616b      	str	r3, [r5, #20]
 800694a:	2300      	movs	r3, #0
 800694c:	9309      	str	r3, [sp, #36]	; 0x24
 800694e:	2320      	movs	r3, #32
 8006950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006954:	f8cd 800c 	str.w	r8, [sp, #12]
 8006958:	2330      	movs	r3, #48	; 0x30
 800695a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b00 <_svfiprintf_r+0x1e8>
 800695e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006962:	f04f 0901 	mov.w	r9, #1
 8006966:	4623      	mov	r3, r4
 8006968:	469a      	mov	sl, r3
 800696a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800696e:	b10a      	cbz	r2, 8006974 <_svfiprintf_r+0x5c>
 8006970:	2a25      	cmp	r2, #37	; 0x25
 8006972:	d1f9      	bne.n	8006968 <_svfiprintf_r+0x50>
 8006974:	ebba 0b04 	subs.w	fp, sl, r4
 8006978:	d00b      	beq.n	8006992 <_svfiprintf_r+0x7a>
 800697a:	465b      	mov	r3, fp
 800697c:	4622      	mov	r2, r4
 800697e:	4629      	mov	r1, r5
 8006980:	4638      	mov	r0, r7
 8006982:	f7ff ff6f 	bl	8006864 <__ssputs_r>
 8006986:	3001      	adds	r0, #1
 8006988:	f000 80a9 	beq.w	8006ade <_svfiprintf_r+0x1c6>
 800698c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800698e:	445a      	add	r2, fp
 8006990:	9209      	str	r2, [sp, #36]	; 0x24
 8006992:	f89a 3000 	ldrb.w	r3, [sl]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80a1 	beq.w	8006ade <_svfiprintf_r+0x1c6>
 800699c:	2300      	movs	r3, #0
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a6:	f10a 0a01 	add.w	sl, sl, #1
 80069aa:	9304      	str	r3, [sp, #16]
 80069ac:	9307      	str	r3, [sp, #28]
 80069ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069b2:	931a      	str	r3, [sp, #104]	; 0x68
 80069b4:	4654      	mov	r4, sl
 80069b6:	2205      	movs	r2, #5
 80069b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069bc:	4850      	ldr	r0, [pc, #320]	; (8006b00 <_svfiprintf_r+0x1e8>)
 80069be:	f7f9 fc17 	bl	80001f0 <memchr>
 80069c2:	9a04      	ldr	r2, [sp, #16]
 80069c4:	b9d8      	cbnz	r0, 80069fe <_svfiprintf_r+0xe6>
 80069c6:	06d0      	lsls	r0, r2, #27
 80069c8:	bf44      	itt	mi
 80069ca:	2320      	movmi	r3, #32
 80069cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d0:	0711      	lsls	r1, r2, #28
 80069d2:	bf44      	itt	mi
 80069d4:	232b      	movmi	r3, #43	; 0x2b
 80069d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069da:	f89a 3000 	ldrb.w	r3, [sl]
 80069de:	2b2a      	cmp	r3, #42	; 0x2a
 80069e0:	d015      	beq.n	8006a0e <_svfiprintf_r+0xf6>
 80069e2:	9a07      	ldr	r2, [sp, #28]
 80069e4:	4654      	mov	r4, sl
 80069e6:	2000      	movs	r0, #0
 80069e8:	f04f 0c0a 	mov.w	ip, #10
 80069ec:	4621      	mov	r1, r4
 80069ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f2:	3b30      	subs	r3, #48	; 0x30
 80069f4:	2b09      	cmp	r3, #9
 80069f6:	d94d      	bls.n	8006a94 <_svfiprintf_r+0x17c>
 80069f8:	b1b0      	cbz	r0, 8006a28 <_svfiprintf_r+0x110>
 80069fa:	9207      	str	r2, [sp, #28]
 80069fc:	e014      	b.n	8006a28 <_svfiprintf_r+0x110>
 80069fe:	eba0 0308 	sub.w	r3, r0, r8
 8006a02:	fa09 f303 	lsl.w	r3, r9, r3
 8006a06:	4313      	orrs	r3, r2
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	46a2      	mov	sl, r4
 8006a0c:	e7d2      	b.n	80069b4 <_svfiprintf_r+0x9c>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	9103      	str	r1, [sp, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfbb      	ittet	lt
 8006a1a:	425b      	neglt	r3, r3
 8006a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a20:	9307      	strge	r3, [sp, #28]
 8006a22:	9307      	strlt	r3, [sp, #28]
 8006a24:	bfb8      	it	lt
 8006a26:	9204      	strlt	r2, [sp, #16]
 8006a28:	7823      	ldrb	r3, [r4, #0]
 8006a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a2c:	d10c      	bne.n	8006a48 <_svfiprintf_r+0x130>
 8006a2e:	7863      	ldrb	r3, [r4, #1]
 8006a30:	2b2a      	cmp	r3, #42	; 0x2a
 8006a32:	d134      	bne.n	8006a9e <_svfiprintf_r+0x186>
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	1d1a      	adds	r2, r3, #4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	9203      	str	r2, [sp, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bfb8      	it	lt
 8006a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a44:	3402      	adds	r4, #2
 8006a46:	9305      	str	r3, [sp, #20]
 8006a48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006b10 <_svfiprintf_r+0x1f8>
 8006a4c:	7821      	ldrb	r1, [r4, #0]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	4650      	mov	r0, sl
 8006a52:	f7f9 fbcd 	bl	80001f0 <memchr>
 8006a56:	b138      	cbz	r0, 8006a68 <_svfiprintf_r+0x150>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	eba0 000a 	sub.w	r0, r0, sl
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	4082      	lsls	r2, r0
 8006a62:	4313      	orrs	r3, r2
 8006a64:	3401      	adds	r4, #1
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6c:	4825      	ldr	r0, [pc, #148]	; (8006b04 <_svfiprintf_r+0x1ec>)
 8006a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a72:	2206      	movs	r2, #6
 8006a74:	f7f9 fbbc 	bl	80001f0 <memchr>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d038      	beq.n	8006aee <_svfiprintf_r+0x1d6>
 8006a7c:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <_svfiprintf_r+0x1f0>)
 8006a7e:	bb1b      	cbnz	r3, 8006ac8 <_svfiprintf_r+0x1b0>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	3307      	adds	r3, #7
 8006a84:	f023 0307 	bic.w	r3, r3, #7
 8006a88:	3308      	adds	r3, #8
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8e:	4433      	add	r3, r6
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	e768      	b.n	8006966 <_svfiprintf_r+0x4e>
 8006a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a98:	460c      	mov	r4, r1
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	e7a6      	b.n	80069ec <_svfiprintf_r+0xd4>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	3401      	adds	r4, #1
 8006aa2:	9305      	str	r3, [sp, #20]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f04f 0c0a 	mov.w	ip, #10
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab0:	3a30      	subs	r2, #48	; 0x30
 8006ab2:	2a09      	cmp	r2, #9
 8006ab4:	d903      	bls.n	8006abe <_svfiprintf_r+0x1a6>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0c6      	beq.n	8006a48 <_svfiprintf_r+0x130>
 8006aba:	9105      	str	r1, [sp, #20]
 8006abc:	e7c4      	b.n	8006a48 <_svfiprintf_r+0x130>
 8006abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e7f0      	b.n	8006aaa <_svfiprintf_r+0x192>
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	462a      	mov	r2, r5
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <_svfiprintf_r+0x1f4>)
 8006ad0:	a904      	add	r1, sp, #16
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f3af 8000 	nop.w
 8006ad8:	1c42      	adds	r2, r0, #1
 8006ada:	4606      	mov	r6, r0
 8006adc:	d1d6      	bne.n	8006a8c <_svfiprintf_r+0x174>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	065b      	lsls	r3, r3, #25
 8006ae2:	f53f af2d 	bmi.w	8006940 <_svfiprintf_r+0x28>
 8006ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae8:	b01d      	add	sp, #116	; 0x74
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aee:	ab03      	add	r3, sp, #12
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	462a      	mov	r2, r5
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <_svfiprintf_r+0x1f4>)
 8006af6:	a904      	add	r1, sp, #16
 8006af8:	4638      	mov	r0, r7
 8006afa:	f000 f879 	bl	8006bf0 <_printf_i>
 8006afe:	e7eb      	b.n	8006ad8 <_svfiprintf_r+0x1c0>
 8006b00:	08007079 	.word	0x08007079
 8006b04:	08007083 	.word	0x08007083
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	08006865 	.word	0x08006865
 8006b10:	0800707f 	.word	0x0800707f

08006b14 <_printf_common>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	4616      	mov	r6, r2
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	688a      	ldr	r2, [r1, #8]
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bfb8      	it	lt
 8006b28:	4613      	movlt	r3, r2
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b30:	4607      	mov	r7, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b10a      	cbz	r2, 8006b3a <_printf_common+0x26>
 8006b36:	3301      	adds	r3, #1
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	6833      	ldrmi	r3, [r6, #0]
 8006b42:	3302      	addmi	r3, #2
 8006b44:	6033      	strmi	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d106      	bne.n	8006b5c <_printf_common+0x48>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc26      	bgt.n	8006baa <_printf_common+0x96>
 8006b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b60:	1e13      	subs	r3, r2, #0
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	bf18      	it	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	0692      	lsls	r2, r2, #26
 8006b6a:	d42b      	bmi.n	8006bc4 <_printf_common+0xb0>
 8006b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01e      	beq.n	8006bb8 <_printf_common+0xa4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	f003 0306 	and.w	r3, r3, #6
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	bf02      	ittt	eq
 8006b86:	68e5      	ldreq	r5, [r4, #12]
 8006b88:	6833      	ldreq	r3, [r6, #0]
 8006b8a:	1aed      	subeq	r5, r5, r3
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	bf0c      	ite	eq
 8006b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b94:	2500      	movne	r5, #0
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bfc4      	itt	gt
 8006b9a:	1a9b      	subgt	r3, r3, r2
 8006b9c:	18ed      	addgt	r5, r5, r3
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	341a      	adds	r4, #26
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d11a      	bne.n	8006bdc <_printf_common+0xc8>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e008      	b.n	8006bbc <_printf_common+0xa8>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4649      	mov	r1, r9
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	47c0      	blx	r8
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d103      	bne.n	8006bc0 <_printf_common+0xac>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7c6      	b.n	8006b52 <_printf_common+0x3e>
 8006bc4:	18e1      	adds	r1, r4, r3
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	2030      	movs	r0, #48	; 0x30
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bce:	4422      	add	r2, r4
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd8:	3302      	adds	r3, #2
 8006bda:	e7c7      	b.n	8006b6c <_printf_common+0x58>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4622      	mov	r2, r4
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0e6      	beq.n	8006bb8 <_printf_common+0xa4>
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7d9      	b.n	8006ba2 <_printf_common+0x8e>
	...

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf8:	2f78      	cmp	r7, #120	; 0x78
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	469a      	mov	sl, r3
 8006c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	; 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d4 	beq.w	8006dba <_printf_i+0x1ca>
 8006c12:	2f58      	cmp	r7, #88	; 0x58
 8006c14:	f000 80c0 	beq.w	8006d98 <_printf_i+0x1a8>
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	; (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006da1 	.word	0x08006da1
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006d5b 	.word	0x08006d5b
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dc3 	.word	0x08006dc3
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006cc9 	.word	0x08006cc9
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d63 	.word	0x08006d63
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e09f      	b.n	8006ddc <_printf_i+0x1ec>
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	0607      	lsls	r7, r0, #24
 8006ca2:	f103 0104 	add.w	r1, r3, #4
 8006ca6:	6029      	str	r1, [r5, #0]
 8006ca8:	d501      	bpl.n	8006cae <_printf_i+0xbe>
 8006caa:	681e      	ldr	r6, [r3, #0]
 8006cac:	e003      	b.n	8006cb6 <_printf_i+0xc6>
 8006cae:	0646      	lsls	r6, r0, #25
 8006cb0:	d5fb      	bpl.n	8006caa <_printf_i+0xba>
 8006cb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	da03      	bge.n	8006cc2 <_printf_i+0xd2>
 8006cba:	232d      	movs	r3, #45	; 0x2d
 8006cbc:	4276      	negs	r6, r6
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc2:	485a      	ldr	r0, [pc, #360]	; (8006e2c <_printf_i+0x23c>)
 8006cc4:	230a      	movs	r3, #10
 8006cc6:	e012      	b.n	8006cee <_printf_i+0xfe>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	6820      	ldr	r0, [r4, #0]
 8006ccc:	1d19      	adds	r1, r3, #4
 8006cce:	6029      	str	r1, [r5, #0]
 8006cd0:	0605      	lsls	r5, r0, #24
 8006cd2:	d501      	bpl.n	8006cd8 <_printf_i+0xe8>
 8006cd4:	681e      	ldr	r6, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <_printf_i+0xee>
 8006cd8:	0641      	lsls	r1, r0, #25
 8006cda:	d5fb      	bpl.n	8006cd4 <_printf_i+0xe4>
 8006cdc:	881e      	ldrh	r6, [r3, #0]
 8006cde:	4853      	ldr	r0, [pc, #332]	; (8006e2c <_printf_i+0x23c>)
 8006ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2308      	moveq	r3, #8
 8006ce6:	230a      	movne	r3, #10
 8006ce8:	2100      	movs	r1, #0
 8006cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cee:	6865      	ldr	r5, [r4, #4]
 8006cf0:	60a5      	str	r5, [r4, #8]
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	bfa2      	ittt	ge
 8006cf6:	6821      	ldrge	r1, [r4, #0]
 8006cf8:	f021 0104 	bicge.w	r1, r1, #4
 8006cfc:	6021      	strge	r1, [r4, #0]
 8006cfe:	b90e      	cbnz	r6, 8006d04 <_printf_i+0x114>
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	d04b      	beq.n	8006d9c <_printf_i+0x1ac>
 8006d04:	4615      	mov	r5, r2
 8006d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006d0e:	5dc7      	ldrb	r7, [r0, r7]
 8006d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d14:	4637      	mov	r7, r6
 8006d16:	42bb      	cmp	r3, r7
 8006d18:	460e      	mov	r6, r1
 8006d1a:	d9f4      	bls.n	8006d06 <_printf_i+0x116>
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d10b      	bne.n	8006d38 <_printf_i+0x148>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	07de      	lsls	r6, r3, #31
 8006d24:	d508      	bpl.n	8006d38 <_printf_i+0x148>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	6861      	ldr	r1, [r4, #4]
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	bfde      	ittt	le
 8006d2e:	2330      	movle	r3, #48	; 0x30
 8006d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d38:	1b52      	subs	r2, r2, r5
 8006d3a:	6122      	str	r2, [r4, #16]
 8006d3c:	f8cd a000 	str.w	sl, [sp]
 8006d40:	464b      	mov	r3, r9
 8006d42:	aa03      	add	r2, sp, #12
 8006d44:	4621      	mov	r1, r4
 8006d46:	4640      	mov	r0, r8
 8006d48:	f7ff fee4 	bl	8006b14 <_printf_common>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d14a      	bne.n	8006de6 <_printf_i+0x1f6>
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	b004      	add	sp, #16
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f043 0320 	orr.w	r3, r3, #32
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	4833      	ldr	r0, [pc, #204]	; (8006e30 <_printf_i+0x240>)
 8006d64:	2778      	movs	r7, #120	; 0x78
 8006d66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	6829      	ldr	r1, [r5, #0]
 8006d6e:	061f      	lsls	r7, r3, #24
 8006d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0x18c>
 8006d76:	065f      	lsls	r7, r3, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2b6      	uxthmi	r6, r6
 8006d7c:	07df      	lsls	r7, r3, #31
 8006d7e:	bf48      	it	mi
 8006d80:	f043 0320 	orrmi.w	r3, r3, #32
 8006d84:	6029      	str	r1, [r5, #0]
 8006d86:	bf48      	it	mi
 8006d88:	6023      	strmi	r3, [r4, #0]
 8006d8a:	b91e      	cbnz	r6, 8006d94 <_printf_i+0x1a4>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	2310      	movs	r3, #16
 8006d96:	e7a7      	b.n	8006ce8 <_printf_i+0xf8>
 8006d98:	4824      	ldr	r0, [pc, #144]	; (8006e2c <_printf_i+0x23c>)
 8006d9a:	e7e4      	b.n	8006d66 <_printf_i+0x176>
 8006d9c:	4615      	mov	r5, r2
 8006d9e:	e7bd      	b.n	8006d1c <_printf_i+0x12c>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	6826      	ldr	r6, [r4, #0]
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	1d18      	adds	r0, r3, #4
 8006da8:	6028      	str	r0, [r5, #0]
 8006daa:	0635      	lsls	r5, r6, #24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	d501      	bpl.n	8006db4 <_printf_i+0x1c4>
 8006db0:	6019      	str	r1, [r3, #0]
 8006db2:	e002      	b.n	8006dba <_printf_i+0x1ca>
 8006db4:	0670      	lsls	r0, r6, #25
 8006db6:	d5fb      	bpl.n	8006db0 <_printf_i+0x1c0>
 8006db8:	8019      	strh	r1, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	4615      	mov	r5, r2
 8006dc0:	e7bc      	b.n	8006d3c <_printf_i+0x14c>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7f9 fa0e 	bl	80001f0 <memchr>
 8006dd4:	b108      	cbz	r0, 8006dda <_printf_i+0x1ea>
 8006dd6:	1b40      	subs	r0, r0, r5
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	e7aa      	b.n	8006d3c <_printf_i+0x14c>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	462a      	mov	r2, r5
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d0ad      	beq.n	8006d50 <_printf_i+0x160>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	d413      	bmi.n	8006e22 <_printf_i+0x232>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e7a6      	b.n	8006d54 <_printf_i+0x164>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d09d      	beq.n	8006d50 <_printf_i+0x160>
 8006e14:	3501      	adds	r5, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dcf2      	bgt.n	8006e06 <_printf_i+0x216>
 8006e20:	e7eb      	b.n	8006dfa <_printf_i+0x20a>
 8006e22:	2500      	movs	r5, #0
 8006e24:	f104 0619 	add.w	r6, r4, #25
 8006e28:	e7f5      	b.n	8006e16 <_printf_i+0x226>
 8006e2a:	bf00      	nop
 8006e2c:	0800708a 	.word	0x0800708a
 8006e30:	0800709b 	.word	0x0800709b

08006e34 <memmove>:
 8006e34:	4288      	cmp	r0, r1
 8006e36:	b510      	push	{r4, lr}
 8006e38:	eb01 0402 	add.w	r4, r1, r2
 8006e3c:	d902      	bls.n	8006e44 <memmove+0x10>
 8006e3e:	4284      	cmp	r4, r0
 8006e40:	4623      	mov	r3, r4
 8006e42:	d807      	bhi.n	8006e54 <memmove+0x20>
 8006e44:	1e43      	subs	r3, r0, #1
 8006e46:	42a1      	cmp	r1, r4
 8006e48:	d008      	beq.n	8006e5c <memmove+0x28>
 8006e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e52:	e7f8      	b.n	8006e46 <memmove+0x12>
 8006e54:	4402      	add	r2, r0
 8006e56:	4601      	mov	r1, r0
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d100      	bne.n	8006e5e <memmove+0x2a>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e66:	e7f7      	b.n	8006e58 <memmove+0x24>

08006e68 <_sbrk_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_sbrk_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7fa f9ce 	bl	8001214 <_sbrk>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_sbrk_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_sbrk_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20000a30 	.word	0x20000a30

08006e88 <_realloc_r>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	4614      	mov	r4, r2
 8006e90:	460e      	mov	r6, r1
 8006e92:	b921      	cbnz	r1, 8006e9e <_realloc_r+0x16>
 8006e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e98:	4611      	mov	r1, r2
 8006e9a:	f7ff bc57 	b.w	800674c <_malloc_r>
 8006e9e:	b92a      	cbnz	r2, 8006eac <_realloc_r+0x24>
 8006ea0:	f7ff fbe8 	bl	8006674 <_free_r>
 8006ea4:	4625      	mov	r5, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eac:	f000 f81b 	bl	8006ee6 <_malloc_usable_size_r>
 8006eb0:	4284      	cmp	r4, r0
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	d802      	bhi.n	8006ebc <_realloc_r+0x34>
 8006eb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eba:	d812      	bhi.n	8006ee2 <_realloc_r+0x5a>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f7ff fc44 	bl	800674c <_malloc_r>
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d0ed      	beq.n	8006ea6 <_realloc_r+0x1e>
 8006eca:	42bc      	cmp	r4, r7
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4631      	mov	r1, r6
 8006ed0:	bf28      	it	cs
 8006ed2:	463a      	movcs	r2, r7
 8006ed4:	f7ff fbc0 	bl	8006658 <memcpy>
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4640      	mov	r0, r8
 8006edc:	f7ff fbca 	bl	8006674 <_free_r>
 8006ee0:	e7e1      	b.n	8006ea6 <_realloc_r+0x1e>
 8006ee2:	4635      	mov	r5, r6
 8006ee4:	e7df      	b.n	8006ea6 <_realloc_r+0x1e>

08006ee6 <_malloc_usable_size_r>:
 8006ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eea:	1f18      	subs	r0, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbc      	itt	lt
 8006ef0:	580b      	ldrlt	r3, [r1, r0]
 8006ef2:	18c0      	addlt	r0, r0, r3
 8006ef4:	4770      	bx	lr
	...

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
