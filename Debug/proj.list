
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800796c  0800796c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800796c  0800796c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800796c  0800796c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000848  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010b94  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002494  00000000  00000000  00030c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da8  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab2  00000000  00000000  00033ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020630  00000000  00000000  0003497a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e5e  00000000  00000000  00054faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8bb1  00000000  00000000  00066e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f10  00000000  00000000  0012f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001338cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077b8 	.word	0x080077b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080077b8 	.word	0x080077b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <hc_sr_04_convert_us_to_cm>:
	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
}

uint32_t hc_sr_04_convert_us_to_cm(uint32_t distance_us)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <hc_sr_04_convert_us_to_cm+0x20>)
 800029c:	fba2 2303 	umull	r2, r3, r2, r3
 80002a0:	095b      	lsrs	r3, r3, #5
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	8d3dcb09 	.word	0x8d3dcb09

080002b4 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d113      	bne.n	80002ee <HAL_TIM_IC_CaptureCallback+0x3a>
	{
		pwmInResult_ch1;
		pwmInResult_ch2;
		uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80002c6:	2104      	movs	r1, #4
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <HAL_TIM_IC_CaptureCallback+0x48>)
 80002ca:	f004 f9ad 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 80002ce:	60f8      	str	r0, [r7, #12]
		uint32_t echo_us2 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80002d0:	2100      	movs	r1, #0
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <HAL_TIM_IC_CaptureCallback+0x48>)
 80002d4:	f004 f9a8 	bl	8004628 <HAL_TIM_ReadCapturedValue>
 80002d8:	60b8      	str	r0, [r7, #8]
		distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(65535-echo_us2);
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80002e0:	33ff      	adds	r3, #255	; 0xff
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffd4 	bl	8000290 <hc_sr_04_convert_us_to_cm>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80002ec:	60d3      	str	r3, [r2, #12]
	}
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40012c00 	.word	0x40012c00
 80002fc:	200000a0 	.word	0x200000a0
 8000300:	2000065c 	.word	0x2000065c

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b0ce      	sub	sp, #312	; 0x138
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f001 f889 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f859 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 fa2b 	bl	800076c <MX_GPIO_Init>
  MX_DMA_Init();
 8000316:	f000 fa03 	bl	8000720 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800031a:	f000 f9d1 	bl	80006c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800031e:	f000 f8b5 	bl	800048c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000322:	f000 f957 	bl	80005d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buffer_R.tab[buffer_R.empty], 1);
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <main+0xa4>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	4a1f      	ldr	r2, [pc, #124]	; (80003a8 <main+0xa4>)
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	4413      	add	r3, r2
 8000330:	2201      	movs	r2, #1
 8000332:	4619      	mov	r1, r3
 8000334:	481d      	ldr	r0, [pc, #116]	; (80003ac <main+0xa8>)
 8000336:	f005 fa3b 	bl	80057b0 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)pulse, 1);
 800033a:	2301      	movs	r3, #1
 800033c:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <main+0xac>)
 800033e:	2108      	movs	r1, #8
 8000340:	481c      	ldr	r0, [pc, #112]	; (80003b4 <main+0xb0>)
 8000342:	f003 fb11 	bl	8003968 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, pwmInResult_ch1, 1);
 8000346:	2301      	movs	r3, #1
 8000348:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <main+0xb4>)
 800034a:	2104      	movs	r1, #4
 800034c:	481b      	ldr	r0, [pc, #108]	; (80003bc <main+0xb8>)
 800034e:	f003 fb0b 	bl	8003968 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USART_fSend("START\n\r");
 8000352:	481b      	ldr	r0, [pc, #108]	; (80003c0 <main+0xbc>)
 8000354:	f000 faac 	bl	80008b0 <USART_fSend>
  int16_t length = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
  char bFrame[300];
  char senderAddress[4];
  while (1)
  {
	  if ((length = getFrame(bFrame)) != -1) {
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fb84 	bl	8000a70 <getFrame>
 8000368:	4603      	mov	r3, r0
 800036a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800036e:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000376:	d0f2      	beq.n	800035e <main+0x5a>
		 if ((length = analizeFrame(bFrame,length,senderAddress)) != 0) {
 8000378:	1d3a      	adds	r2, r7, #4
 800037a:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fc1a 	bl	8000bbc <analizeFrame>
 8000388:	4603      	mov	r3, r0
 800038a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800038e:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0e3      	beq.n	800035e <main+0x5a>
			 analizeCommend(bFrame, length, senderAddress);
 8000396:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	f107 0308 	add.w	r3, r7, #8
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fdd7 	bl	8000f54 <analizeCommend>
	  if ((length = getFrame(bFrame)) != -1) {
 80003a6:	e7da      	b.n	800035e <main+0x5a>
 80003a8:	20000010 	.word	0x20000010
 80003ac:	200001c0 	.word	0x200001c0
 80003b0:	20000020 	.word	0x20000020
 80003b4:	200000ec 	.word	0x200000ec
 80003b8:	2000066c 	.word	0x2000066c
 80003bc:	200000a0 	.word	0x200000a0
 80003c0:	080077d0 	.word	0x080077d0

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b0a6      	sub	sp, #152	; 0x98
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f006 fd5a 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2258      	movs	r2, #88	; 0x58
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f006 fd4c 	bl	8006e8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2310      	movs	r3, #16
 80003fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800040c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000410:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fd40 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800042e:	f000 fdd1 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2302      	movs	r3, #2
 8000438:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000442:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800044c:	2102      	movs	r1, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fd7e 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800045a:	f000 fdbb 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <SystemClock_Config+0xc4>)
 8000460:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000466:	2300      	movs	r3, #0
 8000468:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800046a:	2300      	movs	r3, #0
 800046c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4618      	mov	r0, r3
 8000472:	f002 ffa3 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800047c:	f000 fdaa 	bl	8000fd4 <Error_Handler>
  }
}
 8000480:	bf00      	nop
 8000482:	3798      	adds	r7, #152	; 0x98
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	00101002 	.word	0x00101002

0800048c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b090      	sub	sp, #64	; 0x40
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004a0:	f107 031c 	add.w	r3, r7, #28
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c8:	4b40      	ldr	r3, [pc, #256]	; (80005cc <MX_TIM1_Init+0x140>)
 80004ca:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <MX_TIM1_Init+0x144>)
 80004cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004ce:	4b3f      	ldr	r3, [pc, #252]	; (80005cc <MX_TIM1_Init+0x140>)
 80004d0:	2247      	movs	r2, #71	; 0x47
 80004d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <MX_TIM1_Init+0x140>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004da:	4b3c      	ldr	r3, [pc, #240]	; (80005cc <MX_TIM1_Init+0x140>)
 80004dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e2:	4b3a      	ldr	r3, [pc, #232]	; (80005cc <MX_TIM1_Init+0x140>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e8:	4b38      	ldr	r3, [pc, #224]	; (80005cc <MX_TIM1_Init+0x140>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <MX_TIM1_Init+0x140>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f4:	4835      	ldr	r0, [pc, #212]	; (80005cc <MX_TIM1_Init+0x140>)
 80004f6:	f003 f97f 	bl	80037f8 <HAL_TIM_Base_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000500:	f000 fd68 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800050a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050e:	4619      	mov	r1, r3
 8000510:	482e      	ldr	r0, [pc, #184]	; (80005cc <MX_TIM1_Init+0x140>)
 8000512:	f003 ff7d 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800051c:	f000 fd5a 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000520:	482a      	ldr	r0, [pc, #168]	; (80005cc <MX_TIM1_Init+0x140>)
 8000522:	f003 fc45 	bl	8003db0 <HAL_TIM_IC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800052c:	f000 fd52 	bl	8000fd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000530:	2304      	movs	r3, #4
 8000532:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000534:	2350      	movs	r3, #80	; 0x50
 8000536:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000538:	2302      	movs	r3, #2
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	4619      	mov	r1, r3
 800054a:	4820      	ldr	r0, [pc, #128]	; (80005cc <MX_TIM1_Init+0x140>)
 800054c:	f004 f829 	bl	80045a2 <HAL_TIM_SlaveConfigSynchro>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000556:	f000 fd3d 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800055a:	2302      	movs	r3, #2
 800055c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800055e:	2301      	movs	r3, #1
 8000560:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <MX_TIM1_Init+0x140>)
 8000574:	f003 fd9c 	bl	80040b0 <HAL_TIM_IC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800057e:	f000 fd29 	bl	8000fd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000586:	2302      	movs	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2204      	movs	r2, #4
 8000590:	4619      	mov	r1, r3
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_TIM1_Init+0x140>)
 8000594:	f003 fd8c 	bl	80040b0 <HAL_TIM_IC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800059e:	f000 fd19 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_TIM1_Init+0x140>)
 80005b4:	f004 ffa6 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80005be:	f000 fd09 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3740      	adds	r7, #64	; 0x40
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	40012c00 	.word	0x40012c00

080005d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_TIM2_Init+0xe8>)
 8000608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_TIM2_Init+0xe8>)
 8000610:	2247      	movs	r2, #71	; 0x47
 8000612:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_TIM2_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_TIM2_Init+0xe8>)
 800061c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000620:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_TIM2_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_TIM2_Init+0xe8>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062e:	4823      	ldr	r0, [pc, #140]	; (80006bc <MX_TIM2_Init+0xe8>)
 8000630:	f003 f8e2 	bl	80037f8 <HAL_TIM_Base_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800063a:	f000 fccb 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000648:	4619      	mov	r1, r3
 800064a:	481c      	ldr	r0, [pc, #112]	; (80006bc <MX_TIM2_Init+0xe8>)
 800064c:	f003 fee0 	bl	8004410 <HAL_TIM_ConfigClockSource>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000656:	f000 fcbd 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <MX_TIM2_Init+0xe8>)
 800065c:	f003 f923 	bl	80038a6 <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000666:	f000 fcb5 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_TIM2_Init+0xe8>)
 800067a:	f004 ff43 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000684:	f000 fca6 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2208      	movs	r2, #8
 800069c:	4619      	mov	r1, r3
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <MX_TIM2_Init+0xe8>)
 80006a0:	f003 fda2 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80006aa:	f000 fc93 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <MX_TIM2_Init+0xe8>)
 80006b0:	f000 fd72 	bl	8001198 <HAL_TIM_MspPostInit>

}
 80006b4:	bf00      	nop
 80006b6:	3738      	adds	r7, #56	; 0x38
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000ec 	.word	0x200000ec

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f004 ffa8 	bl	8005658 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 fc61 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200001c0 	.word	0x200001c0
 800071c:	40004400 	.word	0x40004400

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_DMA_Init+0x48>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_DMA_Init+0x48>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_DMA_Init+0x48>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200b      	movs	r0, #11
 8000744:	f000 ffad 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000748:	200b      	movs	r0, #11
 800074a:	f000 ffc6 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200c      	movs	r0, #12
 8000754:	f000 ffa5 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 ffbe 	bl	80016da <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0xc4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f001 fb45 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0xc8>)
 8000806:	f001 f9ad 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080a:	2320      	movs	r3, #32
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f001 f99e 	bl	8001b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800

08000838 <USART_keyboardhit>:
{
	uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
	distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
}

uint8_t USART_keyboardhit(){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	if(buffer_R.empty == buffer_R.busy){
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <USART_keyboardhit+0x20>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <USART_keyboardhit+0x20>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	d101      	bne.n	800084c <USART_keyboardhit+0x14>
		return 0;
 8000848:	2300      	movs	r3, #0
 800084a:	e000      	b.n	800084e <USART_keyboardhit+0x16>
	}
	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20000010 	.word	0x20000010

0800085c <USART_getchar>:

int8_t USART_getchar(){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	int16_t character;
	if(USART_keyboardhit()){
 8000862:	f7ff ffe9 	bl	8000838 <USART_keyboardhit>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d019      	beq.n	80008a0 <USART_getchar+0x44>
		character = buffer_R.tab[buffer_R.busy];
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <USART_getchar+0x50>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <USART_getchar+0x50>)
 8000872:	6852      	ldr	r2, [r2, #4]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	80fb      	strh	r3, [r7, #6]
		buffer_R.busy++;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <USART_getchar+0x50>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <USART_getchar+0x50>)
 8000882:	6053      	str	r3, [r2, #4]
		buffer_R.busy %= buffer_R.len;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <USART_getchar+0x50>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4a08      	ldr	r2, [pc, #32]	; (80008ac <USART_getchar+0x50>)
 800088a:	6892      	ldr	r2, [r2, #8]
 800088c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <USART_getchar+0x50>)
 8000898:	6053      	str	r3, [r2, #4]
		return character;
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	e001      	b.n	80008a4 <USART_getchar+0x48>
	}
	else{
		return -1;
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000010 	.word	0x20000010

080008b0 <USART_fSend>:

void USART_fSend(char *msg, ...){
 80008b0:	b40f      	push	{r0, r1, r2, r3}
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b0a4      	sub	sp, #144	; 0x90
 80008b6:	af00      	add	r7, sp, #0
	char tempDataToSend[128];
	int idx;
	va_list arglist;
	va_start(arglist, msg);
 80008b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008bc:	607b      	str	r3, [r7, #4]
	vsprintf(tempDataToSend, msg, arglist);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fad5 	bl	8006e78 <vsiprintf>
	va_end(arglist);
	idx = buffer_T.empty;
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <USART_fSend+0xfc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008dc:	e020      	b.n	8000920 <USART_fSend+0x70>
		buffer_T.tab[idx] = tempDataToSend[i];
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <USART_fSend+0xfc>)
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008e6:	4413      	add	r3, r2
 80008e8:	f107 0108 	add.w	r1, r7, #8
 80008ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80008f0:	440a      	add	r2, r1
 80008f2:	7812      	ldrb	r2, [r2, #0]
 80008f4:	701a      	strb	r2, [r3, #0]
		idx++;
 80008f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		idx %= buffer_T.len;
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <USART_fSend+0xfc>)
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000908:	fb93 f1f2 	sdiv	r1, r3, r2
 800090c:	fb01 f202 	mul.w	r2, r1, r2
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 8000916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800091a:	3301      	adds	r3, #1
 800091c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc5b 	bl	80001e0 <strlen>
 800092a:	4602      	mov	r2, r0
 800092c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000930:	429a      	cmp	r2, r3
 8000932:	d8d4      	bhi.n	80008de <USART_fSend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
	}
	__disable_irq();
	//Sprawdzamy czy nie trwa w tym momencie transmisja, jeśli nie to przestawiamy index i ją uruchamiamy
	if((buffer_T.busy == buffer_T.empty) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET)){
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <USART_fSend+0xfc>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <USART_fSend+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d125      	bne.n	8000990 <USART_fSend+0xe0>
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <USART_fSend+0x100>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	2b80      	cmp	r3, #128	; 0x80
 8000950:	d11e      	bne.n	8000990 <USART_fSend+0xe0>
		buffer_T.empty = idx;
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <USART_fSend+0xfc>)
 8000954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000958:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2,&buffer_T.tab[buffer_T.busy],1);
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <USART_fSend+0xfc>)
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <USART_fSend+0xfc>)
 8000960:	6852      	ldr	r2, [r2, #4]
 8000962:	4413      	add	r3, r2
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <USART_fSend+0x100>)
 800096a:	f004 fec3 	bl	80056f4 <HAL_UART_Transmit_IT>
		buffer_T.busy++;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <USART_fSend+0xfc>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	3301      	adds	r3, #1
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <USART_fSend+0xfc>)
 8000976:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <USART_fSend+0xfc>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <USART_fSend+0xfc>)
 800097e:	6892      	ldr	r2, [r2, #8]
 8000980:	fb93 f1f2 	sdiv	r1, r3, r2
 8000984:	fb01 f202 	mul.w	r2, r1, r2
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <USART_fSend+0xfc>)
 800098c:	6053      	str	r3, [r2, #4]
 800098e:	e003      	b.n	8000998 <USART_fSend+0xe8>
	}
	else{
		buffer_T.empty = idx;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <USART_fSend+0xfc>)
 8000992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000996:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000998:	b662      	cpsie	i
}
 800099a:	bf00      	nop
	}
	__enable_irq();
}
 800099c:	bf00      	nop
 800099e:	3790      	adds	r7, #144	; 0x90
 80009a0:	46bd      	mov	sp, r7
 80009a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009a6:	b004      	add	sp, #16
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	200001c0 	.word	0x200001c0

080009b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && buffer_T.busy != buffer_T.empty){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <HAL_UART_TxCpltCallback+0x60>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d123      	bne.n	8000a0c <HAL_UART_TxCpltCallback+0x58>
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d01d      	beq.n	8000a0c <HAL_UART_TxCpltCallback+0x58>
		uint8_t character = buffer_T.tab[buffer_T.busy];
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009d6:	6852      	ldr	r2, [r2, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	73fb      	strb	r3, [r7, #15]
		buffer_T.busy++;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009e6:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009ee:	6892      	ldr	r2, [r2, #8]
 80009f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009f4:	fb01 f202 	mul.w	r2, r1, r2
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009fc:	6053      	str	r3, [r2, #4]
		HAL_UART_Transmit_IT(&huart2,&character,1);
 80009fe:	f107 030f 	add.w	r3, r7, #15
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <HAL_UART_TxCpltCallback+0x60>)
 8000a08:	f004 fe74 	bl	80056f4 <HAL_UART_Transmit_IT>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200001c0 	.word	0x200001c0
 8000a18:	20000000 	.word	0x20000000

08000a1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_RxCpltCallback+0x4c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d119      	bne.n	8000a60 <HAL_UART_RxCpltCallback+0x44>
			buffer_R.empty++;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a34:	6013      	str	r3, [r2, #0]
			buffer_R.empty %= buffer_R.len;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a3c:	6892      	ldr	r2, [r2, #8]
 8000a3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a42:	fb01 f202 	mul.w	r2, r1, r2
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a4a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,&buffer_R.tab[buffer_R.empty],1);
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_UART_RxCpltCallback+0x50>)
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <HAL_UART_RxCpltCallback+0x4c>)
 8000a5c:	f004 fea8 	bl	80057b0 <HAL_UART_Receive_IT>
		}
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001c0 	.word	0x200001c0
 8000a6c:	20000010 	.word	0x20000010

08000a70 <getFrame>:

int16_t getFrame(char *bufferedFrame) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	static int16_t numberOfChars = -1;
	static char frameBuf[frameMaxSize - 2];
	int16_t charFromFrame;
    int16_t ret;
	static uint8_t tildeOccured = 0;
	if ((charFromFrame = USART_getchar()) != -1) {
 8000a78:	f7ff fef0 	bl	800085c <USART_getchar>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	81fb      	strh	r3, [r7, #14]
 8000a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	f000 808c 	beq.w	8000ba4 <getFrame+0x134>
		if (charFromFrame == startFrame) {
 8000a8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a90:	2b7b      	cmp	r3, #123	; 0x7b
 8000a92:	d106      	bne.n	8000aa2 <getFrame+0x32>
			numberOfChars = 0;
 8000a94:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <getFrame+0x140>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	801a      	strh	r2, [r3, #0]
			tildeOccured = 0;
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <getFrame+0x144>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e080      	b.n	8000ba4 <getFrame+0x134>
		}
		else if (numberOfChars >= 0) {
 8000aa2:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <getFrame+0x140>)
 8000aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db7b      	blt.n	8000ba4 <getFrame+0x134>
			if (tildeOccured == 1) {
 8000aac:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <getFrame+0x144>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d13a      	bne.n	8000b2a <getFrame+0xba>
				switch (charFromFrame) {
 8000ab4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ab8:	2b60      	cmp	r3, #96	; 0x60
 8000aba:	d006      	beq.n	8000aca <getFrame+0x5a>
 8000abc:	2b60      	cmp	r3, #96	; 0x60
 8000abe:	dc2b      	bgt.n	8000b18 <getFrame+0xa8>
 8000ac0:	2b5b      	cmp	r3, #91	; 0x5b
 8000ac2:	d00f      	beq.n	8000ae4 <getFrame+0x74>
 8000ac4:	2b5d      	cmp	r3, #93	; 0x5d
 8000ac6:	d01a      	beq.n	8000afe <getFrame+0x8e>
 8000ac8:	e026      	b.n	8000b18 <getFrame+0xa8>
					case codingChar:
						frameBuf[numberOfChars++] = codingChar;
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <getFrame+0x140>)
 8000acc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ad0:	b293      	uxth	r3, r2
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b219      	sxth	r1, r3
 8000ad8:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <getFrame+0x140>)
 8000ada:	8019      	strh	r1, [r3, #0]
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <getFrame+0x148>)
 8000ade:	2160      	movs	r1, #96	; 0x60
 8000ae0:	5499      	strb	r1, [r3, r2]
						break;
 8000ae2:	e01e      	b.n	8000b22 <getFrame+0xb2>
					case codeStartcharFromFrame:
						frameBuf[numberOfChars++] = startFrame;
 8000ae4:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <getFrame+0x140>)
 8000ae6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000aea:	b293      	uxth	r3, r2
 8000aec:	3301      	adds	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b219      	sxth	r1, r3
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <getFrame+0x140>)
 8000af4:	8019      	strh	r1, [r3, #0]
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <getFrame+0x148>)
 8000af8:	217b      	movs	r1, #123	; 0x7b
 8000afa:	5499      	strb	r1, [r3, r2]
						break;
 8000afc:	e011      	b.n	8000b22 <getFrame+0xb2>
					case codeEndcharFromFrame:
						frameBuf[numberOfChars++] = endFrame;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <getFrame+0x140>)
 8000b00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b04:	b293      	uxth	r3, r2
 8000b06:	3301      	adds	r3, #1
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b219      	sxth	r1, r3
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <getFrame+0x140>)
 8000b0e:	8019      	strh	r1, [r3, #0]
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <getFrame+0x148>)
 8000b12:	217d      	movs	r1, #125	; 0x7d
 8000b14:	5499      	strb	r1, [r3, r2]
						break;
 8000b16:	e004      	b.n	8000b22 <getFrame+0xb2>
					default:
						numberOfChars = -1;
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <getFrame+0x140>)
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	801a      	strh	r2, [r3, #0]
						break;
 8000b20:	bf00      	nop
				}
				tildeOccured = 0;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <getFrame+0x144>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e032      	b.n	8000b90 <getFrame+0x120>
			}
			else {
				if (charFromFrame == codingChar) {
 8000b2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b2e:	2b60      	cmp	r3, #96	; 0x60
 8000b30:	d103      	bne.n	8000b3a <getFrame+0xca>
					tildeOccured = 1;
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <getFrame+0x144>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e02a      	b.n	8000b90 <getFrame+0x120>
				}
				else if (charFromFrame == endFrame) {
 8000b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b3e:	2b7d      	cmp	r3, #125	; 0x7d
 8000b40:	d115      	bne.n	8000b6e <getFrame+0xfe>
					ret = numberOfChars;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <getFrame+0x140>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	81bb      	strh	r3, [r7, #12]
					numberOfChars = -1;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <getFrame+0x140>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	801a      	strh	r2, [r3, #0]
					if (ret >= (frameMinSize-2)) {
 8000b50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	dd1b      	ble.n	8000b90 <getFrame+0x120>
						memcpy(bufferedFrame, frameBuf, ret + 1);
 8000b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4915      	ldr	r1, [pc, #84]	; (8000bb8 <getFrame+0x148>)
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f006 f9d8 	bl	8006f18 <memcpy>
						return ret;
 8000b68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b6c:	e01c      	b.n	8000ba8 <getFrame+0x138>
					}
				}
				else {
					frameBuf[numberOfChars] = charFromFrame;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <getFrame+0x140>)
 8000b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b74:	461a      	mov	r2, r3
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	b2d9      	uxtb	r1, r3
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <getFrame+0x148>)
 8000b7c:	5499      	strb	r1, [r3, r2]
					numberOfChars++;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <getFrame+0x140>)
 8000b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3301      	adds	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <getFrame+0x140>)
 8000b8e:	801a      	strh	r2, [r3, #0]
				}
			}
			if (numberOfChars >= (frameMaxSize - 2)) {
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <getFrame+0x140>)
 8000b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b96:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000b9a:	dd03      	ble.n	8000ba4 <getFrame+0x134>
				numberOfChars = -1;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <getFrame+0x140>)
 8000b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba2:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000024 	.word	0x20000024
 8000bb4:	20000670 	.word	0x20000670
 8000bb8:	20000674 	.word	0x20000674

08000bbc <analizeFrame>:


uint8_t analizeFrame(char *bufferedFrame, int16_t len, char *sender_add) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	817b      	strh	r3, [r7, #10]
	uint8_t intCRC;
	uint16_t commandLength;
	uint8_t i;
	uint8_t crc_temp;

	if (strncmp(bufferedFrame, device_address, 3) == 0) {
 8000bca:	2203      	movs	r2, #3
 8000bcc:	4947      	ldr	r1, [pc, #284]	; (8000cec <analizeFrame+0x130>)
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f006 f964 	bl	8006e9c <strncmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8082 	bne.w	8000ce0 <analizeFrame+0x124>
		//Pobranie i sprawdzenie nadawcy
		memcpy(sender_add, bufferedFrame + 3, 3);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3303      	adds	r3, #3
 8000be0:	2203      	movs	r2, #3
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f006 f997 	bl	8006f18 <memcpy>
		for (i = 0; i < 3; ++i) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	77fb      	strb	r3, [r7, #31]
 8000bee:	e01c      	b.n	8000c2a <analizeFrame+0x6e>
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000bf0:	7ffb      	ldrb	r3, [r7, #31]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	d905      	bls.n	8000c08 <analizeFrame+0x4c>
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b5a      	cmp	r3, #90	; 0x5a
 8000c06:	d90d      	bls.n	8000c24 <analizeFrame+0x68>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c08:	7ffb      	ldrb	r3, [r7, #31]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000c10:	2b60      	cmp	r3, #96	; 0x60
 8000c12:	d905      	bls.n	8000c20 <analizeFrame+0x64>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c14:	7ffb      	ldrb	r3, [r7, #31]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b7a      	cmp	r3, #122	; 0x7a
 8000c1e:	d901      	bls.n	8000c24 <analizeFrame+0x68>
				return 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e05e      	b.n	8000ce2 <analizeFrame+0x126>
		for (i = 0; i < 3; ++i) {
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	3301      	adds	r3, #1
 8000c28:	77fb      	strb	r3, [r7, #31]
 8000c2a:	7ffb      	ldrb	r3, [r7, #31]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d9df      	bls.n	8000bf0 <analizeFrame+0x34>
			}
		}
		//Pobranie i sprawdzenie zakresu znaków (dla crc)
		//string crc - wartość crc zapisana w postaci znakowej np."25"
		memcpy(stringCRC, bufferedFrame + len - 2, 2);
 8000c30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c34:	3b02      	subs	r3, #2
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	82bb      	strh	r3, [r7, #20]
		stringCRC[2] = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < 2; ++i) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	e012      	b.n	8000c70 <analizeFrame+0xb4>
			if (!(stringCRC[i] >= 0x30 && stringCRC[i] <= 0x39)) {
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	3320      	adds	r3, #32
 8000c4e:	443b      	add	r3, r7
 8000c50:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c54:	2b2f      	cmp	r3, #47	; 0x2f
 8000c56:	d906      	bls.n	8000c66 <analizeFrame+0xaa>
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	3320      	adds	r3, #32
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c62:	2b39      	cmp	r3, #57	; 0x39
 8000c64:	d901      	bls.n	8000c6a <analizeFrame+0xae>
				return 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e03b      	b.n	8000ce2 <analizeFrame+0x126>
		for (i = 0; i < 2; ++i) {
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d9e9      	bls.n	8000c4a <analizeFrame+0x8e>
			}
		}
		//Pobranie danych
		//Pobieranie długości danych (długość ramki - stałe elementy)
		commandLength = len - 8;
 8000c76:	897b      	ldrh	r3, [r7, #10]
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	83bb      	strh	r3, [r7, #28]
		memcpy(bufferedFrame, bufferedFrame + 6, commandLength);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3306      	adds	r3, #6
 8000c80:	8bba      	ldrh	r2, [r7, #28]
 8000c82:	4619      	mov	r1, r3
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f006 f947 	bl	8006f18 <memcpy>
		//string null-terminated na końcu
		bufferedFrame[commandLength] = 0;
 8000c8a:	8bbb      	ldrh	r3, [r7, #28]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

		//Sprawdzenie konkretnych wartości CRC
		intCRC = atoi(stringCRC);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f006 f827 	bl	8006cec <atoi>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	76fb      	strb	r3, [r7, #27]
		if ((crc_temp = CRC_100(bufferedFrame, commandLength)) != intCRC) {
 8000ca2:	8bbb      	ldrh	r3, [r7, #28]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f925 	bl	8000ef8 <CRC_100>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	76bb      	strb	r3, [r7, #26]
 8000cb2:	7eba      	ldrb	r2, [r7, #26]
 8000cb4:	7efb      	ldrb	r3, [r7, #27]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d010      	beq.n	8000cdc <analizeFrame+0x120>
			sprintf(wrong, "WRONG_CRC_%02d;", crc_temp);
 8000cba:	7ebb      	ldrb	r3, [r7, #26]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <analizeFrame+0x134>)
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <analizeFrame+0x138>)
 8000cc2:	f006 f8a3 	bl	8006e0c <siprintf>
			sendFrame(sender_add, wrong, strlen(wrong));
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <analizeFrame+0x138>)
 8000cc8:	f7ff fa8a 	bl	80001e0 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <analizeFrame+0x138>)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f810 	bl	8000cf8 <sendFrame>
			return 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e002      	b.n	8000ce2 <analizeFrame+0x126>
		}
		return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <analizeFrame+0x126>
	}
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	080077fc 	.word	0x080077fc
 8000cf0:	080077d8 	.word	0x080077d8
 8000cf4:	20000648 	.word	0x20000648

08000cf8 <sendFrame>:

void sendFrame(char dst[4], char *com, uint8_t com_len) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d04:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d08:	6018      	str	r0, [r3, #0]
 8000d0a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d0e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d12:	6019      	str	r1, [r3, #0]
 8000d14:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d18:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d1c:	701a      	strb	r2, [r3, #0]
	char frameToSend[frameMin + 510 + 1];
	uint16_t codeCommandLength;
	uint8_t crc;
	char codeCommand[510];

	codeCommandLength = code_Command(com, codeCommand, com_len);
 8000d1e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d22:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	f107 0114 	add.w	r1, r7, #20
 8000d2c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d30:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	f000 f87f 	bl	8000e38 <code_Command>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

	frameToSend[0] = startFrame;
 8000d40:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d44:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000d48:	227b      	movs	r2, #123	; 0x7b
 8000d4a:	701a      	strb	r2, [r3, #0]
	memcpy(frameToSend + 1, dst, 3);
 8000d4c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d50:	3301      	adds	r3, #1
 8000d52:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000d56:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	6809      	ldr	r1, [r1, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 f8da 	bl	8006f18 <memcpy>
	memcpy(frameToSend + 1 + 3, device_address, 3);
 8000d64:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	4930      	ldr	r1, [pc, #192]	; (8000e30 <sendFrame+0x138>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 f8d2 	bl	8006f18 <memcpy>

	memcpy(frameToSend + 1 + 3 + 3, codeCommand, codeCommandLength);
 8000d74:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d78:	3307      	adds	r3, #7
 8000d7a:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000d7e:	f107 0114 	add.w	r1, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 f8c8 	bl	8006f18 <memcpy>

	//długość przed zakodowaniem zakodowaniem znaków
	crc = CRC_100(com, com_len);
 8000d88:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d8c:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d96:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f000 f8ab 	bl	8000ef8 <CRC_100>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	// 78/10 =7
	// 7+48 = 55
	// "7"
	frameToSend[1 + 3 + 3 + codeCommandLength] = crc / 10 + 48;
 8000da8:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <sendFrame+0x13c>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dba:	3307      	adds	r3, #7
 8000dbc:	3230      	adds	r2, #48	; 0x30
 8000dbe:	b2d1      	uxtb	r1, r2
 8000dc0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000dc4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000dc8:	54d1      	strb	r1, [r2, r3]
	// 78 % 10 = 8
	// 8 + 48 = 56
	// "8"
	frameToSend[1 + 3 + 3  + codeCommandLength + 1] = crc % 10 + 48;
 8000dca:	f897 241d 	ldrb.w	r2, [r7, #1053]	; 0x41d
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <sendFrame+0x13c>)
 8000dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd4:	08d9      	lsrs	r1, r3, #3
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000de6:	3308      	adds	r3, #8
 8000de8:	3230      	adds	r2, #48	; 0x30
 8000dea:	b2d1      	uxtb	r1, r2
 8000dec:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000df0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000df4:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 2] = endFrame;
 8000df6:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dfa:	3309      	adds	r3, #9
 8000dfc:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e00:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e04:	217d      	movs	r1, #125	; 0x7d
 8000e06:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 3] = 0;
 8000e08:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e12:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e16:	2100      	movs	r1, #0
 8000e18:	54d1      	strb	r1, [r2, r3]

	USART_fSend(frameToSend);
 8000e1a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fd46 	bl	80008b0 <USART_fSend>
}
 8000e24:	bf00      	nop
 8000e26:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	080077fc 	.word	0x080077fc
 8000e34:	cccccccd 	.word	0xcccccccd

08000e38 <code_Command>:

//Przerobienie znaków początku, końca i znaku kodującego na nadające się do przesyłania w ramce
int16_t code_Command(char *src, char *dst, uint8_t com_len) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	uint16_t j;
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000e46:	2300      	movs	r3, #0
 8000e48:	82fb      	strh	r3, [r7, #22]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	82bb      	strh	r3, [r7, #20]
 8000e4e:	e045      	b.n	8000edc <code_Command+0xa4>

		switch (src[i]) {
 8000e50:	8afb      	ldrh	r3, [r7, #22]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7d      	cmp	r3, #125	; 0x7d
 8000e5a:	d022      	beq.n	8000ea2 <code_Command+0x6a>
 8000e5c:	2b7d      	cmp	r3, #125	; 0x7d
 8000e5e:	dc2e      	bgt.n	8000ebe <code_Command+0x86>
 8000e60:	2b60      	cmp	r3, #96	; 0x60
 8000e62:	d002      	beq.n	8000e6a <code_Command+0x32>
 8000e64:	2b7b      	cmp	r3, #123	; 0x7b
 8000e66:	d00e      	beq.n	8000e86 <code_Command+0x4e>
 8000e68:	e029      	b.n	8000ebe <code_Command+0x86>
		case codingChar:
			dst[j++] = codingChar;
 8000e6a:	8abb      	ldrh	r3, [r7, #20]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	82ba      	strh	r2, [r7, #20]
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	2260      	movs	r2, #96	; 0x60
 8000e78:	701a      	strb	r2, [r3, #0]
			dst[j] = codingChar;
 8000e7a:	8abb      	ldrh	r3, [r7, #20]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2260      	movs	r2, #96	; 0x60
 8000e82:	701a      	strb	r2, [r3, #0]
			break;
 8000e84:	e024      	b.n	8000ed0 <code_Command+0x98>
		case startFrame:
			dst[j++] = codingChar;
 8000e86:	8abb      	ldrh	r3, [r7, #20]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	82ba      	strh	r2, [r7, #20]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	4413      	add	r3, r2
 8000e92:	2260      	movs	r2, #96	; 0x60
 8000e94:	701a      	strb	r2, [r3, #0]
			dst[j] = '[';
 8000e96:	8abb      	ldrh	r3, [r7, #20]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	225b      	movs	r2, #91	; 0x5b
 8000e9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ea0:	e016      	b.n	8000ed0 <code_Command+0x98>
		case endFrame:
			dst[j++] = codingChar;
 8000ea2:	8abb      	ldrh	r3, [r7, #20]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	82ba      	strh	r2, [r7, #20]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	2260      	movs	r2, #96	; 0x60
 8000eb0:	701a      	strb	r2, [r3, #0]
			dst[j] = ']';
 8000eb2:	8abb      	ldrh	r3, [r7, #20]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	225d      	movs	r2, #93	; 0x5d
 8000eba:	701a      	strb	r2, [r3, #0]
			break;
 8000ebc:	e008      	b.n	8000ed0 <code_Command+0x98>
		default:
			dst[j] = src[i];
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	441a      	add	r2, r3
 8000ec4:	8abb      	ldrh	r3, [r7, #20]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	440b      	add	r3, r1
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	701a      	strb	r2, [r3, #0]
			break;
 8000ece:	bf00      	nop
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000ed0:	8afb      	ldrh	r3, [r7, #22]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	82fb      	strh	r3, [r7, #22]
 8000ed6:	8abb      	ldrh	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	82bb      	strh	r3, [r7, #20]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	8afa      	ldrh	r2, [r7, #22]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d3b4      	bcc.n	8000e50 <code_Command+0x18>
		}
	}
	return j;
 8000ee6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <CRC_100>:

uint8_t CRC_100(char *src, uint8_t len) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t temp = src[0];
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e009      	b.n	8000f24 <CRC_100+0x2c>
		//xor, ponieważ or da nam same 1, and same 0
		temp ^= src[i];
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	4053      	eors	r3, r2
 8000f1c:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3f1      	bcc.n	8000f10 <CRC_100+0x18>
	}
	temp %= 100;
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <CRC_100+0x58>)
 8000f30:	fba2 1203 	umull	r1, r2, r2, r3
 8000f34:	0952      	lsrs	r2, r2, #5
 8000f36:	2164      	movs	r1, #100	; 0x64
 8000f38:	fb01 f202 	mul.w	r2, r1, r2
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	73bb      	strb	r3, [r7, #14]
	return temp;
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	51eb851f 	.word	0x51eb851f

08000f54 <analizeCommend>:

void analizeCommend(char* com, uint8_t len, char* sender_add) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	72fb      	strb	r3, [r7, #11]
	if (strncmp(com, "GetSurvey()", (unsigned)11) == 0) {
 8000f62:	220b      	movs	r2, #11
 8000f64:	4917      	ldr	r1, [pc, #92]	; (8000fc4 <analizeCommend+0x70>)
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f005 ff98 	bl	8006e9c <strncmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d123      	bne.n	8000fba <analizeCommend+0x66>
		//GetSurvey();
		char stringDistance[20];
		sprintf(stringDistance, "%lu", (unsigned long)distance_sensor.distance_cm);
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <analizeCommend+0x74>)
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4914      	ldr	r1, [pc, #80]	; (8000fcc <analizeCommend+0x78>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 ff45 	bl	8006e0c <siprintf>
		strcat(stringDistance, "cm");
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f92a 	bl	80001e0 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4413      	add	r3, r2
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <analizeCommend+0x7c>)
 8000f98:	8811      	ldrh	r1, [r2, #0]
 8000f9a:	7892      	ldrb	r2, [r2, #2]
 8000f9c:	8019      	strh	r1, [r3, #0]
 8000f9e:	709a      	strb	r2, [r3, #2]
		sendFrame(sender_add, stringDistance, strlen(stringDistance));
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f91b 	bl	80001e0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fe9f 	bl	8000cf8 <sendFrame>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	080077e8 	.word	0x080077e8
 8000fc8:	2000065c 	.word	0x2000065c
 8000fcc:	080077f4 	.word	0x080077f4
 8000fd0:	080077f8 	.word	0x080077f8

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x44>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001016:	2007      	movs	r0, #7
 8001018:	f000 fb38 	bl	800168c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_TIM_Base_MspInit+0x158>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d15b      	bne.n	8001102 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104a:	4b4e      	ldr	r3, [pc, #312]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a4d      	ldr	r2, [pc, #308]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b48      	ldr	r3, [pc, #288]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a47      	ldr	r2, [pc, #284]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800108c:	2306      	movs	r3, #6
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f000 fd63 	bl	8001b64 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010a0:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_TIM_Base_MspInit+0x164>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010c8:	2220      	movs	r2, #32
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80010d4:	482c      	ldr	r0, [pc, #176]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010d6:	f000 fb1a 	bl	800170e <HAL_DMA_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 80010e0:	f7ff ff78 	bl	8000fd4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_TIM_Base_MspInit+0x160>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	201b      	movs	r0, #27
 80010f6:	f000 fad4 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010fa:	201b      	movs	r0, #27
 80010fc:	f000 faed 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001100:	e039      	b.n	8001176 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110a:	d134      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	61d3      	str	r3, [r2, #28]
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_TIM_Base_MspInit+0x15c>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_TIM_Base_MspInit+0x16c>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 800112c:	2210      	movs	r2, #16
 800112e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 800113e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001142:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 800114e:	2220      	movs	r2, #32
 8001150:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001158:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 800115c:	f000 fad7 	bl	800170e <HAL_DMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 8001166:	f7ff ff35 	bl	8000fd4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_TIM_Base_MspInit+0x168>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000
 8001188:	20000138 	.word	0x20000138
 800118c:	4002001c 	.word	0x4002001c
 8001190:	2000017c 	.word	0x2000017c
 8001194:	40020008 	.word	0x40020008

08001198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d11d      	bne.n	80011f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0x68>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x68>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0x68>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 80011d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80011e4:	230a      	movs	r3, #10
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f000 fcb7 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_UART_MspInit+0x8c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d130      	bne.n	8001288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x90>)
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6153      	str	r3, [r2, #20]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x90>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001266:	2307      	movs	r3, #7
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f000 fc76 	bl	8001b64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2026      	movs	r0, #38	; 0x26
 800127e:	f000 fa10 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001282:	2026      	movs	r0, #38	; 0x26
 8001284:	f000 fa29 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	40021000 	.word	0x40021000

08001298 <NMI_Handler>:
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	f000 f8e2 	bl	80014ac <HAL_IncTick>
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <DMA1_Channel1_IRQHandler>:
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <DMA1_Channel1_IRQHandler+0x10>)
 80012f2:	f000 fb29 	bl	8001948 <HAL_DMA_IRQHandler>
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000017c 	.word	0x2000017c

08001300 <DMA1_Channel2_IRQHandler>:
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <DMA1_Channel2_IRQHandler+0x10>)
 8001306:	f000 fb1f 	bl	8001948 <HAL_DMA_IRQHandler>
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000138 	.word	0x20000138

08001314 <TIM1_CC_IRQHandler>:
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM1_CC_IRQHandler+0x10>)
 800131a:	f002 fdaa 	bl	8003e72 <HAL_TIM_IRQHandler>
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000a0 	.word	0x200000a0

08001328 <USART2_IRQHandler>:
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <USART2_IRQHandler+0x10>)
 800132e:	f004 fa83 	bl	8005838 <HAL_UART_IRQHandler>
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001c0 	.word	0x200001c0

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f005 fda8 	bl	8006ec0 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20010000 	.word	0x20010000
 800139c:	00000400 	.word	0x00000400
 80013a0:	2000077c 	.word	0x2000077c
 80013a4:	200008d0 	.word	0x200008d0

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f005 fd67 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7fe ff81 	bl	8000304 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001410:	08007974 	.word	0x08007974
  ldr r2, =_sbss
 8001414:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001418:	200008cc 	.word	0x200008cc

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f92b 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fdd0 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f943 	bl	80016f6 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f90b 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000028 	.word	0x20000028
 80014a4:	20000030 	.word	0x20000030
 80014a8:	2000002c 	.word	0x2000002c

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000030 	.word	0x20000030
 80014d0:	20000780 	.word	0x20000780

080014d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000780 	.word	0x20000780

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e037      	b.n	8001794 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800173a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800173e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f9b8 	bl	8001aec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}  
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Start_IT+0x20>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e04a      	b.n	8001852 <HAL_DMA_Start_IT+0xb6>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d13a      	bne.n	8001844 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2202      	movs	r2, #2
 80017d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f94b 	bl	8001a8e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 020e 	orr.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e00f      	b.n	8001832 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 020a 	orr.w	r2, r2, #10
 8001820:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0204 	bic.w	r2, r2, #4
 8001830:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e005      	b.n	8001850 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001850:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001868:	2b02      	cmp	r3, #2
 800186a:	d008      	beq.n	800187e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e020      	b.n	80018c0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 020e 	bic.w	r2, r2, #14
 800188c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d005      	beq.n	80018ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2204      	movs	r2, #4
 80018e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e027      	b.n	800193e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 020e 	bic.w	r2, r2, #14
 80018fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0201 	bic.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
    } 
  }
  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2204      	movs	r2, #4
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d024      	beq.n	80019ba <HAL_DMA_IRQHandler+0x72>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01f      	beq.n	80019ba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	2104      	movs	r1, #4
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d06a      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	e065      	b.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2202      	movs	r2, #2
 80019c0:	409a      	lsls	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d02c      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xdc>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d027      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10b      	bne.n	80019fa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 020a 	bic.w	r2, r2, #10
 80019f0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	2102      	movs	r1, #2
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d035      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a22:	e030      	b.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d028      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d023      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	4798      	blx	r3
    }
  }
}  
 8001a84:	e7ff      	b.n	8001a86 <HAL_DMA_IRQHandler+0x13e>
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d108      	bne.n	8001ace <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001acc:	e007      	b.n	8001ade <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	60da      	str	r2, [r3, #12]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <DMA_CalcBaseAndBitshift+0x60>)
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d80f      	bhi.n	8001b20 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <DMA_CalcBaseAndBitshift+0x64>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <DMA_CalcBaseAndBitshift+0x68>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b1c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b1e:	e00e      	b.n	8001b3e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <DMA_CalcBaseAndBitshift+0x70>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <DMA_CalcBaseAndBitshift+0x68>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	009a      	lsls	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <DMA_CalcBaseAndBitshift+0x74>)
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40020407 	.word	0x40020407
 8001b50:	bffdfff8 	.word	0xbffdfff8
 8001b54:	cccccccd 	.word	0xcccccccd
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	bffdfbf8 	.word	0xbffdfbf8
 8001b60:	40020400 	.word	0x40020400

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e160      	b.n	8001e36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8152 	beq.w	8001e30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d005      	beq.n	8001ba4 <HAL_GPIO_Init+0x40>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d130      	bne.n	8001c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bda:	2201      	movs	r2, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d017      	beq.n	8001c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d123      	bne.n	8001c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	6939      	ldr	r1, [r7, #16]
 8001c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80ac 	beq.w	8001e30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_GPIO_Init+0x2f0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_GPIO_Init+0x2f0>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf0:	4a59      	ldr	r2, [pc, #356]	; (8001e58 <HAL_GPIO_Init+0x2f4>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1a:	d025      	beq.n	8001d68 <HAL_GPIO_Init+0x204>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x2f8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01f      	beq.n	8001d64 <HAL_GPIO_Init+0x200>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x2fc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d019      	beq.n	8001d60 <HAL_GPIO_Init+0x1fc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x300>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_Init+0x1f8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x304>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_Init+0x1f4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x308>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x1f0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_Init+0x1ec>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e00c      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d50:	2307      	movs	r3, #7
 8001d52:	e00a      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7a:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x2f4>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dac:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f ae97 	bne.w	8001b74 <HAL_GPIO_Init+0x10>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000c00 	.word	0x48000c00
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	48001400 	.word	0x48001400
 8001e70:	48001800 	.word	0x48001800
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f001 b83a 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 816f 	beq.w	80021c2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ee4:	4bb5      	ldr	r3, [pc, #724]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef0:	4bb2      	ldr	r3, [pc, #712]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d15c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
 8001efc:	4baf      	ldr	r3, [pc, #700]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d155      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
 8001f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_OscConfig+0x94>
 8001f36:	4ba1      	ldr	r3, [pc, #644]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e015      	b.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f58:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f64:	4b95      	ldr	r3, [pc, #596]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f6c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001f70:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001f7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8111 	beq.w	80021c0 <HAL_RCC_OscConfig+0x318>
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8108 	bne.w	80021c0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f000 bfc6 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e036      	b.n	8002044 <HAL_RCC_OscConfig+0x19c>
 8001fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x158>
 8001fe6:	4b75      	ldr	r3, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a74      	ldr	r2, [pc, #464]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e021      	b.n	8002044 <HAL_RCC_OscConfig+0x19c>
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x184>
 8002012:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x19c>
 800202c:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a62      	ldr	r2, [pc, #392]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d059      	beq.n	8002108 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fa3e 	bl	80014d4 <HAL_GetTick>
 8002058:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205e:	f7ff fa39 	bl	80014d4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d902      	bls.n	8002074 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	f000 bf67 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002088:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x22a>
 80020a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80020ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80020da:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80020e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f042 0220 	orr.w	r2, r2, #32
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0ab      	beq.n	800205e <HAL_RCC_OscConfig+0x1b6>
 8002106:	e05c      	b.n	80021c2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff f9e4 	bl	80014d4 <HAL_GetTick>
 800210c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002112:	f7ff f9df 	bl	80014d4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d902      	bls.n	8002128 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	f000 bf0d 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800213c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0x2b2>
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x2de>
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002176:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_RCC_OscConfig+0x314>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800218a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800218e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800219a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1ab      	bne.n	8002112 <HAL_RCC_OscConfig+0x26a>
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_OscConfig+0x31a>
 80021bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 817f 	beq.w	80024d6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021d8:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021e4:	4ba4      	ldr	r3, [pc, #656]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d173      	bne.n	80022d8 <HAL_RCC_OscConfig+0x430>
 80021f0:	4ba1      	ldr	r3, [pc, #644]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80021f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021fc:	d16c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x430>
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002210:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0x386>
 8002228:	4b93      	ldr	r3, [pc, #588]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	e013      	b.n	8002256 <HAL_RCC_OscConfig+0x3ae>
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002246:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2202      	movs	r2, #2
 8002258:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800225c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002268:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCC_OscConfig+0x3f6>
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d002      	beq.n	800229e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 be52 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	21f8      	movs	r1, #248	; 0xf8
 80022b4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80022bc:	fa91 f1a1 	rbit	r1, r1
 80022c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80022c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022c8:	fab1 f181 	clz	r1, r1
 80022cc:	b2c9      	uxtb	r1, r1
 80022ce:	408b      	lsls	r3, r1
 80022d0:	4969      	ldr	r1, [pc, #420]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e0fe      	b.n	80024d6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8088 	beq.w	80023fa <HAL_RCC_OscConfig+0x552>
 80022ea:	2301      	movs	r3, #1
 80022ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80022fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800230a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	461a      	mov	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7ff f8dd 	bl	80014d4 <HAL_GetTick>
 800231a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff f8d8 	bl	80014d4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d902      	bls.n	8002336 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	f000 be06 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002348:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
 8002360:	4b45      	ldr	r3, [pc, #276]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e013      	b.n	800238e <HAL_RCC_OscConfig+0x4e6>
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800237e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	2202      	movs	r2, #2
 8002390:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002394:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002398:	fa92 f2a2 	rbit	r2, r2
 800239c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80023a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023a4:	fab2 f282 	clz	r2, r2
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f042 0220 	orr.w	r2, r2, #32
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f002 021f 	and.w	r2, r2, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0af      	beq.n	8002320 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	21f8      	movs	r1, #248	; 0xf8
 80023d6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80023de:	fa91 f1a1 	rbit	r1, r1
 80023e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80023e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023ea:	fab1 f181 	clz	r1, r1
 80023ee:	b2c9      	uxtb	r1, r1
 80023f0:	408b      	lsls	r3, r1
 80023f2:	4921      	ldr	r1, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e06d      	b.n	80024d6 <HAL_RCC_OscConfig+0x62e>
 80023fa:	2301      	movs	r3, #1
 80023fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800240c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	461a      	mov	r2, r3
 8002422:	2300      	movs	r3, #0
 8002424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff f855 	bl	80014d4 <HAL_GetTick>
 800242a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff f850 	bl	80014d4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d902      	bls.n	8002446 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	f000 bd7e 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002458:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x5d4>
 8002470:	4b01      	ldr	r3, [pc, #4]	; (8002478 <HAL_RCC_OscConfig+0x5d0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	e016      	b.n	80024a4 <HAL_RCC_OscConfig+0x5fc>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002494:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024a0:	4bbf      	ldr	r3, [pc, #764]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2202      	movs	r2, #2
 80024a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80024b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ac      	bne.n	8002430 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8113 	beq.w	8002712 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d07c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x74e>
 80024fc:	2301      	movs	r3, #1
 80024fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800250e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4ba2      	ldr	r3, [pc, #648]	; (80027a4 <HAL_RCC_OscConfig+0x8fc>)
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe ffd5 	bl	80014d4 <HAL_GetTick>
 800252a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe ffd0 	bl	80014d4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d902      	bls.n	8002546 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	f000 bcfe 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002546:	2302      	movs	r3, #2
 8002548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002566:	2202      	movs	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025b2:	2102      	movs	r1, #2
 80025b4:	6019      	str	r1, [r3, #0]
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f1a3 	rbit	r1, r3
 80025c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025cc:	6019      	str	r1, [r3, #0]
  return result;
 80025ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d09d      	beq.n	8002530 <HAL_RCC_OscConfig+0x688>
 80025f4:	e08d      	b.n	8002712 <HAL_RCC_OscConfig+0x86a>
 80025f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002614:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002618:	601a      	str	r2, [r3, #0]
  return result;
 800261a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002622:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCC_OscConfig+0x8fc>)
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe ff4c 	bl	80014d4 <HAL_GetTick>
 800263c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe ff47 	bl	80014d4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	f000 bc75 	b.w	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002676:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002684:	2202      	movs	r2, #2
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026a8:	2202      	movs	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026d0:	2102      	movs	r1, #2
 80026d2:	6019      	str	r1, [r3, #0]
 80026d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f1a3 	rbit	r1, r3
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026ea:	6019      	str	r1, [r3, #0]
  return result;
 80026ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d197      	bne.n	8002642 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 81a5 	beq.w	8002a72 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d116      	bne.n	8002768 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_RCC_OscConfig+0x8f8>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800274e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002760:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_RCC_OscConfig+0x900>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d121      	bne.n	80027b8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_RCC_OscConfig+0x900>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <HAL_RCC_OscConfig+0x900>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002780:	f7fe fea8 	bl	80014d4 <HAL_GetTick>
 8002784:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e010      	b.n	80027ac <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fea3 	bl	80014d4 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d908      	bls.n	80027ac <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e3d1      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	10908120 	.word	0x10908120
 80027a8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <HAL_RCC_OscConfig+0xb3c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0e8      	beq.n	800278a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x92e>
 80027c8:	4b87      	ldr	r3, [pc, #540]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a86      	ldr	r2, [pc, #536]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e035      	b.n	8002842 <HAL_RCC_OscConfig+0x99a>
 80027d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x958>
 80027e6:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a7f      	ldr	r2, [pc, #508]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	4b7d      	ldr	r3, [pc, #500]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a7c      	ldr	r2, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	e020      	b.n	8002842 <HAL_RCC_OscConfig+0x99a>
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x982>
 8002810:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a74      	ldr	r2, [pc, #464]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a71      	ldr	r2, [pc, #452]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x99a>
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a6b      	ldr	r2, [pc, #428]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8081 	beq.w	8002956 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fe3e 	bl	80014d4 <HAL_GetTick>
 8002858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fe39 	bl	80014d4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e365      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002886:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002894:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028bc:	601a      	str	r2, [r3, #0]
  return result;
 80028be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0xa3a>
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0xa62>
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002900:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800290e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002912:	2102      	movs	r1, #2
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800291a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fa92 f1a2 	rbit	r1, r2
 8002924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002928:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002932:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d084      	beq.n	800285e <HAL_RCC_OscConfig+0x9b6>
 8002954:	e083      	b.n	8002a5e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7fe fdbd 	bl	80014d4 <HAL_GetTick>
 800295a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe fdb8 	bl	80014d4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e2e4      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002988:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002996:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0xb44>
 80029de:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <HAL_RCC_OscConfig+0xb40>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	e017      	b.n	8002a14 <HAL_RCC_OscConfig+0xb6c>
 80029e4:	40007000 	.word	0x40007000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	4bb3      	ldr	r3, [pc, #716]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a18:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	fa92 f1a2 	rbit	r1, r2
 8002a2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a32:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a36:	6011      	str	r1, [r2, #0]
  return result;
 8002a38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a3c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d180      	bne.n	8002960 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d105      	bne.n	8002a72 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b9e      	ldr	r3, [pc, #632]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a9d      	ldr	r2, [pc, #628]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a70:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 825e 	beq.w	8002f40 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a84:	4b96      	ldr	r3, [pc, #600]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	f000 821f 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	f040 8170 	bne.w	8002d84 <HAL_RCC_OscConfig+0xedc>
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ad2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fcf3 	bl	80014d4 <HAL_GetTick>
 8002aee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e009      	b.n	8002b08 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fcee 	bl	80014d4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e21c      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b28:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b2c:	601a      	str	r2, [r3, #0]
  return result;
 8002b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0xcaa>
 8002b4c:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e027      	b.n	8002ba2 <HAL_RCC_OscConfig+0xcfa>
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b98:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ba6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002baa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bae:	6011      	str	r1, [r2, #0]
 8002bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002bc6:	6011      	str	r1, [r2, #0]
  return result;
 8002bc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bcc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d182      	bne.n	8002af4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f023 020f 	bic.w	r2, r3, #15
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a19      	ldr	r1, [r3, #32]
 8002c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	492d      	ldr	r1, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fa93 f2a3 	rbit	r2, r3
 8002c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c54:	601a      	str	r2, [r3, #0]
  return result;
 8002c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c5e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	461a      	mov	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fc2d 	bl	80014d4 <HAL_GetTick>
 8002c7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7e:	e009      	b.n	8002c94 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fc28 	bl	80014d4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e156      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cb8:	601a      	str	r2, [r3, #0]
  return result;
 8002cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xe3c>
 8002cd8:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <HAL_RCC_OscConfig+0xe38>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	e02a      	b.n	8002d34 <HAL_RCC_OscConfig+0xe8c>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b86      	ldr	r3, [pc, #536]	; (8002f4c <HAL_RCC_OscConfig+0x10a4>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d40:	6011      	str	r1, [r2, #0]
 8002d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	fa92 f1a2 	rbit	r1, r2
 8002d50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d54:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d58:	6011      	str	r1, [r2, #0]
  return result;
 8002d5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d5e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f43f af7f 	beq.w	8002c80 <HAL_RCC_OscConfig+0xdd8>
 8002d82:	e0dd      	b.n	8002f40 <HAL_RCC_OscConfig+0x1098>
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002da8:	601a      	str	r2, [r3, #0]
  return result;
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002db2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fb83 	bl	80014d4 <HAL_GetTick>
 8002dce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fb7e 	bl	80014d4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0ac      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
 8002de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e0c:	601a      	str	r2, [r3, #0]
  return result;
 8002e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0xf8a>
 8002e2c:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_OscConfig+0x10a4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_OscConfig+0xfda>
 8002e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e78:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCC_OscConfig+0x10a4>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e8e:	6011      	str	r1, [r2, #0]
 8002e90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e94:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fa92 f1a2 	rbit	r1, r2
 8002e9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ea2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002ea6:	6011      	str	r1, [r2, #0]
  return result;
 8002ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eac:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d182      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xf2c>
 8002ece:	e037      	b.n	8002f40 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e02e      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_OscConfig+0x10a4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_RCC_OscConfig+0x10a4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ef8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d117      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f10:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09e      	sub	sp, #120	; 0x78
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e162      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b90      	ldr	r3, [pc, #576]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b8d      	ldr	r3, [pc, #564]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	498b      	ldr	r1, [pc, #556]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e14a      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	497f      	ldr	r1, [pc, #508]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80dc 	beq.w	800317c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d13c      	bne.n	8003046 <HAL_RCC_ClockConfig+0xf6>
 8002fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xa6>
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e00f      	b.n	8003016 <HAL_RCC_ClockConfig+0xc6>
 8002ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
 800300a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800301a:	65ba      	str	r2, [r7, #88]	; 0x58
 800301c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f042 0220 	orr.w	r2, r2, #32
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f002 021f 	and.w	r2, r2, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f202 	lsl.w	r2, r1, r2
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d17b      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0f3      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d13c      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x178>
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800305c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_ClockConfig+0x128>
 8003072:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e00f      	b.n	8003098 <HAL_RCC_ClockConfig+0x148>
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309c:	63ba      	str	r2, [r7, #56]	; 0x38
 800309e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13a      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b2      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
 80030c8:	2302      	movs	r3, #2
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	e00d      	b.n	800310c <HAL_RCC_ClockConfig+0x1bc>
 80030f0:	2302      	movs	r3, #2
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	2302      	movs	r3, #2
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2202      	movs	r2, #2
 800310e:	61ba      	str	r2, [r7, #24]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	fa92 f2a2 	rbit	r2, r2
 8003116:	617a      	str	r2, [r7, #20]
  return result;
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0220 	orr.w	r2, r2, #32
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e079      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	491a      	ldr	r1, [pc, #104]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe f9c2 	bl	80014d4 <HAL_GetTick>
 8003150:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe f9be 	bl	80014d4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e061      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d214      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	4906      	ldr	r1, [pc, #24]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e040      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	491a      	ldr	r1, [pc, #104]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031f2:	f000 f829 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003200:	22f0      	movs	r2, #240	; 0xf0
 8003202:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	60fa      	str	r2, [r7, #12]
  return result;
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	40d3      	lsrs	r3, r2
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x2ec>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	fa21 f303 	lsr.w	r3, r1, r3
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <HAL_RCC_ClockConfig+0x2f0>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_ClockConfig+0x2f4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f910 	bl	800144c <HAL_InitTick>
  
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3778      	adds	r7, #120	; 0x78
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	08007800 	.word	0x08007800
 8003240:	20000028 	.word	0x20000028
 8003244:	2000002c 	.word	0x2000002c

08003248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x30>
 8003272:	2b08      	cmp	r3, #8
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x36>
 8003276:	e03f      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_GetSysClockFreq+0xc8>)
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	e03f      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003284:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003288:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	607a      	str	r2, [r7, #4]
  return result;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	40d3      	lsrs	r3, r2
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_RCC_GetSysClockFreq+0xcc>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	220f      	movs	r2, #15
 80032ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	60fa      	str	r2, [r7, #12]
  return result;
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	40d3      	lsrs	r3, r2
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	e007      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	623b      	str	r3, [r7, #32]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003300:	4618      	mov	r0, r3
 8003302:	372c      	adds	r7, #44	; 0x2c
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	007a1200 	.word	0x007a1200
 8003314:	08007818 	.word	0x08007818
 8003318:	08007828 	.word	0x08007828

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000028 	.word	0x20000028

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800333a:	f7ff ffef 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333e:	4601      	mov	r1, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003348:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800334c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	603a      	str	r2, [r7, #0]
  return result;
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	40d3      	lsrs	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08007810 	.word	0x08007810

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800337e:	f7ff ffcd 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800338c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	603a      	str	r2, [r7, #0]
  return result;
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	40d3      	lsrs	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08007810 	.word	0x08007810

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b092      	sub	sp, #72	; 0x48
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80d4 	beq.w	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b45      	ldr	r3, [pc, #276]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a41      	ldr	r2, [pc, #260]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f857 	bl	80014d4 <HAL_GetTick>
 8003426:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe f853 	bl	80014d4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1d6      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8084 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003464:	429a      	cmp	r2, r3
 8003466:	d07c      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	461a      	mov	r2, r3
 8003492:	2301      	movs	r3, #1
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04b      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe f803 	bl	80014d4 <HAL_GetTick>
 80034ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fd ffff 	bl	80014d4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e180      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034e8:	2302      	movs	r3, #2
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	2302      	movs	r3, #2
 80034f6:	623b      	str	r3, [r7, #32]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003500:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d108      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003516:	4b01      	ldr	r3, [pc, #4]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	e00d      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	10908100 	.word	0x10908100
 8003528:	2302      	movs	r3, #2
 800352a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2202      	movs	r2, #2
 800353a:	613a      	str	r2, [r7, #16]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	60fa      	str	r2, [r7, #12]
  return result;
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	fab2 f282 	clz	r2, r2
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f002 021f 	and.w	r2, r2, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0b7      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003562:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	498c      	ldr	r1, [pc, #560]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003594:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f023 0203 	bic.w	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	497f      	ldr	r1, [pc, #508]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4978      	ldr	r1, [pc, #480]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4970      	ldr	r1, [pc, #448]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f023 0210 	bic.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4969      	ldr	r1, [pc, #420]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800360c:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	4961      	ldr	r1, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f023 0220 	bic.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	495a      	ldr	r1, [pc, #360]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003648:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	4952      	ldr	r1, [pc, #328]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003666:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	494b      	ldr	r1, [pc, #300]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4943      	ldr	r1, [pc, #268]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	493c      	ldr	r1, [pc, #240]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	4934      	ldr	r1, [pc, #208]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	492d      	ldr	r1, [pc, #180]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	4925      	ldr	r1, [pc, #148]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	491e      	ldr	r1, [pc, #120]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	490f      	ldr	r1, [pc, #60]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	4913      	ldr	r1, [pc, #76]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	490b      	ldr	r1, [pc, #44]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	4904      	ldr	r1, [pc, #16]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3748      	adds	r7, #72	; 0x48
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e049      	b.n	800389e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fc02 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f001 f848 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e049      	b.n	800394c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f841 	bl	8003954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f000 fff1 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e03c      	b.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start_DMA+0x46>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e02f      	b.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xa6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e022      	b.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xa6>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d109      	bne.n	80039e2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	e015      	b.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xa6>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d109      	bne.n	80039fc <HAL_TIM_PWM_Start_DMA+0x94>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e008      	b.n	8003a0e <HAL_TIM_PWM_Start_DMA+0xa6>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e1b0      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e03c      	b.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x142>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d109      	bne.n	8003a4a <HAL_TIM_PWM_Start_DMA+0xe2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e02f      	b.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x142>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e022      	b.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x142>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d109      	bne.n	8003a7e <HAL_TIM_PWM_Start_DMA+0x116>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e015      	b.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x142>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start_DMA+0x130>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e008      	b.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x142>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d034      	beq.n	8003b18 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_TIM_PWM_Start_DMA+0x152>
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e15c      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start_DMA+0x166>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	e026      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Start_DMA+0x176>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	e01e      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Start_DMA+0x186>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	e016      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_PWM_Start_DMA+0x196>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003afc:	e00e      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b0c:	e006      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b16:	e001      	b.n	8003b1c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e12d      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	f200 80ae 	bhi.w	8003c80 <HAL_TIM_PWM_Start_DMA+0x318>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003c81 	.word	0x08003c81
 8003b34:	08003c81 	.word	0x08003c81
 8003b38:	08003c81 	.word	0x08003c81
 8003b3c:	08003ba9 	.word	0x08003ba9
 8003b40:	08003c81 	.word	0x08003c81
 8003b44:	08003c81 	.word	0x08003c81
 8003b48:	08003c81 	.word	0x08003c81
 8003b4c:	08003bf1 	.word	0x08003bf1
 8003b50:	08003c81 	.word	0x08003c81
 8003b54:	08003c81 	.word	0x08003c81
 8003b58:	08003c81 	.word	0x08003c81
 8003b5c:	08003c39 	.word	0x08003c39
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	4a86      	ldr	r2, [pc, #536]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	4a85      	ldr	r2, [pc, #532]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	4a84      	ldr	r2, [pc, #528]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3334      	adds	r3, #52	; 0x34
 8003b84:	461a      	mov	r2, r3
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	f7fd fe08 	bl	800179c <HAL_DMA_Start_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0f0      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba4:	60da      	str	r2, [r3, #12]
      break;
 8003ba6:	e06e      	b.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	4a74      	ldr	r2, [pc, #464]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	4a73      	ldr	r2, [pc, #460]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	4a72      	ldr	r2, [pc, #456]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3338      	adds	r3, #56	; 0x38
 8003bcc:	461a      	mov	r2, r3
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	f7fd fde4 	bl	800179c <HAL_DMA_Start_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0cc      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bec:	60da      	str	r2, [r3, #12]
      break;
 8003bee:	e04a      	b.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	4a62      	ldr	r2, [pc, #392]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	333c      	adds	r3, #60	; 0x3c
 8003c14:	461a      	mov	r2, r3
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	f7fd fdc0 	bl	800179c <HAL_DMA_Start_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0a8      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c34:	60da      	str	r2, [r3, #12]
      break;
 8003c36:	e026      	b.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4a50      	ldr	r2, [pc, #320]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4a4f      	ldr	r2, [pc, #316]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	4a4e      	ldr	r2, [pc, #312]	; (8003d88 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3340      	adds	r3, #64	; 0x40
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	887b      	ldrh	r3, [r7, #2]
 8003c60:	f7fd fd9c 	bl	800179c <HAL_DMA_Start_IT>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e084      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c7c:	60da      	str	r2, [r3, #12]
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
      break;
 8003c84:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d174      	bne.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fc0f 	bl	80054b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a39      	ldr	r2, [pc, #228]	; (8003d90 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <HAL_TIM_PWM_Start_DMA+0x434>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a33      	ldr	r2, [pc, #204]	; (8003da0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_Start_DMA+0x372>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_PWM_Start_DMA+0x374>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d018      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d115      	bne.n	8003d62 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_TIM_PWM_Start_DMA+0x444>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d015      	beq.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x40c>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d011      	beq.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	e008      	b.n	8003d74 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e000      	b.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d74:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	080047bb 	.word	0x080047bb
 8003d84:	08004863 	.word	0x08004863
 8003d88:	08004729 	.word	0x08004729
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40013400 	.word	0x40013400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800
 8003da0:	40015000 	.word	0x40015000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	00010007 	.word	0x00010007

08003db0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e049      	b.n	8003e56 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f841 	bl	8003e5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 fd6c 	bl	80048cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d122      	bne.n	8003ece <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d11b      	bne.n	8003ece <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0202 	mvn.w	r2, #2
 8003e9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fc f9fd 	bl	80002b4 <HAL_TIM_IC_CaptureCallback>
 8003eba:	e005      	b.n	8003ec8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fc01 	bl	80046c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fc08 	bl	80046d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d122      	bne.n	8003f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d11b      	bne.n	8003f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0204 	mvn.w	r2, #4
 8003ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fc f9d3 	bl	80002b4 <HAL_TIM_IC_CaptureCallback>
 8003f0e:	e005      	b.n	8003f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fbd7 	bl	80046c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fbde 	bl	80046d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d122      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d11b      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0208 	mvn.w	r2, #8
 8003f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fc f9a9 	bl	80002b4 <HAL_TIM_IC_CaptureCallback>
 8003f62:	e005      	b.n	8003f70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fbad 	bl	80046c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fbb4 	bl	80046d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d122      	bne.n	8003fca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d11b      	bne.n	8003fca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0210 	mvn.w	r2, #16
 8003f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc f97f 	bl	80002b4 <HAL_TIM_IC_CaptureCallback>
 8003fb6:	e005      	b.n	8003fc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fb83 	bl	80046c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb8a 	bl	80046d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0201 	mvn.w	r2, #1
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fb5d 	bl	80046b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d10e      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d107      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f001 fb07 	bl	8005630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 fafa 	bl	8005644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb42 	bl	8004700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0220 	mvn.w	r2, #32
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 faba 	bl	800561c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e088      	b.n	80041e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040ec:	f001 f826 	bl	800513c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020c 	bic.w	r2, r2, #12
 80040fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
 8004112:	e060      	b.n	80041d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d11c      	bne.n	8004154 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800412a:	f001 f8a4 	bl	8005276 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800413c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6999      	ldr	r1, [r3, #24]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
 8004152:	e040      	b.n	80041d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11b      	bne.n	8004192 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800416a:	f001 f8f1 	bl	8005350 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 020c 	bic.w	r2, r2, #12
 800417c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	61da      	str	r2, [r3, #28]
 8004190:	e021      	b.n	80041d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d11c      	bne.n	80041d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80041a8:	f001 f90e 	bl	80053c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69d9      	ldr	r1, [r3, #28]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	021a      	lsls	r2, r3, #8
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	61da      	str	r2, [r3, #28]
 80041d0:	e001      	b.n	80041d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004202:	2302      	movs	r3, #2
 8004204:	e0ff      	b.n	8004406 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b14      	cmp	r3, #20
 8004212:	f200 80f0 	bhi.w	80043f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004216:	a201      	add	r2, pc, #4	; (adr r2, 800421c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004271 	.word	0x08004271
 8004220:	080043f7 	.word	0x080043f7
 8004224:	080043f7 	.word	0x080043f7
 8004228:	080043f7 	.word	0x080043f7
 800422c:	080042b1 	.word	0x080042b1
 8004230:	080043f7 	.word	0x080043f7
 8004234:	080043f7 	.word	0x080043f7
 8004238:	080043f7 	.word	0x080043f7
 800423c:	080042f3 	.word	0x080042f3
 8004240:	080043f7 	.word	0x080043f7
 8004244:	080043f7 	.word	0x080043f7
 8004248:	080043f7 	.word	0x080043f7
 800424c:	08004333 	.word	0x08004333
 8004250:	080043f7 	.word	0x080043f7
 8004254:	080043f7 	.word	0x080043f7
 8004258:	080043f7 	.word	0x080043f7
 800425c:	08004375 	.word	0x08004375
 8004260:	080043f7 	.word	0x080043f7
 8004264:	080043f7 	.word	0x080043f7
 8004268:	080043f7 	.word	0x080043f7
 800426c:	080043b5 	.word	0x080043b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fbc6 	bl	8004a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	619a      	str	r2, [r3, #24]
      break;
 80042ae:	e0a5      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fc40 	bl	8004b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6999      	ldr	r1, [r3, #24]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	021a      	lsls	r2, r3, #8
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	619a      	str	r2, [r3, #24]
      break;
 80042f0:	e084      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fcb3 	bl	8004c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0208 	orr.w	r2, r2, #8
 800430c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0204 	bic.w	r2, r2, #4
 800431c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69d9      	ldr	r1, [r3, #28]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	61da      	str	r2, [r3, #28]
      break;
 8004330:	e064      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fd25 	bl	8004d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69d9      	ldr	r1, [r3, #28]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	021a      	lsls	r2, r3, #8
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	61da      	str	r2, [r3, #28]
      break;
 8004372:	e043      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fd74 	bl	8004e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0208 	orr.w	r2, r2, #8
 800438e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043b2:	e023      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fdbe 	bl	8004f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043f4:	e002      	b.n	80043fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
      break;
 80043fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIM_ConfigClockSource+0x1c>
 8004428:	2302      	movs	r3, #2
 800442a:	e0b6      	b.n	800459a <HAL_TIM_ConfigClockSource+0x18a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd8>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x176>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xaa>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11e>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfe>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13e>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044a0:	2b30      	cmp	r3, #48	; 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15e>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	f000 ffd5 	bl	8005478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	f000 ffbe 	bl	8005478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451a:	461a      	mov	r2, r3
 800451c:	f000 fe7c 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ff8b 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453a:	461a      	mov	r2, r3
 800453c:	f000 fed8 	bl	80052f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	; 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 ff7b 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455a:	461a      	mov	r2, r3
 800455c:	f000 fe5c 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ff6b 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 ff62 	bl	8005442 <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_SlaveConfigSynchro+0x18>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e031      	b.n	800461e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045ca:	6839      	ldr	r1, [r7, #0]
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fd21 	bl	8005014 <TIM_SlaveTimer_SetConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e018      	b.n	800461e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800460a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d831      	bhi.n	80046a0 <HAL_TIM_ReadCapturedValue+0x78>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_TIM_ReadCapturedValue+0x1c>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046a1 	.word	0x080046a1
 8004650:	080046a1 	.word	0x080046a1
 8004654:	08004683 	.word	0x08004683
 8004658:	080046a1 	.word	0x080046a1
 800465c:	080046a1 	.word	0x080046a1
 8004660:	080046a1 	.word	0x080046a1
 8004664:	0800468d 	.word	0x0800468d
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046a1 	.word	0x080046a1
 8004674:	08004697 	.word	0x08004697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	60fb      	str	r3, [r7, #12]

      break;
 8004680:	e00f      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	60fb      	str	r3, [r7, #12]

      break;
 800468a:	e00a      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	60fb      	str	r3, [r7, #12]

      break;
 8004694:	e005      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	60fb      	str	r3, [r7, #12]

      break;
 800469e:	e000      	b.n	80046a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046a0:	bf00      	nop
  }

  return tmpreg;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d107      	bne.n	8004750 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474e:	e02a      	b.n	80047a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d107      	bne.n	800476a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004768:	e01d      	b.n	80047a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2204      	movs	r2, #4
 8004778:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004782:	e010      	b.n	80047a6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d107      	bne.n	800479e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2208      	movs	r2, #8
 8004792:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479c:	e003      	b.n	80047a6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ffb4 	bl	8004714 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10b      	bne.n	80047ea <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d136      	bne.n	800484e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e031      	b.n	800484e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d10b      	bne.n	800480c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2202      	movs	r2, #2
 80047f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d125      	bne.n	800484e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480a:	e020      	b.n	800484e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d10b      	bne.n	800482e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2204      	movs	r2, #4
 800481a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d114      	bne.n	800484e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	e00f      	b.n	800484e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d10a      	bne.n	800484e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2208      	movs	r2, #8
 800483c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d103      	bne.n	800484e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff ff42 	bl	80046d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d103      	bne.n	8004882 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	771a      	strb	r2, [r3, #28]
 8004880:	e019      	b.n	80048b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d103      	bne.n	8004894 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2202      	movs	r2, #2
 8004890:	771a      	strb	r2, [r3, #28]
 8004892:	e010      	b.n	80048b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d103      	bne.n	80048a6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2204      	movs	r2, #4
 80048a2:	771a      	strb	r2, [r3, #28]
 80048a4:	e007      	b.n	80048b6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d102      	bne.n	80048b6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2208      	movs	r2, #8
 80048b4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff ff18 	bl	80046ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	771a      	strb	r2, [r3, #28]
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a42      	ldr	r2, [pc, #264]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d00f      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <TIM_Base_SetConfig+0x120>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <TIM_Base_SetConfig+0x124>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x128>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a31      	ldr	r2, [pc, #196]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d01b      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2e      	ldr	r2, [pc, #184]	; (80049ec <TIM_Base_SetConfig+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d017      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2d      	ldr	r2, [pc, #180]	; (80049f0 <TIM_Base_SetConfig+0x124>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x128>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00f      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <TIM_Base_SetConfig+0x130>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00b      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <TIM_Base_SetConfig+0x134>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <TIM_Base_SetConfig+0x138>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d108      	bne.n	8004978 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <TIM_Base_SetConfig+0x11c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <TIM_Base_SetConfig+0x100>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <TIM_Base_SetConfig+0x128>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0x100>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0x100>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <TIM_Base_SetConfig+0x134>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0x100>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <TIM_Base_SetConfig+0x138>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0x100>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <TIM_Base_SetConfig+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40015000 	.word	0x40015000
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0201 	bic.w	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0302 	bic.w	r3, r3, #2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a30      	ldr	r2, [pc, #192]	; (8004b24 <TIM_OC1_SetConfig+0x11c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_OC1_SetConfig+0x88>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2f      	ldr	r2, [pc, #188]	; (8004b28 <TIM_OC1_SetConfig+0x120>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <TIM_OC1_SetConfig+0x88>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2e      	ldr	r2, [pc, #184]	; (8004b2c <TIM_OC1_SetConfig+0x124>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC1_SetConfig+0x88>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <TIM_OC1_SetConfig+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC1_SetConfig+0x88>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <TIM_OC1_SetConfig+0x12c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC1_SetConfig+0x88>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a2b      	ldr	r2, [pc, #172]	; (8004b38 <TIM_OC1_SetConfig+0x130>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <TIM_OC1_SetConfig+0x11c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_OC1_SetConfig+0xd2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <TIM_OC1_SetConfig+0x120>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_OC1_SetConfig+0xd2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <TIM_OC1_SetConfig+0x124>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_OC1_SetConfig+0xd2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <TIM_OC1_SetConfig+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_OC1_SetConfig+0xd2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <TIM_OC1_SetConfig+0x12c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_OC1_SetConfig+0xd2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <TIM_OC1_SetConfig+0x130>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800
 8004b38:	40015000 	.word	0x40015000

08004b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0210 	bic.w	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0320 	bic.w	r3, r3, #32
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <TIM_OC2_SetConfig+0x110>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC2_SetConfig+0x74>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <TIM_OC2_SetConfig+0x114>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC2_SetConfig+0x74>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <TIM_OC2_SetConfig+0x118>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10d      	bne.n	8004bcc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <TIM_OC2_SetConfig+0x110>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <TIM_OC2_SetConfig+0xc0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <TIM_OC2_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_OC2_SetConfig+0xc0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <TIM_OC2_SetConfig+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_OC2_SetConfig+0xc0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <TIM_OC2_SetConfig+0x120>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_OC2_SetConfig+0xc0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <TIM_OC2_SetConfig+0x124>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_OC2_SetConfig+0xc0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC2_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40015000 	.word	0x40015000
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <TIM_OC3_SetConfig+0x10c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <TIM_OC3_SetConfig+0x72>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2a      	ldr	r2, [pc, #168]	; (8004d74 <TIM_OC3_SetConfig+0x110>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_OC3_SetConfig+0x72>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a29      	ldr	r2, [pc, #164]	; (8004d78 <TIM_OC3_SetConfig+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10d      	bne.n	8004cf2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <TIM_OC3_SetConfig+0x10c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <TIM_OC3_SetConfig+0xbe>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_OC3_SetConfig+0x110>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00f      	beq.n	8004d22 <TIM_OC3_SetConfig+0xbe>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <TIM_OC3_SetConfig+0x118>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00b      	beq.n	8004d22 <TIM_OC3_SetConfig+0xbe>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <TIM_OC3_SetConfig+0x11c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <TIM_OC3_SetConfig+0xbe>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <TIM_OC3_SetConfig+0x120>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC3_SetConfig+0xbe>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <TIM_OC3_SetConfig+0x114>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d113      	bne.n	8004d4a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	621a      	str	r2, [r3, #32]
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40015000 	.word	0x40015000
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <TIM_OC4_SetConfig+0xc8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_OC4_SetConfig+0x8c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <TIM_OC4_SetConfig+0xcc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00f      	beq.n	8004e14 <TIM_OC4_SetConfig+0x8c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <TIM_OC4_SetConfig+0xd0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_OC4_SetConfig+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <TIM_OC4_SetConfig+0xd4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_OC4_SetConfig+0x8c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <TIM_OC4_SetConfig+0xd8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC4_SetConfig+0x8c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <TIM_OC4_SetConfig+0xdc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d109      	bne.n	8004e28 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40013400 	.word	0x40013400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800
 8004e64:	40015000 	.word	0x40015000

08004e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <TIM_OC5_SetConfig+0xbc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_OC5_SetConfig+0x82>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <TIM_OC5_SetConfig+0xc0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_OC5_SetConfig+0x82>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <TIM_OC5_SetConfig+0xc4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_OC5_SetConfig+0x82>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <TIM_OC5_SetConfig+0xc8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_OC5_SetConfig+0x82>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC5_SetConfig+0xcc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC5_SetConfig+0x82>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <TIM_OC5_SetConfig+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d109      	bne.n	8004efe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40013400 	.word	0x40013400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	40015000 	.word	0x40015000

08004f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	051b      	lsls	r3, r3, #20
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	; (8004ffc <TIM_OC6_SetConfig+0xc0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x84>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <TIM_OC6_SetConfig+0xc4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00f      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x84>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	; (8005004 <TIM_OC6_SetConfig+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x84>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a17      	ldr	r2, [pc, #92]	; (8005008 <TIM_OC6_SetConfig+0xcc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x84>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <TIM_OC6_SetConfig+0xd0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC6_SetConfig+0x84>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a15      	ldr	r2, [pc, #84]	; (8005010 <TIM_OC6_SetConfig+0xd4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40013400 	.word	0x40013400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	40015000 	.word	0x40015000

08005014 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b70      	cmp	r3, #112	; 0x70
 8005060:	d01a      	beq.n	8005098 <TIM_SlaveTimer_SetConfig+0x84>
 8005062:	2b70      	cmp	r3, #112	; 0x70
 8005064:	d860      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 8005066:	2b60      	cmp	r3, #96	; 0x60
 8005068:	d054      	beq.n	8005114 <TIM_SlaveTimer_SetConfig+0x100>
 800506a:	2b60      	cmp	r3, #96	; 0x60
 800506c:	d85c      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 800506e:	2b50      	cmp	r3, #80	; 0x50
 8005070:	d046      	beq.n	8005100 <TIM_SlaveTimer_SetConfig+0xec>
 8005072:	2b50      	cmp	r3, #80	; 0x50
 8005074:	d858      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d019      	beq.n	80050ae <TIM_SlaveTimer_SetConfig+0x9a>
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d854      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 800507e:	2b30      	cmp	r3, #48	; 0x30
 8005080:	d055      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x11a>
 8005082:	2b30      	cmp	r3, #48	; 0x30
 8005084:	d850      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 8005086:	2b20      	cmp	r3, #32
 8005088:	d051      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x11a>
 800508a:	2b20      	cmp	r3, #32
 800508c:	d84c      	bhi.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04d      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x11a>
 8005092:	2b10      	cmp	r3, #16
 8005094:	d04b      	beq.n	800512e <TIM_SlaveTimer_SetConfig+0x11a>
 8005096:	e047      	b.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	f000 f9e6 	bl	8005478 <TIM_ETR_SetConfig>
      break;
 80050ac:	e040      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d101      	bne.n	80050ba <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03b      	b.n	8005132 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
      break;
 80050fe:	e017      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510c:	461a      	mov	r2, r3
 800510e:	f000 f883 	bl	8005218 <TIM_TI1_ConfigInputStage>
      break;
 8005112:	e00d      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005120:	461a      	mov	r2, r3
 8005122:	f000 f8e5 	bl	80052f0 <TIM_TI2_ConfigInputStage>
      break;
 8005126:	e003      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
      break;
 800512c:	e000      	b.n	8005130 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800512e:	bf00      	nop
  }

  return status;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a26      	ldr	r2, [pc, #152]	; (8005200 <TIM_TI1_SetConfig+0xc4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d017      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d013      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <TIM_TI1_SetConfig+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a22      	ldr	r2, [pc, #136]	; (8005208 <TIM_TI1_SetConfig+0xcc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <TIM_TI1_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a20      	ldr	r2, [pc, #128]	; (8005210 <TIM_TI1_SetConfig+0xd4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_TI1_SetConfig+0x5e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <TIM_TI1_SetConfig+0xd8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <TIM_TI1_SetConfig+0x62>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <TIM_TI1_SetConfig+0x64>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e003      	b.n	80051be <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f023 030a 	bic.w	r3, r3, #10
 80051d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 030a 	and.w	r3, r3, #10
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40013400 	.word	0x40013400
 8005210:	40014000 	.word	0x40014000
 8005214:	40015000 	.word	0x40015000

08005218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 030a 	bic.w	r3, r3, #10
 8005254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f023 0210 	bic.w	r2, r3, #16
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f023 0210 	bic.w	r2, r3, #16
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800531a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	031b      	lsls	r3, r3, #12
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800532c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	b2db      	uxtb	r3, r3
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	031b      	lsls	r3, r3, #12
 800540c:	b29b      	uxth	r3, r3
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800541a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	031b      	lsls	r3, r3, #12
 8005420:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	f043 0307 	orr.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	431a      	orrs	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4313      	orrs	r3, r2
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2201      	movs	r2, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	43db      	mvns	r3, r3
 80054da:	401a      	ands	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005518:	2302      	movs	r3, #2
 800551a:	e06d      	b.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2d      	ldr	r2, [pc, #180]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005560:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01d      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d018      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a15      	ldr	r2, [pc, #84]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400
 800560c:	40015000 	.word	0x40015000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e040      	b.n	80056ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb fdc2 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2224      	movs	r2, #36	; 0x24
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fbca 	bl	8005e30 <UART_SetConfig>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e022      	b.n	80056ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fd92 	bl	80061d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fe19 	bl	800631c <UART_CheckIdleState>
 80056ea:	4603      	mov	r3, r0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005706:	2b20      	cmp	r3, #32
 8005708:	d147      	bne.n	800579a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Transmit_IT+0x22>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e040      	b.n	800579c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2221      	movs	r2, #33	; 0x21
 8005742:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d107      	bne.n	800575e <HAL_UART_Transmit_IT+0x6a>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <HAL_UART_Transmit_IT+0xb4>)
 800575a:	66da      	str	r2, [r3, #108]	; 0x6c
 800575c:	e002      	b.n	8005764 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_UART_Transmit_IT+0xb8>)
 8005762:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	372c      	adds	r7, #44	; 0x2c
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	08006875 	.word	0x08006875
 80057ac:	080067bd 	.word	0x080067bd

080057b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	; 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d132      	bne.n	800582e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Receive_IT+0x24>
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e02b      	b.n	8005830 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d018      	beq.n	800581e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	69f9      	ldr	r1, [r7, #28]
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	61bb      	str	r3, [r7, #24]
   return(result);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e6      	bne.n	80057ec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	461a      	mov	r2, r3
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fe89 	bl	800653c <UART_Start_Receive_IT>
 800582a:	4603      	mov	r3, r0
 800582c:	e000      	b.n	8005830 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3728      	adds	r7, #40	; 0x28
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b0ba      	sub	sp, #232	; 0xe8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800585e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005862:	f640 030f 	movw	r3, #2063	; 0x80f
 8005866:	4013      	ands	r3, r2
 8005868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800586c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d115      	bne.n	80058a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 82ab 	beq.w	8005dec <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
      }
      return;
 800589e:	e2a5      	b.n	8005dec <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8117 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058ba:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_UART_IRQHandler+0x298>)
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 810a 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d011      	beq.n	80058f4 <HAL_UART_IRQHandler+0xbc>
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ea:	f043 0201 	orr.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d011      	beq.n	8005924 <HAL_UART_IRQHandler+0xec>
 8005900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2202      	movs	r2, #2
 8005912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800591a:	f043 0204 	orr.w	r2, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d011      	beq.n	8005954 <HAL_UART_IRQHandler+0x11c>
 8005930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2204      	movs	r2, #4
 8005942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	f043 0202 	orr.w	r2, r3, #2
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800596c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005970:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2208      	movs	r2, #8
 800597e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005986:	f043 0208 	orr.w	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <HAL_UART_IRQHandler+0x18a>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8211 	beq.w	8005df0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04f      	beq.n	8005aba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fe54 	bl	80066c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d141      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <HAL_UART_IRQHandler+0x29c>)
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fb ff1c 	bl	80018cc <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00f      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9aa 	bl	8005e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00b      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9a6 	bl	8005e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e007      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9a2 	bl	8005e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ac8:	e192      	b.n	8005df0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aca:	bf00      	nop
    return;
 8005acc:	e190      	b.n	8005df0 <HAL_UART_IRQHandler+0x5b8>
 8005ace:	bf00      	nop
 8005ad0:	04000120 	.word	0x04000120
 8005ad4:	08006791 	.word	0x08006791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 814b 	bne.w	8005d78 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8144 	beq.w	8005d78 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 813d 	beq.w	8005d78 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2210      	movs	r2, #16
 8005b04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	f040 80b5 	bne.w	8005c80 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8164 	beq.w	8005df4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f080 815c 	bcs.w	8005df4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	f000 8086 	beq.w	8005c5e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1da      	bne.n	8005b52 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e1      	bne.n	8005b9c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e3      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2e:	f023 0310 	bic.w	r3, r3, #16
 8005c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e4      	bne.n	8005c1e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fb fdfe 	bl	800185a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8cd 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c7e:	e0b9      	b.n	8005df4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80ab 	beq.w	8005df8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80a6 	beq.w	8005df8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cce:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e4      	bne.n	8005cac <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d06:	633a      	str	r2, [r7, #48]	; 0x30
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e4      	bne.n	8005d2e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f851 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d76:	e03f      	b.n	8005df8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <HAL_UART_IRQHandler+0x56a>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 ff9c 	bl	8006cd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005da0:	e02d      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01c      	beq.n	8005dfc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
    }
    return;
 8005dca:	e017      	b.n	8005dfc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fda5 	bl	8006934 <UART_EndTransmit_IT>
    return;
 8005dea:	e008      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8005dec:	bf00      	nop
 8005dee:	e006      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8005df0:	bf00      	nop
 8005df2:	e004      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8005df4:	bf00      	nop
 8005df6:	e002      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
      return;
 8005df8:	bf00      	nop
 8005dfa:	e000      	b.n	8005dfe <HAL_UART_IRQHandler+0x5c6>
    return;
 8005dfc:	bf00      	nop
  }

}
 8005dfe:	37e8      	adds	r7, #232	; 0xe8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b92      	ldr	r3, [pc, #584]	; (80060a4 <UART_SetConfig+0x274>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	6979      	ldr	r1, [r7, #20]
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a80      	ldr	r2, [pc, #512]	; (80060a8 <UART_SetConfig+0x278>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d120      	bne.n	8005eee <UART_SetConfig+0xbe>
 8005eac:	4b7f      	ldr	r3, [pc, #508]	; (80060ac <UART_SetConfig+0x27c>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d817      	bhi.n	8005ee8 <UART_SetConfig+0xb8>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0x90>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005ee3 	.word	0x08005ee3
 8005ecc:	08005ed7 	.word	0x08005ed7
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e0b5      	b.n	8006042 <UART_SetConfig+0x212>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e0b2      	b.n	8006042 <UART_SetConfig+0x212>
 8005edc:	2304      	movs	r3, #4
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e0af      	b.n	8006042 <UART_SetConfig+0x212>
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	77fb      	strb	r3, [r7, #31]
 8005ee6:	e0ac      	b.n	8006042 <UART_SetConfig+0x212>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e0a9      	b.n	8006042 <UART_SetConfig+0x212>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6f      	ldr	r2, [pc, #444]	; (80060b0 <UART_SetConfig+0x280>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d124      	bne.n	8005f42 <UART_SetConfig+0x112>
 8005ef8:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <UART_SetConfig+0x27c>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f04:	d011      	beq.n	8005f2a <UART_SetConfig+0xfa>
 8005f06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f0a:	d817      	bhi.n	8005f3c <UART_SetConfig+0x10c>
 8005f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f10:	d011      	beq.n	8005f36 <UART_SetConfig+0x106>
 8005f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f16:	d811      	bhi.n	8005f3c <UART_SetConfig+0x10c>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <UART_SetConfig+0xf4>
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f20:	d006      	beq.n	8005f30 <UART_SetConfig+0x100>
 8005f22:	e00b      	b.n	8005f3c <UART_SetConfig+0x10c>
 8005f24:	2300      	movs	r3, #0
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e08b      	b.n	8006042 <UART_SetConfig+0x212>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e088      	b.n	8006042 <UART_SetConfig+0x212>
 8005f30:	2304      	movs	r3, #4
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e085      	b.n	8006042 <UART_SetConfig+0x212>
 8005f36:	2308      	movs	r3, #8
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e082      	b.n	8006042 <UART_SetConfig+0x212>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e07f      	b.n	8006042 <UART_SetConfig+0x212>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5b      	ldr	r2, [pc, #364]	; (80060b4 <UART_SetConfig+0x284>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d124      	bne.n	8005f96 <UART_SetConfig+0x166>
 8005f4c:	4b57      	ldr	r3, [pc, #348]	; (80060ac <UART_SetConfig+0x27c>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005f54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f58:	d011      	beq.n	8005f7e <UART_SetConfig+0x14e>
 8005f5a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f5e:	d817      	bhi.n	8005f90 <UART_SetConfig+0x160>
 8005f60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f64:	d011      	beq.n	8005f8a <UART_SetConfig+0x15a>
 8005f66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f6a:	d811      	bhi.n	8005f90 <UART_SetConfig+0x160>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <UART_SetConfig+0x148>
 8005f70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f74:	d006      	beq.n	8005f84 <UART_SetConfig+0x154>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x160>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e061      	b.n	8006042 <UART_SetConfig+0x212>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e05e      	b.n	8006042 <UART_SetConfig+0x212>
 8005f84:	2304      	movs	r3, #4
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e05b      	b.n	8006042 <UART_SetConfig+0x212>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e058      	b.n	8006042 <UART_SetConfig+0x212>
 8005f90:	2310      	movs	r3, #16
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e055      	b.n	8006042 <UART_SetConfig+0x212>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a47      	ldr	r2, [pc, #284]	; (80060b8 <UART_SetConfig+0x288>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d124      	bne.n	8005fea <UART_SetConfig+0x1ba>
 8005fa0:	4b42      	ldr	r3, [pc, #264]	; (80060ac <UART_SetConfig+0x27c>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fac:	d011      	beq.n	8005fd2 <UART_SetConfig+0x1a2>
 8005fae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fb2:	d817      	bhi.n	8005fe4 <UART_SetConfig+0x1b4>
 8005fb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fb8:	d011      	beq.n	8005fde <UART_SetConfig+0x1ae>
 8005fba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fbe:	d811      	bhi.n	8005fe4 <UART_SetConfig+0x1b4>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <UART_SetConfig+0x19c>
 8005fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc8:	d006      	beq.n	8005fd8 <UART_SetConfig+0x1a8>
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x1b4>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e037      	b.n	8006042 <UART_SetConfig+0x212>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e034      	b.n	8006042 <UART_SetConfig+0x212>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e031      	b.n	8006042 <UART_SetConfig+0x212>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e02e      	b.n	8006042 <UART_SetConfig+0x212>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e02b      	b.n	8006042 <UART_SetConfig+0x212>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <UART_SetConfig+0x28c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d124      	bne.n	800603e <UART_SetConfig+0x20e>
 8005ff4:	4b2d      	ldr	r3, [pc, #180]	; (80060ac <UART_SetConfig+0x27c>)
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006000:	d011      	beq.n	8006026 <UART_SetConfig+0x1f6>
 8006002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006006:	d817      	bhi.n	8006038 <UART_SetConfig+0x208>
 8006008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800600c:	d011      	beq.n	8006032 <UART_SetConfig+0x202>
 800600e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006012:	d811      	bhi.n	8006038 <UART_SetConfig+0x208>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <UART_SetConfig+0x1f0>
 8006018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800601c:	d006      	beq.n	800602c <UART_SetConfig+0x1fc>
 800601e:	e00b      	b.n	8006038 <UART_SetConfig+0x208>
 8006020:	2300      	movs	r3, #0
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e00d      	b.n	8006042 <UART_SetConfig+0x212>
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e00a      	b.n	8006042 <UART_SetConfig+0x212>
 800602c:	2304      	movs	r3, #4
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e007      	b.n	8006042 <UART_SetConfig+0x212>
 8006032:	2308      	movs	r3, #8
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e004      	b.n	8006042 <UART_SetConfig+0x212>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e001      	b.n	8006042 <UART_SetConfig+0x212>
 800603e:	2310      	movs	r3, #16
 8006040:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604a:	d16b      	bne.n	8006124 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d838      	bhi.n	80060c4 <UART_SetConfig+0x294>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x228>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	080060c5 	.word	0x080060c5
 8006068:	08006093 	.word	0x08006093
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060c5 	.word	0x080060c5
 8006074:	080060c5 	.word	0x080060c5
 8006078:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fd f95a 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8006080:	61b8      	str	r0, [r7, #24]
        break;
 8006082:	e024      	b.n	80060ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fd f978 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e020      	b.n	80060ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <UART_SetConfig+0x290>)
 800608e:	61bb      	str	r3, [r7, #24]
        break;
 8006090:	e01d      	b.n	80060ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fd f8d9 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8006096:	61b8      	str	r0, [r7, #24]
        break;
 8006098:	e019      	b.n	80060ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	61bb      	str	r3, [r7, #24]
        break;
 80060a0:	e015      	b.n	80060ce <UART_SetConfig+0x29e>
 80060a2:	bf00      	nop
 80060a4:	efff69f3 	.word	0xefff69f3
 80060a8:	40013800 	.word	0x40013800
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40004400 	.word	0x40004400
 80060b4:	40004800 	.word	0x40004800
 80060b8:	40004c00 	.word	0x40004c00
 80060bc:	40005000 	.word	0x40005000
 80060c0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	77bb      	strb	r3, [r7, #30]
        break;
 80060cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d073      	beq.n	80061bc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	005a      	lsls	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	441a      	add	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b0f      	cmp	r3, #15
 80060ee:	d916      	bls.n	800611e <UART_SetConfig+0x2ee>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d212      	bcs.n	800611e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f023 030f 	bic.w	r3, r3, #15
 8006100:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	b29a      	uxth	r2, r3
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	4313      	orrs	r3, r2
 8006112:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	89fa      	ldrh	r2, [r7, #14]
 800611a:	60da      	str	r2, [r3, #12]
 800611c:	e04e      	b.n	80061bc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	77bb      	strb	r3, [r7, #30]
 8006122:	e04b      	b.n	80061bc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	2b08      	cmp	r3, #8
 8006128:	d827      	bhi.n	800617a <UART_SetConfig+0x34a>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0x300>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006155 	.word	0x08006155
 8006134:	0800615d 	.word	0x0800615d
 8006138:	08006165 	.word	0x08006165
 800613c:	0800617b 	.word	0x0800617b
 8006140:	0800616b 	.word	0x0800616b
 8006144:	0800617b 	.word	0x0800617b
 8006148:	0800617b 	.word	0x0800617b
 800614c:	0800617b 	.word	0x0800617b
 8006150:	08006173 	.word	0x08006173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006154:	f7fd f8ee 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8006158:	61b8      	str	r0, [r7, #24]
        break;
 800615a:	e013      	b.n	8006184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800615c:	f7fd f90c 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8006160:	61b8      	str	r0, [r7, #24]
        break;
 8006162:	e00f      	b.n	8006184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <UART_SetConfig+0x3a4>)
 8006166:	61bb      	str	r3, [r7, #24]
        break;
 8006168:	e00c      	b.n	8006184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616a:	f7fd f86d 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800616e:	61b8      	str	r0, [r7, #24]
        break;
 8006170:	e008      	b.n	8006184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	61bb      	str	r3, [r7, #24]
        break;
 8006178:	e004      	b.n	8006184 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	77bb      	strb	r3, [r7, #30]
        break;
 8006182:	bf00      	nop
    }

    if (pclk != 0U)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	085a      	lsrs	r2, r3, #1
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b0f      	cmp	r3, #15
 80061a2:	d909      	bls.n	80061b8 <UART_SetConfig+0x388>
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061aa:	d205      	bcs.n	80061b8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	e001      	b.n	80061bc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80061c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	007a1200 	.word	0x007a1200

080061d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01a      	beq.n	80062ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d6:	d10a      	bne.n	80062ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b098      	sub	sp, #96	; 0x60
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800632c:	f7fb f8d2 	bl	80014d4 <HAL_GetTick>
 8006330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b08      	cmp	r3, #8
 800633e:	d12e      	bne.n	800639e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006348:	2200      	movs	r2, #0
 800634a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f88c 	bl	800646c <UART_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d021      	beq.n	800639e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636e:	653b      	str	r3, [r7, #80]	; 0x50
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
 800637a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800637e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e062      	b.n	8006464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d149      	bne.n	8006440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	2200      	movs	r2, #0
 80063b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f856 	bl	800646c <UART_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03c      	beq.n	8006440 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	623b      	str	r3, [r7, #32]
   return(result);
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e4:	633b      	str	r3, [r7, #48]	; 0x30
 80063e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e6      	bne.n	80063c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60fb      	str	r3, [r7, #12]
   return(result);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006418:	61fa      	str	r2, [r7, #28]
 800641a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	69b9      	ldr	r1, [r7, #24]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	617b      	str	r3, [r7, #20]
   return(result);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e5      	bne.n	80063f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e011      	b.n	8006464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3758      	adds	r7, #88	; 0x58
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647c:	e049      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d045      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006486:	f7fb f825 	bl	80014d4 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <UART_WaitOnFlagUntilTimeout+0x30>
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e048      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d031      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d110      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f8ff 	bl	80066c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2208      	movs	r2, #8
 80064ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e029      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d111      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f8e5 	bl	80066c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e00f      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	429a      	cmp	r2, r3
 800652e:	d0a6      	beq.n	800647e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800653c:	b480      	push	{r7}
 800653e:	b097      	sub	sp, #92	; 0x5c
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d10e      	bne.n	800658e <UART_Start_Receive_IT+0x52>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <UART_Start_Receive_IT+0x48>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800657e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006582:	e02d      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ff      	movs	r2, #255	; 0xff
 8006588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800658c:	e028      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <UART_Start_Receive_IT+0x76>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <UART_Start_Receive_IT+0x6c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065a6:	e01b      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	227f      	movs	r2, #127	; 0x7f
 80065ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065b0:	e016      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ba:	d10d      	bne.n	80065d8 <UART_Start_Receive_IT+0x9c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <UART_Start_Receive_IT+0x92>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	227f      	movs	r2, #127	; 0x7f
 80065c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065cc:	e008      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	223f      	movs	r2, #63	; 0x3f
 80065d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065d6:	e003      	b.n	80065e0 <UART_Start_Receive_IT+0xa4>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2222      	movs	r2, #34	; 0x22
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	657b      	str	r3, [r7, #84]	; 0x54
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006610:	64ba      	str	r2, [r7, #72]	; 0x48
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800661e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662c:	d107      	bne.n	800663e <UART_Start_Receive_IT+0x102>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <UART_Start_Receive_IT+0x184>)
 800663a:	669a      	str	r2, [r3, #104]	; 0x68
 800663c:	e002      	b.n	8006644 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <UART_Start_Receive_IT+0x188>)
 8006642:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d019      	beq.n	8006680 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	637b      	str	r3, [r7, #52]	; 0x34
 800666c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e6      	bne.n	800664c <UART_Start_Receive_IT+0x110>
 800667e:	e018      	b.n	80066b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	613b      	str	r3, [r7, #16]
   return(result);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f043 0320 	orr.w	r3, r3, #32
 8006694:	653b      	str	r3, [r7, #80]	; 0x50
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	69f9      	ldr	r1, [r7, #28]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	375c      	adds	r7, #92	; 0x5c
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	08006b31 	.word	0x08006b31
 80066c4:	08006989 	.word	0x08006989

080066c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b095      	sub	sp, #84	; 0x54
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ee:	643b      	str	r3, [r7, #64]	; 0x40
 80066f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	61fb      	str	r3, [r7, #28]
   return(result);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	64bb      	str	r3, [r7, #72]	; 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	2b01      	cmp	r3, #1
 800673c:	d118      	bne.n	8006770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006784:	bf00      	nop
 8006786:	3754      	adds	r7, #84	; 0x54
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fb28 	bl	8005e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b08f      	sub	sp, #60	; 0x3c
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c8:	2b21      	cmp	r3, #33	; 0x21
 80067ca:	d14d      	bne.n	8006868 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d132      	bne.n	800683e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60bb      	str	r3, [r7, #8]
   return(result);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6979      	ldr	r1, [r7, #20]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	613b      	str	r3, [r7, #16]
   return(result);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e6      	bne.n	800680a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800683c:	e014      	b.n	8006868 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b292      	uxth	r2, r2
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006868:	bf00      	nop
 800686a:	373c      	adds	r7, #60	; 0x3c
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b091      	sub	sp, #68	; 0x44
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006880:	2b21      	cmp	r3, #33	; 0x21
 8006882:	d151      	bne.n	8006928 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d132      	bne.n	80068f6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	623b      	str	r3, [r7, #32]
   return(result);
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
 80068b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e6      	bne.n	8006890 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	69b9      	ldr	r1, [r7, #24]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	617b      	str	r3, [r7, #20]
   return(result);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80068f4:	e018      	b.n	8006928 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80068fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fe:	881a      	ldrh	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006908:	b292      	uxth	r2, r2
 800690a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006910:	1c9a      	adds	r2, r3, #2
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006928:	bf00      	nop
 800692a:	3744      	adds	r7, #68	; 0x44
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	60bb      	str	r3, [r7, #8]
   return(result);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6979      	ldr	r1, [r7, #20]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	613b      	str	r3, [r7, #16]
   return(result);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e6      	bne.n	800693c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fa f81a 	bl	80009b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006980:	bf00      	nop
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b09c      	sub	sp, #112	; 0x70
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006996:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a0:	2b22      	cmp	r3, #34	; 0x22
 80069a2:	f040 80b9 	bne.w	8006b18 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80069b4:	b2d9      	uxtb	r1, r3
 80069b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	400a      	ands	r2, r1
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 809c 	bne.w	8006b28 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	667b      	str	r3, [r7, #100]	; 0x64
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a42:	647a      	str	r2, [r7, #68]	; 0x44
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d018      	beq.n	8006aaa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	623b      	str	r3, [r7, #32]
   return(result);
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d12e      	bne.n	8006b10 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 0310 	bic.w	r3, r3, #16
 8006acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e6      	bne.n	8006ab8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d103      	bne.n	8006b00 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2210      	movs	r2, #16
 8006afe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff f985 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b0e:	e00b      	b.n	8006b28 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7f9 ff83 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 8006b16:	e007      	b.n	8006b28 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0208 	orr.w	r2, r2, #8
 8006b26:	619a      	str	r2, [r3, #24]
}
 8006b28:	bf00      	nop
 8006b2a:	3770      	adds	r7, #112	; 0x70
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b09c      	sub	sp, #112	; 0x70
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b48:	2b22      	cmp	r3, #34	; 0x22
 8006b4a:	f040 80b9 	bne.w	8006cc0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	1c9a      	adds	r2, r3, #2
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 809c 	bne.w	8006cd0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bac:	667b      	str	r3, [r7, #100]	; 0x64
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e6      	bne.n	8006b98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bea:	643a      	str	r2, [r7, #64]	; 0x40
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e5      	bne.n	8006bca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d018      	beq.n	8006c52 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c40:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d12e      	bne.n	8006cb8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e6      	bne.n	8006c60 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d103      	bne.n	8006ca8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff f8b1 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cb6:	e00b      	b.n	8006cd0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7f9 feaf 	bl	8000a1c <HAL_UART_RxCpltCallback>
}
 8006cbe:	e007      	b.n	8006cd0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	619a      	str	r2, [r3, #24]
}
 8006cd0:	bf00      	nop
 8006cd2:	3770      	adds	r7, #112	; 0x70
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <atoi>:
 8006cec:	220a      	movs	r2, #10
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f000 b882 	b.w	8006df8 <strtol>

08006cf4 <_strtol_l.constprop.0>:
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfa:	d001      	beq.n	8006d00 <_strtol_l.constprop.0+0xc>
 8006cfc:	2b24      	cmp	r3, #36	; 0x24
 8006cfe:	d906      	bls.n	8006d0e <_strtol_l.constprop.0+0x1a>
 8006d00:	f000 f8de 	bl	8006ec0 <__errno>
 8006d04:	2316      	movs	r3, #22
 8006d06:	6003      	str	r3, [r0, #0]
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006df4 <_strtol_l.constprop.0+0x100>
 8006d12:	460d      	mov	r5, r1
 8006d14:	462e      	mov	r6, r5
 8006d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006d1e:	f017 0708 	ands.w	r7, r7, #8
 8006d22:	d1f7      	bne.n	8006d14 <_strtol_l.constprop.0+0x20>
 8006d24:	2c2d      	cmp	r4, #45	; 0x2d
 8006d26:	d132      	bne.n	8006d8e <_strtol_l.constprop.0+0x9a>
 8006d28:	782c      	ldrb	r4, [r5, #0]
 8006d2a:	2701      	movs	r7, #1
 8006d2c:	1cb5      	adds	r5, r6, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d05b      	beq.n	8006dea <_strtol_l.constprop.0+0xf6>
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	d109      	bne.n	8006d4a <_strtol_l.constprop.0+0x56>
 8006d36:	2c30      	cmp	r4, #48	; 0x30
 8006d38:	d107      	bne.n	8006d4a <_strtol_l.constprop.0+0x56>
 8006d3a:	782c      	ldrb	r4, [r5, #0]
 8006d3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d40:	2c58      	cmp	r4, #88	; 0x58
 8006d42:	d14d      	bne.n	8006de0 <_strtol_l.constprop.0+0xec>
 8006d44:	786c      	ldrb	r4, [r5, #1]
 8006d46:	2310      	movs	r3, #16
 8006d48:	3502      	adds	r5, #2
 8006d4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d52:	f04f 0e00 	mov.w	lr, #0
 8006d56:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d5a:	4676      	mov	r6, lr
 8006d5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006d60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006d64:	f1bc 0f09 	cmp.w	ip, #9
 8006d68:	d816      	bhi.n	8006d98 <_strtol_l.constprop.0+0xa4>
 8006d6a:	4664      	mov	r4, ip
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	dd24      	ble.n	8006dba <_strtol_l.constprop.0+0xc6>
 8006d70:	f1be 3fff 	cmp.w	lr, #4294967295
 8006d74:	d008      	beq.n	8006d88 <_strtol_l.constprop.0+0x94>
 8006d76:	45b1      	cmp	r9, r6
 8006d78:	d31c      	bcc.n	8006db4 <_strtol_l.constprop.0+0xc0>
 8006d7a:	d101      	bne.n	8006d80 <_strtol_l.constprop.0+0x8c>
 8006d7c:	45a2      	cmp	sl, r4
 8006d7e:	db19      	blt.n	8006db4 <_strtol_l.constprop.0+0xc0>
 8006d80:	fb06 4603 	mla	r6, r6, r3, r4
 8006d84:	f04f 0e01 	mov.w	lr, #1
 8006d88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d8c:	e7e8      	b.n	8006d60 <_strtol_l.constprop.0+0x6c>
 8006d8e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d90:	bf04      	itt	eq
 8006d92:	782c      	ldrbeq	r4, [r5, #0]
 8006d94:	1cb5      	addeq	r5, r6, #2
 8006d96:	e7ca      	b.n	8006d2e <_strtol_l.constprop.0+0x3a>
 8006d98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006d9c:	f1bc 0f19 	cmp.w	ip, #25
 8006da0:	d801      	bhi.n	8006da6 <_strtol_l.constprop.0+0xb2>
 8006da2:	3c37      	subs	r4, #55	; 0x37
 8006da4:	e7e2      	b.n	8006d6c <_strtol_l.constprop.0+0x78>
 8006da6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006daa:	f1bc 0f19 	cmp.w	ip, #25
 8006dae:	d804      	bhi.n	8006dba <_strtol_l.constprop.0+0xc6>
 8006db0:	3c57      	subs	r4, #87	; 0x57
 8006db2:	e7db      	b.n	8006d6c <_strtol_l.constprop.0+0x78>
 8006db4:	f04f 3eff 	mov.w	lr, #4294967295
 8006db8:	e7e6      	b.n	8006d88 <_strtol_l.constprop.0+0x94>
 8006dba:	f1be 3fff 	cmp.w	lr, #4294967295
 8006dbe:	d105      	bne.n	8006dcc <_strtol_l.constprop.0+0xd8>
 8006dc0:	2322      	movs	r3, #34	; 0x22
 8006dc2:	6003      	str	r3, [r0, #0]
 8006dc4:	4646      	mov	r6, r8
 8006dc6:	b942      	cbnz	r2, 8006dda <_strtol_l.constprop.0+0xe6>
 8006dc8:	4630      	mov	r0, r6
 8006dca:	e79e      	b.n	8006d0a <_strtol_l.constprop.0+0x16>
 8006dcc:	b107      	cbz	r7, 8006dd0 <_strtol_l.constprop.0+0xdc>
 8006dce:	4276      	negs	r6, r6
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d0f9      	beq.n	8006dc8 <_strtol_l.constprop.0+0xd4>
 8006dd4:	f1be 0f00 	cmp.w	lr, #0
 8006dd8:	d000      	beq.n	8006ddc <_strtol_l.constprop.0+0xe8>
 8006dda:	1e69      	subs	r1, r5, #1
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	e7f3      	b.n	8006dc8 <_strtol_l.constprop.0+0xd4>
 8006de0:	2430      	movs	r4, #48	; 0x30
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1b1      	bne.n	8006d4a <_strtol_l.constprop.0+0x56>
 8006de6:	2308      	movs	r3, #8
 8006de8:	e7af      	b.n	8006d4a <_strtol_l.constprop.0+0x56>
 8006dea:	2c30      	cmp	r4, #48	; 0x30
 8006dec:	d0a5      	beq.n	8006d3a <_strtol_l.constprop.0+0x46>
 8006dee:	230a      	movs	r3, #10
 8006df0:	e7ab      	b.n	8006d4a <_strtol_l.constprop.0+0x56>
 8006df2:	bf00      	nop
 8006df4:	08007839 	.word	0x08007839

08006df8 <strtol>:
 8006df8:	4613      	mov	r3, r2
 8006dfa:	460a      	mov	r2, r1
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4802      	ldr	r0, [pc, #8]	; (8006e08 <strtol+0x10>)
 8006e00:	6800      	ldr	r0, [r0, #0]
 8006e02:	f7ff bf77 	b.w	8006cf4 <_strtol_l.constprop.0>
 8006e06:	bf00      	nop
 8006e08:	20000080 	.word	0x20000080

08006e0c <siprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b500      	push	{lr}
 8006e10:	b09c      	sub	sp, #112	; 0x70
 8006e12:	ab1d      	add	r3, sp, #116	; 0x74
 8006e14:	9002      	str	r0, [sp, #8]
 8006e16:	9006      	str	r0, [sp, #24]
 8006e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <siprintf+0x38>)
 8006e1e:	9107      	str	r1, [sp, #28]
 8006e20:	9104      	str	r1, [sp, #16]
 8006e22:	4909      	ldr	r1, [pc, #36]	; (8006e48 <siprintf+0x3c>)
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	a902      	add	r1, sp, #8
 8006e30:	f000 f9d2 	bl	80071d8 <_svfiprintf_r>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	b01c      	add	sp, #112	; 0x70
 8006e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e40:	b003      	add	sp, #12
 8006e42:	4770      	bx	lr
 8006e44:	20000080 	.word	0x20000080
 8006e48:	ffff0208 	.word	0xffff0208

08006e4c <_vsiprintf_r>:
 8006e4c:	b500      	push	{lr}
 8006e4e:	b09b      	sub	sp, #108	; 0x6c
 8006e50:	9100      	str	r1, [sp, #0]
 8006e52:	9104      	str	r1, [sp, #16]
 8006e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e58:	9105      	str	r1, [sp, #20]
 8006e5a:	9102      	str	r1, [sp, #8]
 8006e5c:	4905      	ldr	r1, [pc, #20]	; (8006e74 <_vsiprintf_r+0x28>)
 8006e5e:	9103      	str	r1, [sp, #12]
 8006e60:	4669      	mov	r1, sp
 8006e62:	f000 f9b9 	bl	80071d8 <_svfiprintf_r>
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	b01b      	add	sp, #108	; 0x6c
 8006e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e72:	bf00      	nop
 8006e74:	ffff0208 	.word	0xffff0208

08006e78 <vsiprintf>:
 8006e78:	4613      	mov	r3, r2
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4802      	ldr	r0, [pc, #8]	; (8006e88 <vsiprintf+0x10>)
 8006e80:	6800      	ldr	r0, [r0, #0]
 8006e82:	f7ff bfe3 	b.w	8006e4c <_vsiprintf_r>
 8006e86:	bf00      	nop
 8006e88:	20000080 	.word	0x20000080

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <strncmp>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	b16a      	cbz	r2, 8006ebc <strncmp+0x20>
 8006ea0:	3901      	subs	r1, #1
 8006ea2:	1884      	adds	r4, r0, r2
 8006ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d103      	bne.n	8006eb8 <strncmp+0x1c>
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d001      	beq.n	8006eb8 <strncmp+0x1c>
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d1f5      	bne.n	8006ea4 <strncmp+0x8>
 8006eb8:	1ad0      	subs	r0, r2, r3
 8006eba:	bd10      	pop	{r4, pc}
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	e7fc      	b.n	8006eba <strncmp+0x1e>

08006ec0 <__errno>:
 8006ec0:	4b01      	ldr	r3, [pc, #4]	; (8006ec8 <__errno+0x8>)
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000080 	.word	0x20000080

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4d0d      	ldr	r5, [pc, #52]	; (8006f04 <__libc_init_array+0x38>)
 8006ed0:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	42a6      	cmp	r6, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	4d0b      	ldr	r5, [pc, #44]	; (8006f0c <__libc_init_array+0x40>)
 8006ede:	4c0c      	ldr	r4, [pc, #48]	; (8006f10 <__libc_init_array+0x44>)
 8006ee0:	f000 fc6a 	bl	80077b8 <_init>
 8006ee4:	1b64      	subs	r4, r4, r5
 8006ee6:	10a4      	asrs	r4, r4, #2
 8006ee8:	2600      	movs	r6, #0
 8006eea:	42a6      	cmp	r6, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef4:	4798      	blx	r3
 8006ef6:	3601      	adds	r6, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efe:	4798      	blx	r3
 8006f00:	3601      	adds	r6, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	0800796c 	.word	0x0800796c
 8006f08:	0800796c 	.word	0x0800796c
 8006f0c:	0800796c 	.word	0x0800796c
 8006f10:	08007970 	.word	0x08007970

08006f14 <__retarget_lock_acquire_recursive>:
 8006f14:	4770      	bx	lr

08006f16 <__retarget_lock_release_recursive>:
 8006f16:	4770      	bx	lr

08006f18 <memcpy>:
 8006f18:	440a      	add	r2, r1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f20:	d100      	bne.n	8006f24 <memcpy+0xc>
 8006f22:	4770      	bx	lr
 8006f24:	b510      	push	{r4, lr}
 8006f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	d1f9      	bne.n	8006f26 <memcpy+0xe>
 8006f32:	bd10      	pop	{r4, pc}

08006f34 <_free_r>:
 8006f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d044      	beq.n	8006fc4 <_free_r+0x90>
 8006f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f1a1 0404 	sub.w	r4, r1, #4
 8006f46:	bfb8      	it	lt
 8006f48:	18e4      	addlt	r4, r4, r3
 8006f4a:	f000 f8df 	bl	800710c <__malloc_lock>
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <_free_r+0x94>)
 8006f50:	9801      	ldr	r0, [sp, #4]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x30>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	b003      	add	sp, #12
 8006f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f60:	f000 b8da 	b.w	8007118 <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x46>
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	1961      	adds	r1, r4, r5
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1949      	addeq	r1, r1, r5
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x22>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x50>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x46>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1855      	adds	r5, r2, r1
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x70>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	4421      	add	r1, r4
 8006f90:	1854      	adds	r4, r2, r1
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x26>
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	440c      	add	r4, r1
 8006fa0:	6014      	str	r4, [r2, #0]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x26>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x78>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x26>
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1961      	adds	r1, r4, r5
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1949      	addeq	r1, r1, r5
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7ca      	b.n	8006f5a <_free_r+0x26>
 8006fc4:	b003      	add	sp, #12
 8006fc6:	bd30      	pop	{r4, r5, pc}
 8006fc8:	200008c4 	.word	0x200008c4

08006fcc <sbrk_aligned>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4e0e      	ldr	r6, [pc, #56]	; (8007008 <sbrk_aligned+0x3c>)
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	6831      	ldr	r1, [r6, #0]
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	b911      	cbnz	r1, 8006fde <sbrk_aligned+0x12>
 8006fd8:	f000 fba6 	bl	8007728 <_sbrk_r>
 8006fdc:	6030      	str	r0, [r6, #0]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fba1 	bl	8007728 <_sbrk_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d00a      	beq.n	8007000 <sbrk_aligned+0x34>
 8006fea:	1cc4      	adds	r4, r0, #3
 8006fec:	f024 0403 	bic.w	r4, r4, #3
 8006ff0:	42a0      	cmp	r0, r4
 8006ff2:	d007      	beq.n	8007004 <sbrk_aligned+0x38>
 8006ff4:	1a21      	subs	r1, r4, r0
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fb96 	bl	8007728 <_sbrk_r>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d101      	bne.n	8007004 <sbrk_aligned+0x38>
 8007000:	f04f 34ff 	mov.w	r4, #4294967295
 8007004:	4620      	mov	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	200008c8 	.word	0x200008c8

0800700c <_malloc_r>:
 800700c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007010:	1ccd      	adds	r5, r1, #3
 8007012:	f025 0503 	bic.w	r5, r5, #3
 8007016:	3508      	adds	r5, #8
 8007018:	2d0c      	cmp	r5, #12
 800701a:	bf38      	it	cc
 800701c:	250c      	movcc	r5, #12
 800701e:	2d00      	cmp	r5, #0
 8007020:	4607      	mov	r7, r0
 8007022:	db01      	blt.n	8007028 <_malloc_r+0x1c>
 8007024:	42a9      	cmp	r1, r5
 8007026:	d905      	bls.n	8007034 <_malloc_r+0x28>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	2600      	movs	r6, #0
 800702e:	4630      	mov	r0, r6
 8007030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007108 <_malloc_r+0xfc>
 8007038:	f000 f868 	bl	800710c <__malloc_lock>
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	461c      	mov	r4, r3
 8007042:	bb5c      	cbnz	r4, 800709c <_malloc_r+0x90>
 8007044:	4629      	mov	r1, r5
 8007046:	4638      	mov	r0, r7
 8007048:	f7ff ffc0 	bl	8006fcc <sbrk_aligned>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	4604      	mov	r4, r0
 8007050:	d155      	bne.n	80070fe <_malloc_r+0xf2>
 8007052:	f8d8 4000 	ldr.w	r4, [r8]
 8007056:	4626      	mov	r6, r4
 8007058:	2e00      	cmp	r6, #0
 800705a:	d145      	bne.n	80070e8 <_malloc_r+0xdc>
 800705c:	2c00      	cmp	r4, #0
 800705e:	d048      	beq.n	80070f2 <_malloc_r+0xe6>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	4631      	mov	r1, r6
 8007064:	4638      	mov	r0, r7
 8007066:	eb04 0903 	add.w	r9, r4, r3
 800706a:	f000 fb5d 	bl	8007728 <_sbrk_r>
 800706e:	4581      	cmp	r9, r0
 8007070:	d13f      	bne.n	80070f2 <_malloc_r+0xe6>
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	1a6d      	subs	r5, r5, r1
 8007076:	4629      	mov	r1, r5
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ffa7 	bl	8006fcc <sbrk_aligned>
 800707e:	3001      	adds	r0, #1
 8007080:	d037      	beq.n	80070f2 <_malloc_r+0xe6>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	442b      	add	r3, r5
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	f8d8 3000 	ldr.w	r3, [r8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d038      	beq.n	8007102 <_malloc_r+0xf6>
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	42a2      	cmp	r2, r4
 8007094:	d12b      	bne.n	80070ee <_malloc_r+0xe2>
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	e00f      	b.n	80070bc <_malloc_r+0xb0>
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	1b52      	subs	r2, r2, r5
 80070a0:	d41f      	bmi.n	80070e2 <_malloc_r+0xd6>
 80070a2:	2a0b      	cmp	r2, #11
 80070a4:	d917      	bls.n	80070d6 <_malloc_r+0xca>
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	6025      	str	r5, [r4, #0]
 80070ac:	bf18      	it	ne
 80070ae:	6059      	strne	r1, [r3, #4]
 80070b0:	6863      	ldr	r3, [r4, #4]
 80070b2:	bf08      	it	eq
 80070b4:	f8c8 1000 	streq.w	r1, [r8]
 80070b8:	5162      	str	r2, [r4, r5]
 80070ba:	604b      	str	r3, [r1, #4]
 80070bc:	4638      	mov	r0, r7
 80070be:	f104 060b 	add.w	r6, r4, #11
 80070c2:	f000 f829 	bl	8007118 <__malloc_unlock>
 80070c6:	f026 0607 	bic.w	r6, r6, #7
 80070ca:	1d23      	adds	r3, r4, #4
 80070cc:	1af2      	subs	r2, r6, r3
 80070ce:	d0ae      	beq.n	800702e <_malloc_r+0x22>
 80070d0:	1b9b      	subs	r3, r3, r6
 80070d2:	50a3      	str	r3, [r4, r2]
 80070d4:	e7ab      	b.n	800702e <_malloc_r+0x22>
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	d1dd      	bne.n	8007098 <_malloc_r+0x8c>
 80070dc:	f8c8 2000 	str.w	r2, [r8]
 80070e0:	e7ec      	b.n	80070bc <_malloc_r+0xb0>
 80070e2:	4623      	mov	r3, r4
 80070e4:	6864      	ldr	r4, [r4, #4]
 80070e6:	e7ac      	b.n	8007042 <_malloc_r+0x36>
 80070e8:	4634      	mov	r4, r6
 80070ea:	6876      	ldr	r6, [r6, #4]
 80070ec:	e7b4      	b.n	8007058 <_malloc_r+0x4c>
 80070ee:	4613      	mov	r3, r2
 80070f0:	e7cc      	b.n	800708c <_malloc_r+0x80>
 80070f2:	230c      	movs	r3, #12
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4638      	mov	r0, r7
 80070f8:	f000 f80e 	bl	8007118 <__malloc_unlock>
 80070fc:	e797      	b.n	800702e <_malloc_r+0x22>
 80070fe:	6025      	str	r5, [r4, #0]
 8007100:	e7dc      	b.n	80070bc <_malloc_r+0xb0>
 8007102:	605b      	str	r3, [r3, #4]
 8007104:	deff      	udf	#255	; 0xff
 8007106:	bf00      	nop
 8007108:	200008c4 	.word	0x200008c4

0800710c <__malloc_lock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_lock+0x8>)
 800710e:	f7ff bf01 	b.w	8006f14 <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	200008c0 	.word	0x200008c0

08007118 <__malloc_unlock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_unlock+0x8>)
 800711a:	f7ff befc 	b.w	8006f16 <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	200008c0 	.word	0x200008c0

08007124 <__ssputs_r>:
 8007124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	688e      	ldr	r6, [r1, #8]
 800712a:	461f      	mov	r7, r3
 800712c:	42be      	cmp	r6, r7
 800712e:	680b      	ldr	r3, [r1, #0]
 8007130:	4682      	mov	sl, r0
 8007132:	460c      	mov	r4, r1
 8007134:	4690      	mov	r8, r2
 8007136:	d82c      	bhi.n	8007192 <__ssputs_r+0x6e>
 8007138:	898a      	ldrh	r2, [r1, #12]
 800713a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800713e:	d026      	beq.n	800718e <__ssputs_r+0x6a>
 8007140:	6965      	ldr	r5, [r4, #20]
 8007142:	6909      	ldr	r1, [r1, #16]
 8007144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007148:	eba3 0901 	sub.w	r9, r3, r1
 800714c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007150:	1c7b      	adds	r3, r7, #1
 8007152:	444b      	add	r3, r9
 8007154:	106d      	asrs	r5, r5, #1
 8007156:	429d      	cmp	r5, r3
 8007158:	bf38      	it	cc
 800715a:	461d      	movcc	r5, r3
 800715c:	0553      	lsls	r3, r2, #21
 800715e:	d527      	bpl.n	80071b0 <__ssputs_r+0x8c>
 8007160:	4629      	mov	r1, r5
 8007162:	f7ff ff53 	bl	800700c <_malloc_r>
 8007166:	4606      	mov	r6, r0
 8007168:	b360      	cbz	r0, 80071c4 <__ssputs_r+0xa0>
 800716a:	6921      	ldr	r1, [r4, #16]
 800716c:	464a      	mov	r2, r9
 800716e:	f7ff fed3 	bl	8006f18 <memcpy>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	6126      	str	r6, [r4, #16]
 8007180:	6165      	str	r5, [r4, #20]
 8007182:	444e      	add	r6, r9
 8007184:	eba5 0509 	sub.w	r5, r5, r9
 8007188:	6026      	str	r6, [r4, #0]
 800718a:	60a5      	str	r5, [r4, #8]
 800718c:	463e      	mov	r6, r7
 800718e:	42be      	cmp	r6, r7
 8007190:	d900      	bls.n	8007194 <__ssputs_r+0x70>
 8007192:	463e      	mov	r6, r7
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	4632      	mov	r2, r6
 8007198:	4641      	mov	r1, r8
 800719a:	f000 faab 	bl	80076f4 <memmove>
 800719e:	68a3      	ldr	r3, [r4, #8]
 80071a0:	1b9b      	subs	r3, r3, r6
 80071a2:	60a3      	str	r3, [r4, #8]
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	4433      	add	r3, r6
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	2000      	movs	r0, #0
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	462a      	mov	r2, r5
 80071b2:	f000 fac9 	bl	8007748 <_realloc_r>
 80071b6:	4606      	mov	r6, r0
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1e0      	bne.n	800717e <__ssputs_r+0x5a>
 80071bc:	6921      	ldr	r1, [r4, #16]
 80071be:	4650      	mov	r0, sl
 80071c0:	f7ff feb8 	bl	8006f34 <_free_r>
 80071c4:	230c      	movs	r3, #12
 80071c6:	f8ca 3000 	str.w	r3, [sl]
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	e7e9      	b.n	80071ac <__ssputs_r+0x88>

080071d8 <_svfiprintf_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4698      	mov	r8, r3
 80071de:	898b      	ldrh	r3, [r1, #12]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	b09d      	sub	sp, #116	; 0x74
 80071e4:	4607      	mov	r7, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	d50e      	bpl.n	800720a <_svfiprintf_r+0x32>
 80071ec:	690b      	ldr	r3, [r1, #16]
 80071ee:	b963      	cbnz	r3, 800720a <_svfiprintf_r+0x32>
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	f7ff ff0b 	bl	800700c <_malloc_r>
 80071f6:	6028      	str	r0, [r5, #0]
 80071f8:	6128      	str	r0, [r5, #16]
 80071fa:	b920      	cbnz	r0, 8007206 <_svfiprintf_r+0x2e>
 80071fc:	230c      	movs	r3, #12
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e0d0      	b.n	80073a8 <_svfiprintf_r+0x1d0>
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	; 0x30
 800721a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073c0 <_svfiprintf_r+0x1e8>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x5c>
 8007230:	2a25      	cmp	r2, #37	; 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x50>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7a>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6f 	bl	8007124 <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80a9 	beq.w	800739e <_svfiprintf_r+0x1c6>
 800724c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	; 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80a1 	beq.w	800739e <_svfiprintf_r+0x1c6>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007272:	931a      	str	r3, [sp, #104]	; 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	4850      	ldr	r0, [pc, #320]	; (80073c0 <_svfiprintf_r+0x1e8>)
 800727e:	f7f8 ffb7 	bl	80001f0 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xe6>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	; 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xf6>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	; 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94d      	bls.n	8007354 <_svfiprintf_r+0x17c>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x110>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x110>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0x9c>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	; 0x2e
 80072ec:	d10c      	bne.n	8007308 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d134      	bne.n	800735e <_svfiprintf_r+0x186>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	f04f 33ff 	movlt.w	r3, #4294967295
 8007304:	3402      	adds	r4, #2
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073d0 <_svfiprintf_r+0x1f8>
 800730c:	7821      	ldrb	r1, [r4, #0]
 800730e:	2203      	movs	r2, #3
 8007310:	4650      	mov	r0, sl
 8007312:	f7f8 ff6d 	bl	80001f0 <memchr>
 8007316:	b138      	cbz	r0, 8007328 <_svfiprintf_r+0x150>
 8007318:	9b04      	ldr	r3, [sp, #16]
 800731a:	eba0 000a 	sub.w	r0, r0, sl
 800731e:	2240      	movs	r2, #64	; 0x40
 8007320:	4082      	lsls	r2, r0
 8007322:	4313      	orrs	r3, r2
 8007324:	3401      	adds	r4, #1
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732c:	4825      	ldr	r0, [pc, #148]	; (80073c4 <_svfiprintf_r+0x1ec>)
 800732e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007332:	2206      	movs	r2, #6
 8007334:	f7f8 ff5c 	bl	80001f0 <memchr>
 8007338:	2800      	cmp	r0, #0
 800733a:	d038      	beq.n	80073ae <_svfiprintf_r+0x1d6>
 800733c:	4b22      	ldr	r3, [pc, #136]	; (80073c8 <_svfiprintf_r+0x1f0>)
 800733e:	bb1b      	cbnz	r3, 8007388 <_svfiprintf_r+0x1b0>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	3307      	adds	r3, #7
 8007344:	f023 0307 	bic.w	r3, r3, #7
 8007348:	3308      	adds	r3, #8
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	4433      	add	r3, r6
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	e768      	b.n	8007226 <_svfiprintf_r+0x4e>
 8007354:	fb0c 3202 	mla	r2, ip, r2, r3
 8007358:	460c      	mov	r4, r1
 800735a:	2001      	movs	r0, #1
 800735c:	e7a6      	b.n	80072ac <_svfiprintf_r+0xd4>
 800735e:	2300      	movs	r3, #0
 8007360:	3401      	adds	r4, #1
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	4619      	mov	r1, r3
 8007366:	f04f 0c0a 	mov.w	ip, #10
 800736a:	4620      	mov	r0, r4
 800736c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007370:	3a30      	subs	r2, #48	; 0x30
 8007372:	2a09      	cmp	r2, #9
 8007374:	d903      	bls.n	800737e <_svfiprintf_r+0x1a6>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c6      	beq.n	8007308 <_svfiprintf_r+0x130>
 800737a:	9105      	str	r1, [sp, #20]
 800737c:	e7c4      	b.n	8007308 <_svfiprintf_r+0x130>
 800737e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007382:	4604      	mov	r4, r0
 8007384:	2301      	movs	r3, #1
 8007386:	e7f0      	b.n	800736a <_svfiprintf_r+0x192>
 8007388:	ab03      	add	r3, sp, #12
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	462a      	mov	r2, r5
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <_svfiprintf_r+0x1f4>)
 8007390:	a904      	add	r1, sp, #16
 8007392:	4638      	mov	r0, r7
 8007394:	f3af 8000 	nop.w
 8007398:	1c42      	adds	r2, r0, #1
 800739a:	4606      	mov	r6, r0
 800739c:	d1d6      	bne.n	800734c <_svfiprintf_r+0x174>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	065b      	lsls	r3, r3, #25
 80073a2:	f53f af2d 	bmi.w	8007200 <_svfiprintf_r+0x28>
 80073a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a8:	b01d      	add	sp, #116	; 0x74
 80073aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	462a      	mov	r2, r5
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <_svfiprintf_r+0x1f4>)
 80073b6:	a904      	add	r1, sp, #16
 80073b8:	4638      	mov	r0, r7
 80073ba:	f000 f879 	bl	80074b0 <_printf_i>
 80073be:	e7eb      	b.n	8007398 <_svfiprintf_r+0x1c0>
 80073c0:	08007939 	.word	0x08007939
 80073c4:	08007943 	.word	0x08007943
 80073c8:	00000000 	.word	0x00000000
 80073cc:	08007125 	.word	0x08007125
 80073d0:	0800793f 	.word	0x0800793f

080073d4 <_printf_common>:
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	4616      	mov	r6, r2
 80073da:	4699      	mov	r9, r3
 80073dc:	688a      	ldr	r2, [r1, #8]
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	bfb8      	it	lt
 80073e8:	4613      	movlt	r3, r2
 80073ea:	6033      	str	r3, [r6, #0]
 80073ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f0:	4607      	mov	r7, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	b10a      	cbz	r2, 80073fa <_printf_common+0x26>
 80073f6:	3301      	adds	r3, #1
 80073f8:	6033      	str	r3, [r6, #0]
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	0699      	lsls	r1, r3, #26
 80073fe:	bf42      	ittt	mi
 8007400:	6833      	ldrmi	r3, [r6, #0]
 8007402:	3302      	addmi	r3, #2
 8007404:	6033      	strmi	r3, [r6, #0]
 8007406:	6825      	ldr	r5, [r4, #0]
 8007408:	f015 0506 	ands.w	r5, r5, #6
 800740c:	d106      	bne.n	800741c <_printf_common+0x48>
 800740e:	f104 0a19 	add.w	sl, r4, #25
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	6832      	ldr	r2, [r6, #0]
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	42ab      	cmp	r3, r5
 800741a:	dc26      	bgt.n	800746a <_printf_common+0x96>
 800741c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007420:	1e13      	subs	r3, r2, #0
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	bf18      	it	ne
 8007426:	2301      	movne	r3, #1
 8007428:	0692      	lsls	r2, r2, #26
 800742a:	d42b      	bmi.n	8007484 <_printf_common+0xb0>
 800742c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007430:	4649      	mov	r1, r9
 8007432:	4638      	mov	r0, r7
 8007434:	47c0      	blx	r8
 8007436:	3001      	adds	r0, #1
 8007438:	d01e      	beq.n	8007478 <_printf_common+0xa4>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	f003 0306 	and.w	r3, r3, #6
 8007442:	2b04      	cmp	r3, #4
 8007444:	bf02      	ittt	eq
 8007446:	68e5      	ldreq	r5, [r4, #12]
 8007448:	6833      	ldreq	r3, [r6, #0]
 800744a:	1aed      	subeq	r5, r5, r3
 800744c:	68a3      	ldr	r3, [r4, #8]
 800744e:	bf0c      	ite	eq
 8007450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007454:	2500      	movne	r5, #0
 8007456:	4293      	cmp	r3, r2
 8007458:	bfc4      	itt	gt
 800745a:	1a9b      	subgt	r3, r3, r2
 800745c:	18ed      	addgt	r5, r5, r3
 800745e:	2600      	movs	r6, #0
 8007460:	341a      	adds	r4, #26
 8007462:	42b5      	cmp	r5, r6
 8007464:	d11a      	bne.n	800749c <_printf_common+0xc8>
 8007466:	2000      	movs	r0, #0
 8007468:	e008      	b.n	800747c <_printf_common+0xa8>
 800746a:	2301      	movs	r3, #1
 800746c:	4652      	mov	r2, sl
 800746e:	4649      	mov	r1, r9
 8007470:	4638      	mov	r0, r7
 8007472:	47c0      	blx	r8
 8007474:	3001      	adds	r0, #1
 8007476:	d103      	bne.n	8007480 <_printf_common+0xac>
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007480:	3501      	adds	r5, #1
 8007482:	e7c6      	b.n	8007412 <_printf_common+0x3e>
 8007484:	18e1      	adds	r1, r4, r3
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	2030      	movs	r0, #48	; 0x30
 800748a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800748e:	4422      	add	r2, r4
 8007490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007498:	3302      	adds	r3, #2
 800749a:	e7c7      	b.n	800742c <_printf_common+0x58>
 800749c:	2301      	movs	r3, #1
 800749e:	4622      	mov	r2, r4
 80074a0:	4649      	mov	r1, r9
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	3001      	adds	r0, #1
 80074a8:	d0e6      	beq.n	8007478 <_printf_common+0xa4>
 80074aa:	3601      	adds	r6, #1
 80074ac:	e7d9      	b.n	8007462 <_printf_common+0x8e>
	...

080074b0 <_printf_i>:
 80074b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	7e0f      	ldrb	r7, [r1, #24]
 80074b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b8:	2f78      	cmp	r7, #120	; 0x78
 80074ba:	4691      	mov	r9, r2
 80074bc:	4680      	mov	r8, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	469a      	mov	sl, r3
 80074c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074c6:	d807      	bhi.n	80074d8 <_printf_i+0x28>
 80074c8:	2f62      	cmp	r7, #98	; 0x62
 80074ca:	d80a      	bhi.n	80074e2 <_printf_i+0x32>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	f000 80d4 	beq.w	800767a <_printf_i+0x1ca>
 80074d2:	2f58      	cmp	r7, #88	; 0x58
 80074d4:	f000 80c0 	beq.w	8007658 <_printf_i+0x1a8>
 80074d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e0:	e03a      	b.n	8007558 <_printf_i+0xa8>
 80074e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074e6:	2b15      	cmp	r3, #21
 80074e8:	d8f6      	bhi.n	80074d8 <_printf_i+0x28>
 80074ea:	a101      	add	r1, pc, #4	; (adr r1, 80074f0 <_printf_i+0x40>)
 80074ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f0:	08007549 	.word	0x08007549
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	080074d9 	.word	0x080074d9
 80074fc:	080074d9 	.word	0x080074d9
 8007500:	080074d9 	.word	0x080074d9
 8007504:	080074d9 	.word	0x080074d9
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080074d9 	.word	0x080074d9
 8007510:	080074d9 	.word	0x080074d9
 8007514:	080074d9 	.word	0x080074d9
 8007518:	080074d9 	.word	0x080074d9
 800751c:	08007661 	.word	0x08007661
 8007520:	08007589 	.word	0x08007589
 8007524:	0800761b 	.word	0x0800761b
 8007528:	080074d9 	.word	0x080074d9
 800752c:	080074d9 	.word	0x080074d9
 8007530:	08007683 	.word	0x08007683
 8007534:	080074d9 	.word	0x080074d9
 8007538:	08007589 	.word	0x08007589
 800753c:	080074d9 	.word	0x080074d9
 8007540:	080074d9 	.word	0x080074d9
 8007544:	08007623 	.word	0x08007623
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007558:	2301      	movs	r3, #1
 800755a:	e09f      	b.n	800769c <_printf_i+0x1ec>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	0607      	lsls	r7, r0, #24
 8007562:	f103 0104 	add.w	r1, r3, #4
 8007566:	6029      	str	r1, [r5, #0]
 8007568:	d501      	bpl.n	800756e <_printf_i+0xbe>
 800756a:	681e      	ldr	r6, [r3, #0]
 800756c:	e003      	b.n	8007576 <_printf_i+0xc6>
 800756e:	0646      	lsls	r6, r0, #25
 8007570:	d5fb      	bpl.n	800756a <_printf_i+0xba>
 8007572:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007576:	2e00      	cmp	r6, #0
 8007578:	da03      	bge.n	8007582 <_printf_i+0xd2>
 800757a:	232d      	movs	r3, #45	; 0x2d
 800757c:	4276      	negs	r6, r6
 800757e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007582:	485a      	ldr	r0, [pc, #360]	; (80076ec <_printf_i+0x23c>)
 8007584:	230a      	movs	r3, #10
 8007586:	e012      	b.n	80075ae <_printf_i+0xfe>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1d19      	adds	r1, r3, #4
 800758e:	6029      	str	r1, [r5, #0]
 8007590:	0605      	lsls	r5, r0, #24
 8007592:	d501      	bpl.n	8007598 <_printf_i+0xe8>
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	e002      	b.n	800759e <_printf_i+0xee>
 8007598:	0641      	lsls	r1, r0, #25
 800759a:	d5fb      	bpl.n	8007594 <_printf_i+0xe4>
 800759c:	881e      	ldrh	r6, [r3, #0]
 800759e:	4853      	ldr	r0, [pc, #332]	; (80076ec <_printf_i+0x23c>)
 80075a0:	2f6f      	cmp	r7, #111	; 0x6f
 80075a2:	bf0c      	ite	eq
 80075a4:	2308      	moveq	r3, #8
 80075a6:	230a      	movne	r3, #10
 80075a8:	2100      	movs	r1, #0
 80075aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ae:	6865      	ldr	r5, [r4, #4]
 80075b0:	60a5      	str	r5, [r4, #8]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	bfa2      	ittt	ge
 80075b6:	6821      	ldrge	r1, [r4, #0]
 80075b8:	f021 0104 	bicge.w	r1, r1, #4
 80075bc:	6021      	strge	r1, [r4, #0]
 80075be:	b90e      	cbnz	r6, 80075c4 <_printf_i+0x114>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d04b      	beq.n	800765c <_printf_i+0x1ac>
 80075c4:	4615      	mov	r5, r2
 80075c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ca:	fb03 6711 	mls	r7, r3, r1, r6
 80075ce:	5dc7      	ldrb	r7, [r0, r7]
 80075d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d4:	4637      	mov	r7, r6
 80075d6:	42bb      	cmp	r3, r7
 80075d8:	460e      	mov	r6, r1
 80075da:	d9f4      	bls.n	80075c6 <_printf_i+0x116>
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d10b      	bne.n	80075f8 <_printf_i+0x148>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	07de      	lsls	r6, r3, #31
 80075e4:	d508      	bpl.n	80075f8 <_printf_i+0x148>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4299      	cmp	r1, r3
 80075ec:	bfde      	ittt	le
 80075ee:	2330      	movle	r3, #48	; 0x30
 80075f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f8:	1b52      	subs	r2, r2, r5
 80075fa:	6122      	str	r2, [r4, #16]
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	464b      	mov	r3, r9
 8007602:	aa03      	add	r2, sp, #12
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fee4 	bl	80073d4 <_printf_common>
 800760c:	3001      	adds	r0, #1
 800760e:	d14a      	bne.n	80076a6 <_printf_i+0x1f6>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b004      	add	sp, #16
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	f043 0320 	orr.w	r3, r3, #32
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	4833      	ldr	r0, [pc, #204]	; (80076f0 <_printf_i+0x240>)
 8007624:	2778      	movs	r7, #120	; 0x78
 8007626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	6829      	ldr	r1, [r5, #0]
 800762e:	061f      	lsls	r7, r3, #24
 8007630:	f851 6b04 	ldr.w	r6, [r1], #4
 8007634:	d402      	bmi.n	800763c <_printf_i+0x18c>
 8007636:	065f      	lsls	r7, r3, #25
 8007638:	bf48      	it	mi
 800763a:	b2b6      	uxthmi	r6, r6
 800763c:	07df      	lsls	r7, r3, #31
 800763e:	bf48      	it	mi
 8007640:	f043 0320 	orrmi.w	r3, r3, #32
 8007644:	6029      	str	r1, [r5, #0]
 8007646:	bf48      	it	mi
 8007648:	6023      	strmi	r3, [r4, #0]
 800764a:	b91e      	cbnz	r6, 8007654 <_printf_i+0x1a4>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	f023 0320 	bic.w	r3, r3, #32
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	2310      	movs	r3, #16
 8007656:	e7a7      	b.n	80075a8 <_printf_i+0xf8>
 8007658:	4824      	ldr	r0, [pc, #144]	; (80076ec <_printf_i+0x23c>)
 800765a:	e7e4      	b.n	8007626 <_printf_i+0x176>
 800765c:	4615      	mov	r5, r2
 800765e:	e7bd      	b.n	80075dc <_printf_i+0x12c>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	6826      	ldr	r6, [r4, #0]
 8007664:	6961      	ldr	r1, [r4, #20]
 8007666:	1d18      	adds	r0, r3, #4
 8007668:	6028      	str	r0, [r5, #0]
 800766a:	0635      	lsls	r5, r6, #24
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	d501      	bpl.n	8007674 <_printf_i+0x1c4>
 8007670:	6019      	str	r1, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0x1ca>
 8007674:	0670      	lsls	r0, r6, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0x1c0>
 8007678:	8019      	strh	r1, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	4615      	mov	r5, r2
 8007680:	e7bc      	b.n	80075fc <_printf_i+0x14c>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	2100      	movs	r1, #0
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 fdae 	bl	80001f0 <memchr>
 8007694:	b108      	cbz	r0, 800769a <_printf_i+0x1ea>
 8007696:	1b40      	subs	r0, r0, r5
 8007698:	6060      	str	r0, [r4, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	2300      	movs	r3, #0
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a4:	e7aa      	b.n	80075fc <_printf_i+0x14c>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0ad      	beq.n	8007610 <_printf_i+0x160>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	d413      	bmi.n	80076e2 <_printf_i+0x232>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	4298      	cmp	r0, r3
 80076c0:	bfb8      	it	lt
 80076c2:	4618      	movlt	r0, r3
 80076c4:	e7a6      	b.n	8007614 <_printf_i+0x164>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4632      	mov	r2, r6
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d09d      	beq.n	8007610 <_printf_i+0x160>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	1a5b      	subs	r3, r3, r1
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcf2      	bgt.n	80076c6 <_printf_i+0x216>
 80076e0:	e7eb      	b.n	80076ba <_printf_i+0x20a>
 80076e2:	2500      	movs	r5, #0
 80076e4:	f104 0619 	add.w	r6, r4, #25
 80076e8:	e7f5      	b.n	80076d6 <_printf_i+0x226>
 80076ea:	bf00      	nop
 80076ec:	0800794a 	.word	0x0800794a
 80076f0:	0800795b 	.word	0x0800795b

080076f4 <memmove>:
 80076f4:	4288      	cmp	r0, r1
 80076f6:	b510      	push	{r4, lr}
 80076f8:	eb01 0402 	add.w	r4, r1, r2
 80076fc:	d902      	bls.n	8007704 <memmove+0x10>
 80076fe:	4284      	cmp	r4, r0
 8007700:	4623      	mov	r3, r4
 8007702:	d807      	bhi.n	8007714 <memmove+0x20>
 8007704:	1e43      	subs	r3, r0, #1
 8007706:	42a1      	cmp	r1, r4
 8007708:	d008      	beq.n	800771c <memmove+0x28>
 800770a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800770e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007712:	e7f8      	b.n	8007706 <memmove+0x12>
 8007714:	4402      	add	r2, r0
 8007716:	4601      	mov	r1, r0
 8007718:	428a      	cmp	r2, r1
 800771a:	d100      	bne.n	800771e <memmove+0x2a>
 800771c:	bd10      	pop	{r4, pc}
 800771e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007726:	e7f7      	b.n	8007718 <memmove+0x24>

08007728 <_sbrk_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d06      	ldr	r5, [pc, #24]	; (8007744 <_sbrk_r+0x1c>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7f9 fe02 	bl	800133c <_sbrk>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_sbrk_r+0x1a>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_sbrk_r+0x1a>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200008bc 	.word	0x200008bc

08007748 <_realloc_r>:
 8007748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774c:	4680      	mov	r8, r0
 800774e:	4614      	mov	r4, r2
 8007750:	460e      	mov	r6, r1
 8007752:	b921      	cbnz	r1, 800775e <_realloc_r+0x16>
 8007754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007758:	4611      	mov	r1, r2
 800775a:	f7ff bc57 	b.w	800700c <_malloc_r>
 800775e:	b92a      	cbnz	r2, 800776c <_realloc_r+0x24>
 8007760:	f7ff fbe8 	bl	8006f34 <_free_r>
 8007764:	4625      	mov	r5, r4
 8007766:	4628      	mov	r0, r5
 8007768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776c:	f000 f81b 	bl	80077a6 <_malloc_usable_size_r>
 8007770:	4284      	cmp	r4, r0
 8007772:	4607      	mov	r7, r0
 8007774:	d802      	bhi.n	800777c <_realloc_r+0x34>
 8007776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777a:	d812      	bhi.n	80077a2 <_realloc_r+0x5a>
 800777c:	4621      	mov	r1, r4
 800777e:	4640      	mov	r0, r8
 8007780:	f7ff fc44 	bl	800700c <_malloc_r>
 8007784:	4605      	mov	r5, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d0ed      	beq.n	8007766 <_realloc_r+0x1e>
 800778a:	42bc      	cmp	r4, r7
 800778c:	4622      	mov	r2, r4
 800778e:	4631      	mov	r1, r6
 8007790:	bf28      	it	cs
 8007792:	463a      	movcs	r2, r7
 8007794:	f7ff fbc0 	bl	8006f18 <memcpy>
 8007798:	4631      	mov	r1, r6
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff fbca 	bl	8006f34 <_free_r>
 80077a0:	e7e1      	b.n	8007766 <_realloc_r+0x1e>
 80077a2:	4635      	mov	r5, r6
 80077a4:	e7df      	b.n	8007766 <_realloc_r+0x1e>

080077a6 <_malloc_usable_size_r>:
 80077a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077aa:	1f18      	subs	r0, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfbc      	itt	lt
 80077b0:	580b      	ldrlt	r3, [r1, r0]
 80077b2:	18c0      	addlt	r0, r0, r3
 80077b4:	4770      	bx	lr
	...

080077b8 <_init>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr

080077c4 <_fini>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	bf00      	nop
 80077c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ca:	bc08      	pop	{r3}
 80077cc:	469e      	mov	lr, r3
 80077ce:	4770      	bx	lr
