
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b0  080075b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080075b0  080075b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075b0  080075b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080075b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000a90  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b10  20000b10  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010844  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000245a  00000000  00000000  00030937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da0  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aae  00000000  00000000  00033b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020630  00000000  00000000  000345e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011eda  00000000  00000000  00054c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8b6c  00000000  00000000  00066af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ef4  00000000  00000000  0012f65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00133550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007400 	.word	0x08007400

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007400 	.word	0x08007400

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <hc_sr_04_init>:
#include "main.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr_04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fd00 	bl	8003cbc <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f003 fb8a 	bl	80039e0 <HAL_TIM_PWM_Start>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <hc_sr_04_convert_us_to_cm>:

uint32_t hc_sr_04_convert_us_to_cm(uint32_t distance_us)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <hc_sr_04_convert_us_to_cm+0x20>)
 80002e0:	fba2 2303 	umull	r2, r3, r2, r3
 80002e4:	095b      	lsrs	r3, r3, #5
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	8d3dcb09 	.word	0x8d3dcb09

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0ce      	sub	sp, #312	; 0x138
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f001 f959 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f85b 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 faa7 	bl	8000858 <MX_GPIO_Init>
  MX_DMA_Init();
 800030a:	f000 fa7f 	bl	800080c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800030e:	f000 fa4d 	bl	80007ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000312:	f000 f8b9 	bl	8000488 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000316:	f000 f95b 	bl	80005d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800031a:	f000 f9cf 	bl	80006bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buf_RX[IDX_RX_EMPTY], 1);
 800031e:	4b1f      	ldr	r3, [pc, #124]	; (800039c <main+0xa4>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	b29b      	uxth	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <main+0xa8>)
 8000328:	4413      	add	r3, r2
 800032a:	2201      	movs	r2, #1
 800032c:	4619      	mov	r1, r3
 800032e:	481d      	ldr	r0, [pc, #116]	; (80003a4 <main+0xac>)
 8000330:	f005 f862 	bl	80053f8 <HAL_UART_Receive_IT>
  hc_sr_04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8000334:	2308      	movs	r3, #8
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <main+0xb0>)
 8000338:	491c      	ldr	r1, [pc, #112]	; (80003ac <main+0xb4>)
 800033a:	481d      	ldr	r0, [pc, #116]	; (80003b0 <main+0xb8>)
 800033c:	f7ff ffa8 	bl	8000290 <hc_sr_04_init>
  HAL_DMA_Init(&hdma_tim1_ch1);
 8000340:	481c      	ldr	r0, [pc, #112]	; (80003b4 <main+0xbc>)
 8000342:	f001 faae 	bl	80018a2 <HAL_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USART_fSend("START\n\r");
 8000346:	481c      	ldr	r0, [pc, #112]	; (80003b8 <main+0xc0>)
 8000348:	f000 fb40 	bl	80009cc <USART_fSend>
  int16_t length = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
  char bFrame[300];
  char senderAddress[4];
  while (1)
  {
	  if ((length = getFrame(bFrame)) != -1) {
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fc18 	bl	8000b8c <getFrame>
 800035c:	4603      	mov	r3, r0
 800035e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000362:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800036a:	d0f2      	beq.n	8000352 <main+0x5a>
		 if ((length = analizeFrame(bFrame,length,senderAddress)) != 0) {
 800036c:	1d3a      	adds	r2, r7, #4
 800036e:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fcae 	bl	8000cd8 <analizeFrame>
 800037c:	4603      	mov	r3, r0
 800037e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8000382:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0e3      	beq.n	8000352 <main+0x5a>
			 analizeCommend(bFrame,length,senderAddress);
 800038a:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 800038e:	1d3a      	adds	r2, r7, #4
 8000390:	f107 0308 	add.w	r3, r7, #8
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fe6f 	bl	8001078 <analizeCommend>
	  if ((length = getFrame(bFrame)) != -1) {
 800039a:	e7da      	b.n	8000352 <main+0x5a>
 800039c:	200008b4 	.word	0x200008b4
 80003a0:	200006a4 	.word	0x200006a4
 80003a4:	20000208 	.word	0x20000208
 80003a8:	200000e8 	.word	0x200000e8
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	200008a4 	.word	0x200008a4
 80003b4:	20000180 	.word	0x20000180
 80003b8:	08007418 	.word	0x08007418

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b0a6      	sub	sp, #152	; 0x98
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f006 fb82 	bl	8006ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2258      	movs	r2, #88	; 0x58
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f006 fb74 	bl	8006ad4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ec:	2302      	movs	r3, #2
 80003ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	2310      	movs	r3, #16
 80003f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000408:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800040c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000416:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fd80 	bl	8001f20 <HAL_RCC_OscConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000426:	f000 fe5d 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042a:	230f      	movs	r3, #15
 800042c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042e:	2302      	movs	r3, #2
 8000430:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000444:	2102      	movs	r1, #2
 8000446:	4618      	mov	r0, r3
 8000448:	f002 fdbe 	bl	8002fc8 <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000452:	f000 fe47 	bl	80010e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <SystemClock_Config+0xc8>)
 8000458:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800045e:	2300      	movs	r3, #0
 8000460:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000462:	2300      	movs	r3, #0
 8000464:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000466:	2300      	movs	r3, #0
 8000468:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f002 ffe1 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000478:	f000 fe34 	bl	80010e4 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3798      	adds	r7, #152	; 0x98
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	00301002 	.word	0x00301002

08000488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b090      	sub	sp, #64	; 0x40
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	463b      	mov	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c4:	4b40      	ldr	r3, [pc, #256]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004c6:	4a41      	ldr	r2, [pc, #260]	; (80005cc <MX_TIM1_Init+0x144>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004ca:	4b3f      	ldr	r3, [pc, #252]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004cc:	2247      	movs	r2, #71	; 0x47
 80004ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500;
 80004d6:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004d8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80004dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e4:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f0:	4835      	ldr	r0, [pc, #212]	; (80005c8 <MX_TIM1_Init+0x140>)
 80004f2:	f003 f9bd 	bl	8003870 <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80004fc:	f000 fdf2 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	4619      	mov	r1, r3
 800050c:	482e      	ldr	r0, [pc, #184]	; (80005c8 <MX_TIM1_Init+0x140>)
 800050e:	f003 fecf 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000518:	f000 fde4 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800051c:	482a      	ldr	r0, [pc, #168]	; (80005c8 <MX_TIM1_Init+0x140>)
 800051e:	f003 fb6b 	bl	8003bf8 <HAL_TIM_IC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000528:	f000 fddc 	bl	80010e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800052c:	2304      	movs	r3, #4
 800052e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000530:	2350      	movs	r3, #80	; 0x50
 8000532:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4820      	ldr	r0, [pc, #128]	; (80005c8 <MX_TIM1_Init+0x140>)
 8000548:	f003 ff7b 	bl	8004442 <HAL_TIM_SlaveConfigSynchro>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000552:	f000 fdc7 	bl	80010e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800055a:	2301      	movs	r3, #1
 800055c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	4619      	mov	r1, r3
 800056e:	4816      	ldr	r0, [pc, #88]	; (80005c8 <MX_TIM1_Init+0x140>)
 8000570:	f003 fcee 	bl	8003f50 <HAL_TIM_IC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800057a:	f000 fdb3 	bl	80010e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800057e:	2302      	movs	r3, #2
 8000580:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2204      	movs	r2, #4
 800058c:	4619      	mov	r1, r3
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <MX_TIM1_Init+0x140>)
 8000590:	f003 fcde 	bl	8003f50 <HAL_TIM_IC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800059a:	f000 fda3 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_TIM1_Init+0x140>)
 80005b0:	f004 fdea 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80005ba:	f000 fd93 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	; 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000009c 	.word	0x2000009c
 80005cc:	40012c00 	.word	0x40012c00

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800060c:	2247      	movs	r2, #71	; 0x47
 800060e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000618:	f24f 4223 	movw	r2, #62499	; 0xf423
 800061c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800062a:	4823      	ldr	r0, [pc, #140]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800062c:	f003 f920 	bl	8003870 <HAL_TIM_Base_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000636:	f000 fd55 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000644:	4619      	mov	r1, r3
 8000646:	481c      	ldr	r0, [pc, #112]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000648:	f003 fe32 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000652:	f000 fd47 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000656:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000658:	f003 f961 	bl	800391e <HAL_TIM_PWM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000662:	f000 fd3f 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <MX_TIM2_Init+0xe8>)
 8000676:	f004 fd87 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000680:	f000 fd30 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <MX_TIM2_Init+0xe8>)
 800069c:	f003 fcf4 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80006a6:	f000 fd1d 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <MX_TIM2_Init+0xe8>)
 80006ac:	f000 fe24 	bl	80012f8 <HAL_TIM_MspPostInit>

}
 80006b0:	bf00      	nop
 80006b2:	3738      	adds	r7, #56	; 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000e8 	.word	0x200000e8

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006f0:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <MX_TIM3_Init+0xec>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TIM3_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000716:	f003 f8ab 	bl	8003870 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000720:	f000 fce0 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4619      	mov	r1, r3
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000732:	f003 fdbd 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800073c:	f000 fcd2 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000742:	f003 f8ec 	bl	800391e <HAL_TIM_PWM_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800074c:	f000 fcca 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000760:	f004 fd12 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800076a:	f000 fcbb 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000786:	f003 fc7f 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000790:	f000 fca8 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000796:	f000 fdaf 	bl	80012f8 <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3738      	adds	r7, #56	; 0x38
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000134 	.word	0x20000134
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f004 fd56 	bl	80052a0 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 fc73 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000208 	.word	0x20000208
 8000808:	40004400 	.word	0x40004400

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_DMA_Init+0x48>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_DMA_Init+0x48>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_DMA_Init+0x48>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200c      	movs	r0, #12
 8000830:	f001 f801 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000834:	200c      	movs	r0, #12
 8000836:	f001 f81a 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200f      	movs	r0, #15
 8000840:	f000 fff9 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000844:	200f      	movs	r0, #15
 8000846:	f001 f812 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_GPIO_Init+0xc4>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a2a      	ldr	r2, [pc, #168]	; (800091c <MX_GPIO_Init+0xc4>)
 8000874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0xc4>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_GPIO_Init+0xc4>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <MX_GPIO_Init+0xc4>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_GPIO_Init+0xc4>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <MX_GPIO_Init+0xc4>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_GPIO_Init+0xc4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0xc4>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0xc4>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0xc4>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f001 fb0b 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0xc8>)
 80008f2:	f001 f973 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f6:	2320      	movs	r3, #32
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f001 f964 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800

08000924 <GetSurvey>:

/* USER CODE BEGIN 4 */

void GetSurvey()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 800092a:	2104      	movs	r1, #4
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <GetSurvey+0x28>)
 800092e:	f003 fdcb 	bl	80044c8 <HAL_TIM_ReadCapturedValue>
 8000932:	6078      	str	r0, [r7, #4]
	distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fccd 	bl	80002d4 <hc_sr_04_convert_us_to_cm>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <GetSurvey+0x2c>)
 8000940:	60da      	str	r2, [r3, #12]
	//HAL_DMA_Start(&hdma_tim1_ch1, &distance_sensor.distance_cm, &dmaDestination, 10);
	//while (HAL_DMA_PollForTransfer(&hdma_tim1_ch1, HAL_DMA_FULL_TRANSFER, 100) != HAL_OK)
	//{
	//	__NOP();
	//}
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000009c 	.word	0x2000009c
 8000950:	200008a4 	.word	0x200008a4

08000954 <USART_keyboardhit>:

uint8_t USART_keyboardhit(){
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	if(buffer_R.empty==buffer_R.busy){
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <USART_keyboardhit+0x20>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <USART_keyboardhit+0x20>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d101      	bne.n	8000968 <USART_keyboardhit+0x14>
		return 0;
 8000964:	2300      	movs	r3, #0
 8000966:	e000      	b.n	800096a <USART_keyboardhit+0x16>
	}
	return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	20000010 	.word	0x20000010

08000978 <USART_getchar>:

int8_t USART_getchar(){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
	int16_t znak;
	if(USART_keyboardhit()){
 800097e:	f7ff ffe9 	bl	8000954 <USART_keyboardhit>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d019      	beq.n	80009bc <USART_getchar+0x44>
		znak = buffer_R.tab[buffer_R.busy];
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <USART_getchar+0x50>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <USART_getchar+0x50>)
 800098e:	6852      	ldr	r2, [r2, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	80fb      	strh	r3, [r7, #6]
		buffer_R.busy++;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <USART_getchar+0x50>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	3301      	adds	r3, #1
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <USART_getchar+0x50>)
 800099e:	6053      	str	r3, [r2, #4]
		buffer_R.busy %= buffer_R.len;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <USART_getchar+0x50>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <USART_getchar+0x50>)
 80009a6:	6892      	ldr	r2, [r2, #8]
 80009a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ac:	fb01 f202 	mul.w	r2, r1, r2
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <USART_getchar+0x50>)
 80009b4:	6053      	str	r3, [r2, #4]
		return znak;
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	e001      	b.n	80009c0 <USART_getchar+0x48>
	}
	else{
		return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000010 	.word	0x20000010

080009cc <USART_fSend>:

void USART_fSend(char *msg, ...){
 80009cc:	b40f      	push	{r0, r1, r2, r3}
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b0a4      	sub	sp, #144	; 0x90
 80009d2:	af00      	add	r7, sp, #0
	char tempDataToSend[128];
	int idx;
	va_list arglist;
	va_start(arglist, msg);
 80009d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d8:	607b      	str	r3, [r7, #4]
	vsprintf(tempDataToSend, msg, arglist);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 f86b 	bl	8006ac0 <vsiprintf>
	va_end(arglist);
	idx = buffer_T.empty;
 80009ea:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <USART_fSend+0xfc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009f8:	e020      	b.n	8000a3c <USART_fSend+0x70>
		buffer_T.tab[idx] = tempDataToSend[i];
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <USART_fSend+0xfc>)
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a02:	4413      	add	r3, r2
 8000a04:	f107 0108 	add.w	r1, r7, #8
 8000a08:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000a0c:	440a      	add	r2, r1
 8000a0e:	7812      	ldrb	r2, [r2, #0]
 8000a10:	701a      	strb	r2, [r3, #0]
		idx++;
 8000a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		idx %= buffer_T.len;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <USART_fSend+0xfc>)
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a24:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a28:	fb01 f202 	mul.w	r2, r1, r2
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 8000a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbcd 	bl	80001e0 <strlen>
 8000a46:	4602      	mov	r2, r0
 8000a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8d4      	bhi.n	80009fa <USART_fSend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
	}
	__disable_irq();
	//Sprawdzamy czy nie trwa w tym momencie transmisja, jeśli nie to przestawiamy index i ją uruchamiamy
	if((buffer_T.busy == buffer_T.empty) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET)){
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <USART_fSend+0xfc>)
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <USART_fSend+0xfc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d125      	bne.n	8000aac <USART_fSend+0xe0>
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <USART_fSend+0x100>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	2b80      	cmp	r3, #128	; 0x80
 8000a6c:	d11e      	bne.n	8000aac <USART_fSend+0xe0>
		buffer_T.empty = idx;
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <USART_fSend+0xfc>)
 8000a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a74:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2,&buffer_T.tab[buffer_T.busy],1);
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <USART_fSend+0xfc>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <USART_fSend+0xfc>)
 8000a7c:	6852      	ldr	r2, [r2, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <USART_fSend+0x100>)
 8000a86:	f004 fc59 	bl	800533c <HAL_UART_Transmit_IT>
		buffer_T.busy++;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <USART_fSend+0xfc>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <USART_fSend+0xfc>)
 8000a92:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <USART_fSend+0xfc>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <USART_fSend+0xfc>)
 8000a9a:	6892      	ldr	r2, [r2, #8]
 8000a9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aa0:	fb01 f202 	mul.w	r2, r1, r2
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <USART_fSend+0xfc>)
 8000aa8:	6053      	str	r3, [r2, #4]
 8000aaa:	e003      	b.n	8000ab4 <USART_fSend+0xe8>
	}
	else{
		buffer_T.empty = idx;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <USART_fSend+0xfc>)
 8000aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ab2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ab4:	b662      	cpsie	i
}
 8000ab6:	bf00      	nop
	}
	__enable_irq();
}
 8000ab8:	bf00      	nop
 8000aba:	3790      	adds	r7, #144	; 0x90
 8000abc:	46bd      	mov	sp, r7
 8000abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ac2:	b004      	add	sp, #16
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000208 	.word	0x20000208

08000ad0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && buffer_T.busy != buffer_T.empty){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <HAL_UART_TxCpltCallback+0x60>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d123      	bne.n	8000b28 <HAL_UART_TxCpltCallback+0x58>
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d01d      	beq.n	8000b28 <HAL_UART_TxCpltCallback+0x58>
		uint8_t znak = buffer_T.tab[buffer_T.busy];
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000af2:	6852      	ldr	r2, [r2, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	73fb      	strb	r3, [r7, #15]
		buffer_T.busy++;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000b02:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000b0a:	6892      	ldr	r2, [r2, #8]
 8000b0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b10:	fb01 f202 	mul.w	r2, r1, r2
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_UART_TxCpltCallback+0x64>)
 8000b18:	6053      	str	r3, [r2, #4]
		HAL_UART_Transmit_IT(&huart2,&znak,1);
 8000b1a:	f107 030f 	add.w	r3, r7, #15
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <HAL_UART_TxCpltCallback+0x60>)
 8000b24:	f004 fc0a 	bl	800533c <HAL_UART_Transmit_IT>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000208 	.word	0x20000208
 8000b34:	20000000 	.word	0x20000000

08000b38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_RxCpltCallback+0x4c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d119      	bne.n	8000b7c <HAL_UART_RxCpltCallback+0x44>
			buffer_R.empty++;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b50:	6013      	str	r3, [r2, #0]
			buffer_R.empty %= buffer_R.len;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b58:	6892      	ldr	r2, [r2, #8]
 8000b5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b5e:	fb01 f202 	mul.w	r2, r1, r2
 8000b62:	1a9b      	subs	r3, r3, r2
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b66:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,&buffer_R.tab[buffer_R.empty],1);
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_UART_RxCpltCallback+0x50>)
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <HAL_UART_RxCpltCallback+0x4c>)
 8000b78:	f004 fc3e 	bl	80053f8 <HAL_UART_Receive_IT>
		}
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000208 	.word	0x20000208
 8000b88:	20000010 	.word	0x20000010

08000b8c <getFrame>:

int16_t getFrame(char *bufferedFrame) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	static int16_t numberOfChars = -1;
	static char frameBuf[frameMaxSize - 2];
	int16_t charFromFrame;
    int16_t ret;
	static uint8_t tildeOccured = 0;
	if ((charFromFrame = USART_getchar()) != -1) {
 8000b94:	f7ff fef0 	bl	8000978 <USART_getchar>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	81fb      	strh	r3, [r7, #14]
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	f000 808c 	beq.w	8000cc0 <getFrame+0x134>
		if (charFromFrame == startFrame) {
 8000ba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bac:	2b7b      	cmp	r3, #123	; 0x7b
 8000bae:	d106      	bne.n	8000bbe <getFrame+0x32>
			numberOfChars = 0;
 8000bb0:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <getFrame+0x140>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	801a      	strh	r2, [r3, #0]
			tildeOccured = 0;
 8000bb6:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <getFrame+0x144>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e080      	b.n	8000cc0 <getFrame+0x134>
		}
		else if (numberOfChars >= 0) {
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <getFrame+0x140>)
 8000bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db7b      	blt.n	8000cc0 <getFrame+0x134>
			if (tildeOccured == 1) {
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <getFrame+0x144>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d13a      	bne.n	8000c46 <getFrame+0xba>
				switch (charFromFrame) {
 8000bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd4:	2b60      	cmp	r3, #96	; 0x60
 8000bd6:	d006      	beq.n	8000be6 <getFrame+0x5a>
 8000bd8:	2b60      	cmp	r3, #96	; 0x60
 8000bda:	dc2b      	bgt.n	8000c34 <getFrame+0xa8>
 8000bdc:	2b5b      	cmp	r3, #91	; 0x5b
 8000bde:	d00f      	beq.n	8000c00 <getFrame+0x74>
 8000be0:	2b5d      	cmp	r3, #93	; 0x5d
 8000be2:	d01a      	beq.n	8000c1a <getFrame+0x8e>
 8000be4:	e026      	b.n	8000c34 <getFrame+0xa8>
					case codingChar:
						frameBuf[numberOfChars++] = codingChar;
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <getFrame+0x140>)
 8000be8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bec:	b293      	uxth	r3, r2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b219      	sxth	r1, r3
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <getFrame+0x140>)
 8000bf6:	8019      	strh	r1, [r3, #0]
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <getFrame+0x148>)
 8000bfa:	2160      	movs	r1, #96	; 0x60
 8000bfc:	5499      	strb	r1, [r3, r2]
						break;
 8000bfe:	e01e      	b.n	8000c3e <getFrame+0xb2>
					case codeStartcharFromFrame:
						frameBuf[numberOfChars++] = startFrame;
 8000c00:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <getFrame+0x140>)
 8000c02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c06:	b293      	uxth	r3, r2
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b219      	sxth	r1, r3
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <getFrame+0x140>)
 8000c10:	8019      	strh	r1, [r3, #0]
 8000c12:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <getFrame+0x148>)
 8000c14:	217b      	movs	r1, #123	; 0x7b
 8000c16:	5499      	strb	r1, [r3, r2]
						break;
 8000c18:	e011      	b.n	8000c3e <getFrame+0xb2>
					case codeEndcharFromFrame:
						frameBuf[numberOfChars++] = endFrame;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <getFrame+0x140>)
 8000c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c20:	b293      	uxth	r3, r2
 8000c22:	3301      	adds	r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b219      	sxth	r1, r3
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <getFrame+0x140>)
 8000c2a:	8019      	strh	r1, [r3, #0]
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <getFrame+0x148>)
 8000c2e:	217d      	movs	r1, #125	; 0x7d
 8000c30:	5499      	strb	r1, [r3, r2]
						break;
 8000c32:	e004      	b.n	8000c3e <getFrame+0xb2>
					default:
						numberOfChars = -1;
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <getFrame+0x140>)
 8000c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3a:	801a      	strh	r2, [r3, #0]
						break;
 8000c3c:	bf00      	nop
				}
				tildeOccured = 0;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <getFrame+0x144>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e032      	b.n	8000cac <getFrame+0x120>
			}
			else {
				if (charFromFrame == codingChar) {
 8000c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4a:	2b60      	cmp	r3, #96	; 0x60
 8000c4c:	d103      	bne.n	8000c56 <getFrame+0xca>
					tildeOccured = 1;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <getFrame+0x144>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e02a      	b.n	8000cac <getFrame+0x120>
				}
				else if (charFromFrame == endFrame) {
 8000c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5a:	2b7d      	cmp	r3, #125	; 0x7d
 8000c5c:	d115      	bne.n	8000c8a <getFrame+0xfe>
					ret = numberOfChars;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <getFrame+0x140>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	81bb      	strh	r3, [r7, #12]
					numberOfChars = -1;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <getFrame+0x140>)
 8000c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6a:	801a      	strh	r2, [r3, #0]
					if (ret >= (frameMinSize-2)) {
 8000c6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c70:	2b07      	cmp	r3, #7
 8000c72:	dd1b      	ble.n	8000cac <getFrame+0x120>
						memcpy(bufferedFrame, frameBuf, ret + 1);
 8000c74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <getFrame+0x148>)
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f005 ff6e 	bl	8006b60 <memcpy>
						return ret;
 8000c84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c88:	e01c      	b.n	8000cc4 <getFrame+0x138>
					}
				}
				else {
					frameBuf[numberOfChars] = charFromFrame;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <getFrame+0x140>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	461a      	mov	r2, r3
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <getFrame+0x148>)
 8000c98:	5499      	strb	r1, [r3, r2]
					numberOfChars++;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <getFrame+0x140>)
 8000c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <getFrame+0x140>)
 8000caa:	801a      	strh	r2, [r3, #0]
				}
			}
			if (numberOfChars >= (frameMaxSize - 2)) {
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <getFrame+0x140>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000cb6:	dd03      	ble.n	8000cc0 <getFrame+0x134>
				numberOfChars = -1;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <getFrame+0x140>)
 8000cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cbe:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000020 	.word	0x20000020
 8000cd0:	200008b6 	.word	0x200008b6
 8000cd4:	200008b8 	.word	0x200008b8

08000cd8 <analizeFrame>:


uint8_t analizeFrame(char *bufferedFrame, int16_t len, char *sender_add) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	817b      	strh	r3, [r7, #10]
	uint8_t intCRC;
	uint16_t commandLength;
	uint8_t i;
	uint8_t crc_temp;

	if (strncmp(bufferedFrame, device_address, 3) == 0) {
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4949      	ldr	r1, [pc, #292]	; (8000e10 <analizeFrame+0x138>)
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f005 fefa 	bl	8006ae4 <strncmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8086 	bne.w	8000e04 <analizeFrame+0x12c>
		//Pobranie i sprawdzenie nadawcy
		memcpy(sender_add, bufferedFrame + 3, 3);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f005 ff2d 	bl	8006b60 <memcpy>
		//string null-terminated na końcu
		sender_add[3]=0;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3303      	adds	r3, #3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3; ++i) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	77fb      	strb	r3, [r7, #31]
 8000d12:	e01c      	b.n	8000d4e <analizeFrame+0x76>
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000d14:	7ffb      	ldrb	r3, [r7, #31]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b40      	cmp	r3, #64	; 0x40
 8000d1e:	d905      	bls.n	8000d2c <analizeFrame+0x54>
 8000d20:	7ffb      	ldrb	r3, [r7, #31]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b5a      	cmp	r3, #90	; 0x5a
 8000d2a:	d90d      	bls.n	8000d48 <analizeFrame+0x70>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000d34:	2b60      	cmp	r3, #96	; 0x60
 8000d36:	d905      	bls.n	8000d44 <analizeFrame+0x6c>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000d38:	7ffb      	ldrb	r3, [r7, #31]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b7a      	cmp	r3, #122	; 0x7a
 8000d42:	d901      	bls.n	8000d48 <analizeFrame+0x70>
				return 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	e05e      	b.n	8000e06 <analizeFrame+0x12e>
		for (i = 0; i < 3; ++i) {
 8000d48:	7ffb      	ldrb	r3, [r7, #31]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	77fb      	strb	r3, [r7, #31]
 8000d4e:	7ffb      	ldrb	r3, [r7, #31]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d9df      	bls.n	8000d14 <analizeFrame+0x3c>
			}
		}
		//Pobranie i sprawdzenie zakresu znaków (dla crc)
		//string crc - wartość crc zapisana w postaci znakowej np."25"
		memcpy(stringCRC, bufferedFrame + len - 2, 2);
 8000d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d58:	3b02      	subs	r3, #2
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	82bb      	strh	r3, [r7, #20]
		stringCRC[2] = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < 2; ++i) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	77fb      	strb	r3, [r7, #31]
 8000d6c:	e012      	b.n	8000d94 <analizeFrame+0xbc>
			if (!(stringCRC[i] >= 0x30 && stringCRC[i] <= 0x39)) {
 8000d6e:	7ffb      	ldrb	r3, [r7, #31]
 8000d70:	3320      	adds	r3, #32
 8000d72:	443b      	add	r3, r7
 8000d74:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d78:	2b2f      	cmp	r3, #47	; 0x2f
 8000d7a:	d906      	bls.n	8000d8a <analizeFrame+0xb2>
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	3320      	adds	r3, #32
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d86:	2b39      	cmp	r3, #57	; 0x39
 8000d88:	d901      	bls.n	8000d8e <analizeFrame+0xb6>
				return 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e03b      	b.n	8000e06 <analizeFrame+0x12e>
		for (i = 0; i < 2; ++i) {
 8000d8e:	7ffb      	ldrb	r3, [r7, #31]
 8000d90:	3301      	adds	r3, #1
 8000d92:	77fb      	strb	r3, [r7, #31]
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d9e9      	bls.n	8000d6e <analizeFrame+0x96>
			}
		}
		//Pobranie danych
		//Pobieranie długości danych (długość ramki - stałe elementy)
		commandLength = len - 8;
 8000d9a:	897b      	ldrh	r3, [r7, #10]
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	83bb      	strh	r3, [r7, #28]
		memcpy(bufferedFrame, bufferedFrame + 6, commandLength);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3306      	adds	r3, #6
 8000da4:	8bba      	ldrh	r2, [r7, #28]
 8000da6:	4619      	mov	r1, r3
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f005 fed9 	bl	8006b60 <memcpy>
		//string null-terminated na końcu
		bufferedFrame[commandLength] = 0;
 8000dae:	8bbb      	ldrh	r3, [r7, #28]
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

		//Sprawdzenie konkretnych wartości CRC
		intCRC = atoi(stringCRC);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f005 fdb9 	bl	8006934 <atoi>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	76fb      	strb	r3, [r7, #27]
		if ((crc_temp = CRC_100(bufferedFrame, commandLength)) != intCRC) {
 8000dc6:	8bbb      	ldrh	r3, [r7, #28]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 f925 	bl	800101c <CRC_100>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	76bb      	strb	r3, [r7, #26]
 8000dd6:	7eba      	ldrb	r2, [r7, #26]
 8000dd8:	7efb      	ldrb	r3, [r7, #27]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d010      	beq.n	8000e00 <analizeFrame+0x128>
			sprintf(wrong, "WRONG_CRC_%02d;", crc_temp);
 8000dde:	7ebb      	ldrb	r3, [r7, #26]
 8000de0:	461a      	mov	r2, r3
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <analizeFrame+0x13c>)
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <analizeFrame+0x140>)
 8000de6:	f005 fe35 	bl	8006a54 <siprintf>
			sendFrame(sender_add, wrong, strlen(wrong));
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <analizeFrame+0x140>)
 8000dec:	f7ff f9f8 	bl	80001e0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4908      	ldr	r1, [pc, #32]	; (8000e18 <analizeFrame+0x140>)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f810 	bl	8000e1c <sendFrame>
			return 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e002      	b.n	8000e06 <analizeFrame+0x12e>
		}
		return 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <analizeFrame+0x12e>
	}
	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08007440 	.word	0x08007440
 8000e14:	08007420 	.word	0x08007420
 8000e18:	20000690 	.word	0x20000690

08000e1c <sendFrame>:

void sendFrame(char dst[4], char *com, uint8_t com_len) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e28:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000e2c:	6018      	str	r0, [r3, #0]
 8000e2e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e32:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000e36:	6019      	str	r1, [r3, #0]
 8000e38:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e3c:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000e40:	701a      	strb	r2, [r3, #0]
	char frameToSend[frameMin + 510 + 1];
	uint16_t codeCommandLength;
	uint8_t crc;
	char codeCommand[510];

	codeCommandLength = code_Command(com, codeCommand, com_len);
 8000e42:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e46:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	f107 0114 	add.w	r1, r7, #20
 8000e50:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e54:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f000 f87f 	bl	8000f5c <code_Command>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

	frameToSend[0] = startFrame;
 8000e64:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000e68:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000e6c:	227b      	movs	r2, #123	; 0x7b
 8000e6e:	701a      	strb	r2, [r3, #0]
	memcpy(frameToSend + 1, dst, 3);
 8000e70:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e74:	3301      	adds	r3, #1
 8000e76:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e7a:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 8000e7e:	2203      	movs	r2, #3
 8000e80:	6809      	ldr	r1, [r1, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fe6c 	bl	8006b60 <memcpy>
	memcpy(frameToSend + 1 + 3, device_address, 3);
 8000e88:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2203      	movs	r2, #3
 8000e90:	4930      	ldr	r1, [pc, #192]	; (8000f54 <sendFrame+0x138>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 fe64 	bl	8006b60 <memcpy>

	memcpy(frameToSend + 1 + 3 + 3, codeCommand, codeCommandLength);
 8000e98:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000ea2:	f107 0114 	add.w	r1, r7, #20
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 fe5a 	bl	8006b60 <memcpy>

	//przed zakodowaniem znaków
	crc = CRC_100(com, com_len);
 8000eac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000eb0:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000eba:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	f000 f8ab 	bl	800101c <CRC_100>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	// 78/10 =7
	// 7+48 = 55
	// "7"
	frameToSend[1 + 3 + 3 + codeCommandLength] = crc / 10 + 48;
 8000ecc:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <sendFrame+0x13c>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000ede:	3307      	adds	r3, #7
 8000ee0:	3230      	adds	r2, #48	; 0x30
 8000ee2:	b2d1      	uxtb	r1, r2
 8000ee4:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000ee8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000eec:	54d1      	strb	r1, [r2, r3]
	// 78 % 10 = 8
	// 8 + 48 = 56
	// "8"
	frameToSend[1 + 3 + 3  + codeCommandLength + 1] = crc % 10 + 48;
 8000eee:	f897 241d 	ldrb.w	r2, [r7, #1053]	; 0x41d
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <sendFrame+0x13c>)
 8000ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef8:	08d9      	lsrs	r1, r3, #3
 8000efa:	460b      	mov	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	3230      	adds	r2, #48	; 0x30
 8000f0e:	b2d1      	uxtb	r1, r2
 8000f10:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000f14:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000f18:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 2] = endFrame;
 8000f1a:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000f1e:	3309      	adds	r3, #9
 8000f20:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000f24:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000f28:	217d      	movs	r1, #125	; 0x7d
 8000f2a:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 3] = 0;
 8000f2c:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000f30:	330a      	adds	r3, #10
 8000f32:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000f36:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	54d1      	strb	r1, [r2, r3]

	USART_fSend(frameToSend);
 8000f3e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd42 	bl	80009cc <USART_fSend>
}
 8000f48:	bf00      	nop
 8000f4a:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08007440 	.word	0x08007440
 8000f58:	cccccccd 	.word	0xcccccccd

08000f5c <code_Command>:

//Przerobienie znaków początku, końca i znaku kodującego na nadające się do przesyłania w ramce
int16_t code_Command(char *src, char *dst, uint8_t com_len) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	4613      	mov	r3, r2
 8000f68:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	uint16_t j;
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	82fb      	strh	r3, [r7, #22]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	82bb      	strh	r3, [r7, #20]
 8000f72:	e045      	b.n	8001000 <code_Command+0xa4>

		switch (src[i]) {
 8000f74:	8afb      	ldrh	r3, [r7, #22]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b7d      	cmp	r3, #125	; 0x7d
 8000f7e:	d022      	beq.n	8000fc6 <code_Command+0x6a>
 8000f80:	2b7d      	cmp	r3, #125	; 0x7d
 8000f82:	dc2e      	bgt.n	8000fe2 <code_Command+0x86>
 8000f84:	2b60      	cmp	r3, #96	; 0x60
 8000f86:	d002      	beq.n	8000f8e <code_Command+0x32>
 8000f88:	2b7b      	cmp	r3, #123	; 0x7b
 8000f8a:	d00e      	beq.n	8000faa <code_Command+0x4e>
 8000f8c:	e029      	b.n	8000fe2 <code_Command+0x86>
		case codingChar:
			dst[j++] = codingChar;
 8000f8e:	8abb      	ldrh	r3, [r7, #20]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	82ba      	strh	r2, [r7, #20]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2260      	movs	r2, #96	; 0x60
 8000f9c:	701a      	strb	r2, [r3, #0]
			dst[j] = codingChar;
 8000f9e:	8abb      	ldrh	r3, [r7, #20]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2260      	movs	r2, #96	; 0x60
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e024      	b.n	8000ff4 <code_Command+0x98>
		case startFrame:
			dst[j++] = codingChar;
 8000faa:	8abb      	ldrh	r3, [r7, #20]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	82ba      	strh	r2, [r7, #20]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2260      	movs	r2, #96	; 0x60
 8000fb8:	701a      	strb	r2, [r3, #0]
			dst[j] = '[';
 8000fba:	8abb      	ldrh	r3, [r7, #20]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	225b      	movs	r2, #91	; 0x5b
 8000fc2:	701a      	strb	r2, [r3, #0]
			break;
 8000fc4:	e016      	b.n	8000ff4 <code_Command+0x98>
		case endFrame:
			dst[j++] = codingChar;
 8000fc6:	8abb      	ldrh	r3, [r7, #20]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	82ba      	strh	r2, [r7, #20]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2260      	movs	r2, #96	; 0x60
 8000fd4:	701a      	strb	r2, [r3, #0]
			dst[j] = ']';
 8000fd6:	8abb      	ldrh	r3, [r7, #20]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	225d      	movs	r2, #93	; 0x5d
 8000fde:	701a      	strb	r2, [r3, #0]
			break;
 8000fe0:	e008      	b.n	8000ff4 <code_Command+0x98>
		default:
			dst[j] = src[i];
 8000fe2:	8afb      	ldrh	r3, [r7, #22]
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	441a      	add	r2, r3
 8000fe8:	8abb      	ldrh	r3, [r7, #20]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	440b      	add	r3, r1
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	701a      	strb	r2, [r3, #0]
			break;
 8000ff2:	bf00      	nop
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	82fb      	strh	r3, [r7, #22]
 8000ffa:	8abb      	ldrh	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	82bb      	strh	r3, [r7, #20]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29b      	uxth	r3, r3
 8001004:	8afa      	ldrh	r2, [r7, #22]
 8001006:	429a      	cmp	r2, r3
 8001008:	d3b4      	bcc.n	8000f74 <code_Command+0x18>
		}
	}
	return j;
 800100a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800100e:	4618      	mov	r0, r3
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <CRC_100>:

uint8_t CRC_100(char *src, uint8_t len) {
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t temp = src[0];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e009      	b.n	8001048 <CRC_100+0x2c>
		temp ^= src[i];
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	4053      	eors	r3, r2
 8001040:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3301      	adds	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3f1      	bcc.n	8001034 <CRC_100+0x18>
	}
	temp %= 100;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <CRC_100+0x58>)
 8001054:	fba2 1203 	umull	r1, r2, r2, r3
 8001058:	0952      	lsrs	r2, r2, #5
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	fb01 f202 	mul.w	r2, r1, r2
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	73bb      	strb	r3, [r7, #14]
	return temp;
 8001064:	7bbb      	ldrb	r3, [r7, #14]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	51eb851f 	.word	0x51eb851f

08001078 <analizeCommend>:

void analizeCommend(char* com, uint8_t len, char* sender_add) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	460b      	mov	r3, r1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	72fb      	strb	r3, [r7, #11]
	if (strncmp(com,"GetSurvey()", (unsigned)11) == 0) {
 8001086:	220b      	movs	r2, #11
 8001088:	4914      	ldr	r1, [pc, #80]	; (80010dc <analizeCommend+0x64>)
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f005 fd2a 	bl	8006ae4 <strncmp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11d      	bne.n	80010d2 <analizeCommend+0x5a>
		GetSurvey();
 8001096:	f7ff fc45 	bl	8000924 <GetSurvey>
		char stringDistance[20];
		//sprintf(stringDistance, "%lu", (unsigned long)dmaDestination);
		strcat(stringDistance, "cm");
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f89e 	bl	80001e0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4413      	add	r3, r2
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <analizeCommend+0x68>)
 80010b0:	8811      	ldrh	r1, [r2, #0]
 80010b2:	7892      	ldrb	r2, [r2, #2]
 80010b4:	8019      	strh	r1, [r3, #0]
 80010b6:	709a      	strb	r2, [r3, #2]
		sendFrame(sender_add, stringDistance, strlen(stringDistance));
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f88f 	bl	80001e0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fea5 	bl	8000e1c <sendFrame>
	}
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	08007430 	.word	0x08007430
 80010e0:	0800743c 	.word	0x0800743c

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x44>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001126:	2007      	movs	r0, #7
 8001128:	f000 fb7a 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a61      	ldr	r2, [pc, #388]	; (80012dc <HAL_TIM_Base_MspInit+0x1a4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d152      	bne.n	8001200 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115a:	4b61      	ldr	r3, [pc, #388]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a60      	ldr	r2, [pc, #384]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800119c:	2306      	movs	r3, #6
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fd17 	bl	8001bdc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_TIM_Base_MspInit+0x1b0>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b4:	4b4b      	ldr	r3, [pc, #300]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011c0:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80011d6:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011d8:	2220      	movs	r2, #32
 80011da:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80011dc:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80011e2:	4840      	ldr	r0, [pc, #256]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011e4:	f000 fb5d 	bl	80018a2 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_TIM_Base_MspInit+0xba>
    {
      Error_Handler();
 80011ee:	f7ff ff79 	bl	80010e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a3b      	ldr	r2, [pc, #236]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
 80011f8:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011fe:	e068      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001208:	d152      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a2e      	ldr	r2, [pc, #184]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6153      	str	r3, [r2, #20]
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Trig_Pin;
 800123a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800124c:	230a      	movs	r3, #10
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fcbf 	bl	8001bdc <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001284:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001288:	2220      	movs	r2, #32
 800128a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001292:	4816      	ldr	r0, [pc, #88]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 8001294:	f000 fb05 	bl	80018a2 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_TIM_Base_MspInit+0x16a>
      Error_Handler();
 800129e:	f7ff ff21 	bl	80010e4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
 80012a8:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_TIM_Base_MspInit+0x1b4>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6253      	str	r3, [r2, #36]	; 0x24
}
 80012ae:	e010      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x19a>
  else if(htim_base->Instance==TIM3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_TIM_Base_MspInit+0x1bc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x19a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_TIM_Base_MspInit+0x1a8>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
}
 80012d2:	bf00      	nop
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012c00 	.word	0x40012c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	20000180 	.word	0x20000180
 80012e8:	4002001c 	.word	0x4002001c
 80012ec:	200001c4 	.word	0x200001c4
 80012f0:	40020058 	.word	0x40020058
 80012f4:	40000400 	.word	0x40000400

080012f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001318:	d11d      	bne.n	8001356 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fc44 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001354:	e021      	b.n	800139a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_TIM_MspPostInit+0xb0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d11c      	bne.n	800139a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136a:	6153      	str	r3, [r2, #20]
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_TIM_MspPostInit+0xac>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001378:	2340      	movs	r3, #64	; 0x40
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001388:	2302      	movs	r3, #2
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f000 fc21 	bl	8001bdc <HAL_GPIO_Init>
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40000400 	.word	0x40000400

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_UART_MspInit+0x8c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d130      	bne.n	8001430 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_UART_MspInit+0x90>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <HAL_UART_MspInit+0x90>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_UART_MspInit+0x90>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x90>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <HAL_UART_MspInit+0x90>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_UART_MspInit+0x90>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f000 fbde 	bl	8001bdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2026      	movs	r0, #38	; 0x26
 8001426:	f000 fa06 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800142a:	2026      	movs	r0, #38	; 0x26
 800142c:	f000 fa1f 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8d8 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <DMA1_Channel2_IRQHandler+0x10>)
 800149a:	f000 fac0 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000180 	.word	0x20000180

080014a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <DMA1_Channel5_IRQHandler+0x10>)
 80014ae:	f000 fab6 	bl	8001a1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200001c4 	.word	0x200001c4

080014bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <USART2_IRQHandler+0x10>)
 80014c2:	f003 ffdd 	bl	8005480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000208 	.word	0x20000208

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f005 fb02 	bl	8006b08 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20010000 	.word	0x20010000
 8001530:	00000400 	.word	0x00000400
 8001534:	200009c0 	.word	0x200009c0
 8001538:	20000b10 	.word	0x20000b10

0800153c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <LoopForever+0x6>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	; (80015a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <LoopForever+0xe>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	; (80015ac <LoopForever+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f005 fac1 	bl	8006b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001592:	f7fe feb1 	bl	80002f8 <main>

08001596 <LoopForever>:

LoopForever:
    b LoopForever
 8001596:	e7fe      	b.n	8001596 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001598:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80015a4:	080075b8 	.word	0x080075b8
  ldr r2, =_sbss
 80015a8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015ac:	20000b10 	.word	0x20000b10

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x28>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f92b 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fd8e 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000

080015e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f943 	bl	800188a <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f90b 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000024 	.word	0x20000024
 8001638:	2000002c 	.word	0x2000002c
 800163c:	20000028 	.word	0x20000028

08001640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000002c 	.word	0x2000002c
 8001664:	200009c4 	.word	0x200009c4

08001668 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;  
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200009c4 	.word	0x200009c4

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e037      	b.n	8001928 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f92a 	bl	8001b64 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}  
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800193e:	2b02      	cmp	r3, #2
 8001940:	d008      	beq.n	8001954 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2204      	movs	r2, #4
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e020      	b.n	8001996 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020e 	bic.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d005      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e027      	b.n	8001a14 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020e 	bic.w	r2, r2, #14
 80019d2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
    } 
  }
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d024      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x72>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01f      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d107      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0204 	bic.w	r2, r2, #4
 8001a6c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	2104      	movs	r1, #4
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06a      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a8e:	e065      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	2202      	movs	r2, #2
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02c      	beq.n	8001afa <HAL_DMA_IRQHandler+0xdc>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d027      	beq.n	8001afa <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 020a 	bic.w	r2, r2, #10
 8001ac6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	2102      	movs	r1, #2
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d035      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001af8:	e030      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2208      	movs	r2, #8
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d028      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 020e 	bic.w	r2, r2, #14
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
    }
  }
}  
 8001b5a:	e7ff      	b.n	8001b5c <HAL_DMA_IRQHandler+0x13e>
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <DMA_CalcBaseAndBitshift+0x60>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d80f      	bhi.n	8001b98 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b80:	4413      	add	r3, r2
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <DMA_CalcBaseAndBitshift+0x68>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b96:	e00e      	b.n	8001bb6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <DMA_CalcBaseAndBitshift+0x70>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <DMA_CalcBaseAndBitshift+0x68>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	009a      	lsls	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <DMA_CalcBaseAndBitshift+0x74>)
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40020407 	.word	0x40020407
 8001bc8:	bffdfff8 	.word	0xbffdfff8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	bffdfbf8 	.word	0xbffdfbf8
 8001bd8:	40020400 	.word	0x40020400

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bea:	e160      	b.n	8001eae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8152 	beq.w	8001ea8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d005      	beq.n	8001c1c <HAL_GPIO_Init+0x40>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d017      	beq.n	8001cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d123      	bne.n	8001d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0203 	and.w	r2, r3, #3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80ac 	beq.w	8001ea8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_GPIO_Init+0x2f0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <HAL_GPIO_Init+0x2f0>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_GPIO_Init+0x2f0>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d68:	4a59      	ldr	r2, [pc, #356]	; (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d92:	d025      	beq.n	8001de0 <HAL_GPIO_Init+0x204>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_GPIO_Init+0x2f8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d01f      	beq.n	8001ddc <HAL_GPIO_Init+0x200>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_GPIO_Init+0x2fc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d019      	beq.n	8001dd8 <HAL_GPIO_Init+0x1fc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_GPIO_Init+0x300>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a4c      	ldr	r2, [pc, #304]	; (8001ee0 <HAL_GPIO_Init+0x304>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1f4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <HAL_GPIO_Init+0x308>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1f0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1ec>
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	e00c      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dc8:	2307      	movs	r3, #7
 8001dca:	e00a      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dcc:	2305      	movs	r3, #5
 8001dce:	e008      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e006      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e004      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_GPIO_Init+0x206>
 8001de0:	2300      	movs	r3, #0
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	f002 0203 	and.w	r2, r2, #3
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	4093      	lsls	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df2:	4937      	ldr	r1, [pc, #220]	; (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e00:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e24:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e4e:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f47f ae97 	bne.w	8001bec <HAL_GPIO_Init+0x10>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	48001000 	.word	0x48001000
 8001ee4:	48001400 	.word	0x48001400
 8001ee8:	48001800 	.word	0x48001800
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f001 b83a 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 816f 	beq.w	800223a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f5c:	4bb5      	ldr	r3, [pc, #724]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f68:	4bb2      	ldr	r3, [pc, #712]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d15c      	bne.n	800202e <HAL_RCC_OscConfig+0x10e>
 8001f74:	4baf      	ldr	r3, [pc, #700]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d155      	bne.n	800202e <HAL_RCC_OscConfig+0x10e>
 8001f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x94>
 8001fae:	4ba1      	ldr	r3, [pc, #644]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e015      	b.n	8001fe0 <HAL_RCC_OscConfig+0xc0>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fd0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fdc:	4b95      	ldr	r3, [pc, #596]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001fe8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ff4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8111 	beq.w	8002238 <HAL_RCC_OscConfig+0x318>
 8002016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8108 	bne.w	8002238 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f000 bfc6 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x12e>
 8002040:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7b      	ldr	r2, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e036      	b.n	80020bc <HAL_RCC_OscConfig+0x19c>
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x158>
 800205e:	4b75      	ldr	r3, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a74      	ldr	r2, [pc, #464]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b72      	ldr	r3, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e021      	b.n	80020bc <HAL_RCC_OscConfig+0x19c>
 8002078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x184>
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a69      	ldr	r2, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a66      	ldr	r2, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0x19c>
 80020a4:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a62      	ldr	r2, [pc, #392]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b60      	ldr	r3, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d059      	beq.n	8002180 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff facc 	bl	8001668 <HAL_GetTick>
 80020d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d6:	f7ff fac7 	bl	8001668 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d902      	bls.n	80020ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	f000 bf67 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002100:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0x1fe>
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x22a>
 800211e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002122:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002136:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800213a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002146:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800214e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002152:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800215e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ab      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1b6>
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fa72 	bl	8001668 <HAL_GetTick>
 8002184:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218a:	f7ff fa6d 	bl	8001668 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d902      	bls.n	80021a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f000 bf0d 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80021b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2b2>
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x2de>
 80021d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCC_OscConfig+0x314>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002206:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002212:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002216:	fab2 f282 	clz	r2, r2
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f042 0220 	orr.w	r2, r2, #32
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f002 021f 	and.w	r2, r2, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ab      	bne.n	800218a <HAL_RCC_OscConfig+0x26a>
 8002232:	e002      	b.n	800223a <HAL_RCC_OscConfig+0x31a>
 8002234:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 817f 	beq.w	800254e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002250:	4ba7      	ldr	r3, [pc, #668]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00c      	beq.n	8002276 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800225c:	4ba4      	ldr	r3, [pc, #656]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d173      	bne.n	8002350 <HAL_RCC_OscConfig+0x430>
 8002268:	4ba1      	ldr	r3, [pc, #644]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002274:	d16c      	bne.n	8002350 <HAL_RCC_OscConfig+0x430>
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002288:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0x386>
 80022a0:	4b93      	ldr	r3, [pc, #588]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x3ae>
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2202      	movs	r2, #2
 80022d0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80022d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80022d8:	fa92 f2a2 	rbit	r2, r2
 80022dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80022e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCC_OscConfig+0x3f6>
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d002      	beq.n	8002316 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f000 be52 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	21f8      	movs	r1, #248	; 0xf8
 800232c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002334:	fa91 f1a1 	rbit	r1, r1
 8002338:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800233c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002340:	fab1 f181 	clz	r1, r1
 8002344:	b2c9      	uxtb	r1, r1
 8002346:	408b      	lsls	r3, r1
 8002348:	4969      	ldr	r1, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e0fe      	b.n	800254e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8088 	beq.w	8002472 <HAL_RCC_OscConfig+0x552>
 8002362:	2301      	movs	r3, #1
 8002364:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002374:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002382:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff f96b 	bl	8001668 <HAL_GetTick>
 8002392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff f966 	bl	8001668 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f000 be06 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80023c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x4be>
 80023d8:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e013      	b.n	8002406 <HAL_RCC_OscConfig+0x4e6>
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2202      	movs	r2, #2
 8002408:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800240c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002418:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f042 0220 	orr.w	r2, r2, #32
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f002 021f 	and.w	r2, r2, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0af      	beq.n	8002398 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	21f8      	movs	r1, #248	; 0xf8
 800244e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002456:	fa91 f1a1 	rbit	r1, r1
 800245a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800245e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002462:	fab1 f181 	clz	r1, r1
 8002466:	b2c9      	uxtb	r1, r1
 8002468:	408b      	lsls	r3, r1
 800246a:	4921      	ldr	r1, [pc, #132]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e06d      	b.n	800254e <HAL_RCC_OscConfig+0x62e>
 8002472:	2301      	movs	r3, #1
 8002474:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002484:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	461a      	mov	r2, r3
 800249a:	2300      	movs	r3, #0
 800249c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff f8e3 	bl	8001668 <HAL_GetTick>
 80024a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff f8de 	bl	8001668 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d902      	bls.n	80024be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	f000 bd7e 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80024d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5d4>
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <HAL_RCC_OscConfig+0x5d0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e016      	b.n	800251c <HAL_RCC_OscConfig+0x5fc>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800250c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002518:	4bbf      	ldr	r3, [pc, #764]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002522:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800252e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ac      	bne.n	80024a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8113 	beq.w	800278a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d07c      	beq.n	800266e <HAL_RCC_OscConfig+0x74e>
 8002574:	2301      	movs	r3, #1
 8002576:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002586:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4ba2      	ldr	r3, [pc, #648]	; (800281c <HAL_RCC_OscConfig+0x8fc>)
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	2301      	movs	r3, #1
 800259c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff f863 	bl	8001668 <HAL_GetTick>
 80025a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff f85e 	bl	8001668 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f000 bcfe 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800261c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 8002620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800262a:	2102      	movs	r1, #2
 800262c:	6019      	str	r1, [r3, #0]
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f1a3 	rbit	r1, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002644:	6019      	str	r1, [r3, #0]
  return result;
 8002646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d09d      	beq.n	80025a8 <HAL_RCC_OscConfig+0x688>
 800266c:	e08d      	b.n	800278a <HAL_RCC_OscConfig+0x86a>
 800266e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002672:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800269a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x8fc>)
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7fe ffda 	bl	8001668 <HAL_GetTick>
 80026b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ba:	f7fe ffd5 	bl	8001668 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d902      	bls.n	80026d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	f000 bc75 	b.w	8002fba <HAL_RCC_OscConfig+0x109a>
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d8:	2202      	movs	r2, #2
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026fc:	2202      	movs	r2, #2
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002720:	2202      	movs	r2, #2
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002736:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800273a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 800273e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002748:	2102      	movs	r1, #2
 800274a:	6019      	str	r1, [r3, #0]
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f1a3 	rbit	r1, r3
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002762:	6019      	str	r1, [r3, #0]
  return result;
 8002764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002768:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d197      	bne.n	80026ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 81a5 	beq.w	8002aea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_RCC_OscConfig+0x8f8>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCC_OscConfig+0x900>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d121      	bne.n	8002830 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_OscConfig+0x900>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x900>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f8:	f7fe ff36 	bl	8001668 <HAL_GetTick>
 80027fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e010      	b.n	8002824 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe ff31 	bl	8001668 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d908      	bls.n	8002824 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e3d1      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	10908120 	.word	0x10908120
 8002820:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b8d      	ldr	r3, [pc, #564]	; (8002a5c <HAL_RCC_OscConfig+0xb3c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0e8      	beq.n	8002802 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x92e>
 8002840:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a86      	ldr	r2, [pc, #536]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e035      	b.n	80028ba <HAL_RCC_OscConfig+0x99a>
 800284e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002852:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x958>
 800285e:	4b80      	ldr	r3, [pc, #512]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a7f      	ldr	r2, [pc, #508]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b7d      	ldr	r3, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a7c      	ldr	r2, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	e020      	b.n	80028ba <HAL_RCC_OscConfig+0x99a>
 8002878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x982>
 8002888:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a74      	ldr	r2, [pc, #464]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x99a>
 80028a2:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a6b      	ldr	r2, [pc, #428]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8081 	beq.w	80029ce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fecc 	bl	8001668 <HAL_GetTick>
 80028d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fec7 	bl	8001668 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e365      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 80028ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800290c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002916:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002922:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002930:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002934:	601a      	str	r2, [r3, #0]
  return result;
 8002936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800293e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d102      	bne.n	800295a <HAL_RCC_OscConfig+0xa3a>
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	e013      	b.n	8002982 <HAL_RCC_OscConfig+0xa62>
 800295a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002978:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002986:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800298a:	2102      	movs	r1, #2
 800298c:	6011      	str	r1, [r2, #0]
 800298e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002992:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fa92 f1a2 	rbit	r1, r2
 800299c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029a0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029a4:	6011      	str	r1, [r2, #0]
  return result;
 80029a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029aa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f002 021f 	and.w	r2, r2, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d084      	beq.n	80028d6 <HAL_RCC_OscConfig+0x9b6>
 80029cc:	e083      	b.n	8002ad6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fe4b 	bl	8001668 <HAL_GetTick>
 80029d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fe46 	bl	8001668 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e2e4      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a36:	601a      	str	r2, [r3, #0]
  return result;
 8002a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0xb44>
 8002a56:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_RCC_OscConfig+0xb40>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	e017      	b.n	8002a8c <HAL_RCC_OscConfig+0xb6c>
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	4bb3      	ldr	r3, [pc, #716]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a94:	2102      	movs	r1, #2
 8002a96:	6011      	str	r1, [r2, #0]
 8002a98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fa92 f1a2 	rbit	r1, r2
 8002aa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aaa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002aae:	6011      	str	r1, [r2, #0]
  return result;
 8002ab0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f002 021f 	and.w	r2, r2, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d180      	bne.n	80029d8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ad6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a9d      	ldr	r2, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 825e 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	f000 821f 	beq.w	8002f48 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	f040 8170 	bne.w	8002dfc <HAL_RCC_OscConfig+0xedc>
 8002b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fa93 f2a3 	rbit	r2, r3
 8002b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b40:	601a      	str	r2, [r3, #0]
  return result;
 8002b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fd81 	bl	8001668 <HAL_GetTick>
 8002b66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	e009      	b.n	8002b80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fd7c 	bl	8001668 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e21c      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 8002b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ba4:	601a      	str	r2, [r3, #0]
  return result;
 8002ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002baa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0xcaa>
 8002bc4:	4b64      	ldr	r3, [pc, #400]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e027      	b.n	8002c1a <HAL_RCC_OscConfig+0xcfa>
 8002bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bdc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c26:	6011      	str	r1, [r2, #0]
 8002c28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fa92 f1a2 	rbit	r1, r2
 8002c36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c3a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c3e:	6011      	str	r1, [r2, #0]
  return result;
 8002c40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c44:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0220 	orr.w	r2, r2, #32
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d182      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	4937      	ldr	r1, [pc, #220]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c80:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a19      	ldr	r1, [r3, #32]
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	492d      	ldr	r1, [pc, #180]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ccc:	601a      	str	r2, [r3, #0]
  return result;
 8002cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2301      	movs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fcbb 	bl	8001668 <HAL_GetTick>
 8002cf2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf6:	e009      	b.n	8002d0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fcb6 	bl	8001668 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e156      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 8002d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d30:	601a      	str	r2, [r3, #0]
  return result;
 8002d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0xe3c>
 8002d50:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <HAL_RCC_OscConfig+0xe38>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e02a      	b.n	8002dac <HAL_RCC_OscConfig+0xe8c>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <HAL_RCC_OscConfig+0x10a4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002db0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dbe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	fa92 f1a2 	rbit	r1, r2
 8002dc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dcc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002dd0:	6011      	str	r1, [r2, #0]
  return result;
 8002dd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dd6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f042 0220 	orr.w	r2, r2, #32
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f002 021f 	and.w	r2, r2, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f202 	lsl.w	r2, r1, r2
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f43f af7f 	beq.w	8002cf8 <HAL_RCC_OscConfig+0xdd8>
 8002dfa:	e0dd      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1098>
 8002dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e20:	601a      	str	r2, [r3, #0]
  return result;
 8002e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe fc11 	bl	8001668 <HAL_GetTick>
 8002e46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fc0c 	bl	8001668 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0ac      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
 8002e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	fa93 f2a3 	rbit	r2, r3
 8002e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e84:	601a      	str	r2, [r3, #0]
  return result;
 8002e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_OscConfig+0xf8a>
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x10a4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	e027      	b.n	8002efa <HAL_RCC_OscConfig+0xfda>
 8002eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002eb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	fa93 f2a3 	rbit	r2, r3
 8002ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x10a4>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002efe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f06:	6011      	str	r1, [r2, #0]
 8002f08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	fa92 f1a2 	rbit	r1, r2
 8002f16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f1a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f1e:	6011      	str	r1, [r2, #0]
  return result;
 8002f20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f24:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d182      	bne.n	8002e4c <HAL_RCC_OscConfig+0xf2c>
 8002f46:	e037      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e02e      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x10a4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x10a4>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f70:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d117      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f88:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b09e      	sub	sp, #120	; 0x78
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e162      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b90      	ldr	r3, [pc, #576]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b8d      	ldr	r3, [pc, #564]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	498b      	ldr	r1, [pc, #556]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e14a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	497f      	ldr	r1, [pc, #508]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80dc 	beq.w	80031f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d13c      	bne.n	80030be <HAL_RCC_ClockConfig+0xf6>
 8003044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003048:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_ClockConfig+0xa6>
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e00f      	b.n	800308e <HAL_RCC_ClockConfig+0xc6>
 800306e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003072:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	667b      	str	r3, [r7, #100]	; 0x64
 800307c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003080:	663b      	str	r3, [r7, #96]	; 0x60
 8003082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800308a:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003092:	65ba      	str	r2, [r7, #88]	; 0x58
 8003094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003096:	fa92 f2a2 	rbit	r2, r2
 800309a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800309c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800309e:	fab2 f282 	clz	r2, r2
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	f042 0220 	orr.w	r2, r2, #32
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f002 021f 	and.w	r2, r2, #31
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d17b      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0f3      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d13c      	bne.n	8003140 <HAL_RCC_ClockConfig+0x178>
 80030c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x128>
 80030ea:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	e00f      	b.n	8003110 <HAL_RCC_ClockConfig+0x148>
 80030f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	647b      	str	r3, [r7, #68]	; 0x44
 80030fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003114:	63ba      	str	r2, [r7, #56]	; 0x38
 8003116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003118:	fa92 f2a2 	rbit	r2, r2
 800311c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	4013      	ands	r3, r2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13a      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b2      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
 8003140:	2302      	movs	r3, #2
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_ClockConfig+0x1a0>
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e00d      	b.n	8003184 <HAL_RCC_ClockConfig+0x1bc>
 8003168:	2302      	movs	r3, #2
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	2302      	movs	r3, #2
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2202      	movs	r2, #2
 8003186:	61ba      	str	r2, [r7, #24]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	fa92 f2a2 	rbit	r2, r2
 800318e:	617a      	str	r2, [r7, #20]
  return result;
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f042 0220 	orr.w	r2, r2, #32
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f002 021f 	and.w	r2, r2, #31
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e079      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	491a      	ldr	r1, [pc, #104]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fa50 	bl	8001668 <HAL_GetTick>
 80031c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fe fa4c 	bl	8001668 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e061      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d214      	bcs.n	800322c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4906      	ldr	r1, [pc, #24]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e040      	b.n	80032a6 <HAL_RCC_ClockConfig+0x2de>
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCC_ClockConfig+0x2e8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	491a      	ldr	r1, [pc, #104]	; (80032b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800326a:	f000 f829 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800326e:	4601      	mov	r1, r0
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	22f0      	movs	r2, #240	; 0xf0
 800327a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	fa92 f2a2 	rbit	r2, r2
 8003282:	60fa      	str	r2, [r7, #12]
  return result;
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	fab2 f282 	clz	r2, r2
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	40d3      	lsrs	r3, r2
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	fa21 f303 	lsr.w	r3, r1, r3
 8003296:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_RCC_ClockConfig+0x2f4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f99e 	bl	80015e0 <HAL_InitTick>
  
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3778      	adds	r7, #120	; 0x78
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08007444 	.word	0x08007444
 80032b8:	20000024 	.word	0x20000024
 80032bc:	20000028 	.word	0x20000028

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b08b      	sub	sp, #44	; 0x2c
 80032c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	2300      	movs	r3, #0
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032da:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x30>
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x36>
 80032ee:	e03f      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032f2:	623b      	str	r3, [r7, #32]
      break;
 80032f4:	e03f      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003300:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	607a      	str	r2, [r7, #4]
  return result;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	40d3      	lsrs	r3, r2
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_RCC_GetSysClockFreq+0xc4>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	220f      	movs	r2, #15
 8003324:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	fa92 f2a2 	rbit	r2, r2
 800332c:	60fa      	str	r2, [r7, #12]
  return result;
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	40d3      	lsrs	r3, r2
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_RCC_GetSysClockFreq+0xd0>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003348:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <HAL_RCC_GetSysClockFreq+0xc8>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	e007      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_RCC_GetSysClockFreq+0xc8>)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	623b      	str	r3, [r7, #32]
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003372:	623b      	str	r3, [r7, #32]
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	6a3b      	ldr	r3, [r7, #32]
}
 8003378:	4618      	mov	r0, r3
 800337a:	372c      	adds	r7, #44	; 0x2c
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	007a1200 	.word	0x007a1200
 800338c:	0800745c 	.word	0x0800745c
 8003390:	0800746c 	.word	0x0800746c

08003394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000024 	.word	0x20000024

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033b2:	f7ff ffef 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b6:	4601      	mov	r1, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	603a      	str	r2, [r7, #0]
  return result;
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	40d3      	lsrs	r3, r2
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08007454 	.word	0x08007454

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033f6:	f7ff ffcd 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003404:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fa92 f2a2 	rbit	r2, r2
 8003410:	603a      	str	r2, [r7, #0]
  return result;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	40d3      	lsrs	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x40>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08007454 	.word	0x08007454

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b092      	sub	sp, #72	; 0x48
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80d4 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003458:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10e      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	61d3      	str	r3, [r2, #28]
 8003470:	4b48      	ldr	r3, [pc, #288]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b45      	ldr	r3, [pc, #276]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a41      	ldr	r2, [pc, #260]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fe f8e5 	bl	8001668 <HAL_GetTick>
 800349e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe f8e1 	bl	8001668 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1d6      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8084 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d07c      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	461a      	mov	r2, r3
 800350a:	2301      	movs	r3, #1
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	2300      	movs	r3, #0
 8003530:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe f891 	bl	8001668 <HAL_GetTick>
 8003546:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe f88d 	bl	8001668 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e180      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003560:	2302      	movs	r3, #2
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	2302      	movs	r3, #2
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
  return result;
 8003578:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d108      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800358e:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	e00d      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	10908100 	.word	0x10908100
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	4b9a      	ldr	r3, [pc, #616]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2202      	movs	r2, #2
 80035b2:	613a      	str	r2, [r7, #16]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	60fa      	str	r2, [r7, #12]
  return result;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0b7      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035da:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	498c      	ldr	r1, [pc, #560]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4b88      	ldr	r3, [pc, #544]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4a87      	ldr	r2, [pc, #540]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360c:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f023 0203 	bic.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	497f      	ldr	r1, [pc, #508]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362a:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4978      	ldr	r1, [pc, #480]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003648:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4970      	ldr	r1, [pc, #448]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003666:	4b6c      	ldr	r3, [pc, #432]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4969      	ldr	r1, [pc, #420]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	4961      	ldr	r1, [pc, #388]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f023 0220 	bic.w	r2, r3, #32
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	495a      	ldr	r1, [pc, #360]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	4952      	ldr	r1, [pc, #328]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036de:	4b4e      	ldr	r3, [pc, #312]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	494b      	ldr	r1, [pc, #300]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4943      	ldr	r1, [pc, #268]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	493c      	ldr	r1, [pc, #240]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003738:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	4934      	ldr	r1, [pc, #208]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	492d      	ldr	r1, [pc, #180]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	4925      	ldr	r1, [pc, #148]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003792:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	491e      	ldr	r1, [pc, #120]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	4916      	ldr	r1, [pc, #88]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	490f      	ldr	r1, [pc, #60]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800380a:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	4913      	ldr	r1, [pc, #76]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800385c:	4313      	orrs	r3, r2
 800385e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3748      	adds	r7, #72	; 0x48
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e049      	b.n	8003916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fc4e 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f000 fe4e 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e049      	b.n	80039c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f841 	bl	80039cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f000 fdf7 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e03c      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d109      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x3e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e02f      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e022      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d109      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x72>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e015      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_PWM_Start+0x8c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0a1      	b.n	8003bca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0xb6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	e023      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0xc6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	e01b      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xd6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	e013      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xe6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac4:	e00b      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xf6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad4:	e003      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb28 	bl	800513c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <HAL_TIM_PWM_Start+0x1f4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x148>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <HAL_TIM_PWM_Start+0x1f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x148>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <HAL_TIM_PWM_Start+0x1fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x148>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_TIM_PWM_Start+0x200>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x148>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a32      	ldr	r2, [pc, #200]	; (8003be4 <HAL_TIM_PWM_Start+0x204>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_PWM_Start+0x148>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <HAL_TIM_PWM_Start+0x208>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x14c>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_TIM_PWM_Start+0x14e>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <HAL_TIM_PWM_Start+0x1f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d018      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	; (8003bec <HAL_TIM_PWM_Start+0x20c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <HAL_TIM_PWM_Start+0x210>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_TIM_PWM_Start+0x1f8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_PWM_Start+0x1fc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIM_PWM_Start+0x1a8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_TIM_PWM_Start+0x208>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d115      	bne.n	8003bb4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_TIM_PWM_Start+0x214>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d015      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x1e6>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d011      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb2:	e008      	b.n	8003bc6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e000      	b.n	8003bc8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40013400 	.word	0x40013400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	40015000 	.word	0x40015000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	00010007 	.word	0x00010007

08003bf8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e049      	b.n	8003c9e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f841 	bl	8003ca6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fc8a 	bl	8004550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_IC_Start_IT+0x1e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e023      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x66>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_IC_Start_IT+0x2e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	e01b      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x66>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_IC_Start_IT+0x3e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e013      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x66>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_IC_Start_IT+0x4e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e00b      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x66>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_IC_Start_IT+0x5e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e003      	b.n	8003d22 <HAL_TIM_IC_Start_IT+0x66>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_TIM_IC_Start_IT+0x78>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e013      	b.n	8003d5c <HAL_TIM_IC_Start_IT+0xa0>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d104      	bne.n	8003d44 <HAL_TIM_IC_Start_IT+0x88>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	e00b      	b.n	8003d5c <HAL_TIM_IC_Start_IT+0xa0>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d104      	bne.n	8003d54 <HAL_TIM_IC_Start_IT+0x98>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e003      	b.n	8003d5c <HAL_TIM_IC_Start_IT+0xa0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d64:	7b7b      	ldrb	r3, [r7, #13]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0dd      	b.n	8003f2a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_IC_Start_IT+0xc2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	e023      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x10a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	e01b      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x10a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_IC_Start_IT+0xe2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	e013      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x10a>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_IC_Start_IT+0xf2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x10a>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_IC_Start_IT+0x102>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x10a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0x11a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	e013      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x142>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0x12a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x142>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_IC_Start_IT+0x13a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003df4:	e003      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x142>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d841      	bhi.n	8003e88 <HAL_TIM_IC_Start_IT+0x1cc>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <HAL_TIM_IC_Start_IT+0x150>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e89 	.word	0x08003e89
 8003e14:	08003e89 	.word	0x08003e89
 8003e18:	08003e89 	.word	0x08003e89
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e89 	.word	0x08003e89
 8003e24:	08003e89 	.word	0x08003e89
 8003e28:	08003e89 	.word	0x08003e89
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e89 	.word	0x08003e89
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e77 	.word	0x08003e77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0202 	orr.w	r2, r2, #2
 8003e4e:	60da      	str	r2, [r3, #12]
      break;
 8003e50:	e01d      	b.n	8003e8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0204 	orr.w	r2, r2, #4
 8003e60:	60da      	str	r2, [r3, #12]
      break;
 8003e62:	e014      	b.n	8003e8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	60da      	str	r2, [r3, #12]
      break;
 8003e74:	e00b      	b.n	8003e8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0210 	orr.w	r2, r2, #16
 8003e84:	60da      	str	r2, [r3, #12]
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d149      	bne.n	8003f28 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f94d 	bl	800513c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_TIM_IC_Start_IT+0x278>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d018      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <HAL_TIM_IC_Start_IT+0x27c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_TIM_IC_Start_IT+0x280>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_TIM_IC_Start_IT+0x284>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_TIM_IC_Start_IT+0x288>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x22c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_TIM_IC_Start_IT+0x28c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d115      	bne.n	8003f14 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_TIM_IC_Start_IT+0x290>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d015      	beq.n	8003f26 <HAL_TIM_IC_Start_IT+0x26a>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d011      	beq.n	8003f26 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	e008      	b.n	8003f26 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e000      	b.n	8003f28 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40015000 	.word	0x40015000
 8003f4c:	00010007 	.word	0x00010007

08003f50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e088      	b.n	8004080 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003f8c:	f000 ff18 	bl	8004dc0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020c 	bic.w	r2, r2, #12
 8003f9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	e060      	b.n	8004076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003fca:	f000 ff96 	bl	8004efa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6999      	ldr	r1, [r3, #24]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	021a      	lsls	r2, r3, #8
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	619a      	str	r2, [r3, #24]
 8003ff2:	e040      	b.n	8004076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d11b      	bne.n	8004032 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800400a:	f000 ffe3 	bl	8004fd4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 020c 	bic.w	r2, r2, #12
 800401c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69d9      	ldr	r1, [r3, #28]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	61da      	str	r2, [r3, #28]
 8004030:	e021      	b.n	8004076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d11c      	bne.n	8004072 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004048:	f001 f800 	bl	800504c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800405a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69d9      	ldr	r1, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	61da      	str	r2, [r3, #28]
 8004070:	e001      	b.n	8004076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0ff      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b14      	cmp	r3, #20
 80040b2:	f200 80f0 	bhi.w	8004296 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	08004111 	.word	0x08004111
 80040c0:	08004297 	.word	0x08004297
 80040c4:	08004297 	.word	0x08004297
 80040c8:	08004297 	.word	0x08004297
 80040cc:	08004151 	.word	0x08004151
 80040d0:	08004297 	.word	0x08004297
 80040d4:	08004297 	.word	0x08004297
 80040d8:	08004297 	.word	0x08004297
 80040dc:	08004193 	.word	0x08004193
 80040e0:	08004297 	.word	0x08004297
 80040e4:	08004297 	.word	0x08004297
 80040e8:	08004297 	.word	0x08004297
 80040ec:	080041d3 	.word	0x080041d3
 80040f0:	08004297 	.word	0x08004297
 80040f4:	08004297 	.word	0x08004297
 80040f8:	08004297 	.word	0x08004297
 80040fc:	08004215 	.word	0x08004215
 8004100:	08004297 	.word	0x08004297
 8004104:	08004297 	.word	0x08004297
 8004108:	08004297 	.word	0x08004297
 800410c:	08004255 	.word	0x08004255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fab8 	bl	800468c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0208 	orr.w	r2, r2, #8
 800412a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6999      	ldr	r1, [r3, #24]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	619a      	str	r2, [r3, #24]
      break;
 800414e:	e0a5      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fb32 	bl	80047c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	619a      	str	r2, [r3, #24]
      break;
 8004190:	e084      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fba5 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0208 	orr.w	r2, r2, #8
 80041ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0204 	bic.w	r2, r2, #4
 80041bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69d9      	ldr	r1, [r3, #28]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	61da      	str	r2, [r3, #28]
      break;
 80041d0:	e064      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fc17 	bl	8004a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	021a      	lsls	r2, r3, #8
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	61da      	str	r2, [r3, #28]
      break;
 8004212:	e043      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fc66 	bl	8004aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0208 	orr.w	r2, r2, #8
 800422e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0204 	bic.w	r2, r2, #4
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004252:	e023      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fcb0 	bl	8004bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004294:	e002      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
      break;
 800429a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop

080042b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x1c>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b6      	b.n	800443a <HAL_TIM_ConfigClockSource+0x18a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xd8>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	f000 8086 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x176>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xaa>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x11e>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xfe>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x13e>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15e>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15e>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15e>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15e>
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	f000 fec7 	bl	80050fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800437c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04f      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	f000 feb0 	bl	80050fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fd6e 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	; 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe7d 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fdca 	bl	8004f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	; 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fe6d 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fd4e 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fe5d 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800440c:	e00c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fe54 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004456:	2302      	movs	r3, #2
 8004458:	e031      	b.n	80044be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fc13 	bl	8004c98 <TIM_SlaveTimer_SetConfig>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e018      	b.n	80044be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d831      	bhi.n	8004540 <HAL_TIM_ReadCapturedValue+0x78>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004541 	.word	0x08004541
 80044ec:	08004541 	.word	0x08004541
 80044f0:	08004541 	.word	0x08004541
 80044f4:	08004523 	.word	0x08004523
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004541 	.word	0x08004541
 8004500:	08004541 	.word	0x08004541
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004541 	.word	0x08004541
 800450c:	08004541 	.word	0x08004541
 8004510:	08004541 	.word	0x08004541
 8004514:	08004537 	.word	0x08004537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	60fb      	str	r3, [r7, #12]

      break;
 8004520:	e00f      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	60fb      	str	r3, [r7, #12]

      break;
 800452a:	e00a      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	60fb      	str	r3, [r7, #12]

      break;
 8004534:	e005      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	60fb      	str	r3, [r7, #12]

      break;
 800453e:	e000      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004540:	bf00      	nop
  }

  return tmpreg;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a42      	ldr	r2, [pc, #264]	; (800466c <TIM_Base_SetConfig+0x11c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456e:	d00f      	beq.n	8004590 <TIM_Base_SetConfig+0x40>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a3f      	ldr	r2, [pc, #252]	; (8004670 <TIM_Base_SetConfig+0x120>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00b      	beq.n	8004590 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3e      	ldr	r2, [pc, #248]	; (8004674 <TIM_Base_SetConfig+0x124>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3d      	ldr	r2, [pc, #244]	; (8004678 <TIM_Base_SetConfig+0x128>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_Base_SetConfig+0x40>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a3c      	ldr	r2, [pc, #240]	; (800467c <TIM_Base_SetConfig+0x12c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d108      	bne.n	80045a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a31      	ldr	r2, [pc, #196]	; (800466c <TIM_Base_SetConfig+0x11c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01f      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d01b      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	; (8004670 <TIM_Base_SetConfig+0x120>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d017      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2d      	ldr	r2, [pc, #180]	; (8004674 <TIM_Base_SetConfig+0x124>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <TIM_Base_SetConfig+0x128>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00f      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <TIM_Base_SetConfig+0x130>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2b      	ldr	r2, [pc, #172]	; (8004684 <TIM_Base_SetConfig+0x134>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <TIM_Base_SetConfig+0x138>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <TIM_Base_SetConfig+0x12c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <TIM_Base_SetConfig+0x11c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <TIM_Base_SetConfig+0x100>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <TIM_Base_SetConfig+0x128>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0x100>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <TIM_Base_SetConfig+0x130>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x100>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <TIM_Base_SetConfig+0x134>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x100>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <TIM_Base_SetConfig+0x138>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x100>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0c      	ldr	r2, [pc, #48]	; (800467c <TIM_Base_SetConfig+0x12c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	615a      	str	r2, [r3, #20]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40013400 	.word	0x40013400
 800467c:	40015000 	.word	0x40015000
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 0302 	bic.w	r3, r3, #2
 80046d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a30      	ldr	r2, [pc, #192]	; (80047a8 <TIM_OC1_SetConfig+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <TIM_OC1_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2e      	ldr	r2, [pc, #184]	; (80047b0 <TIM_OC1_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <TIM_OC1_SetConfig+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <TIM_OC1_SetConfig+0x12c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <TIM_OC1_SetConfig+0x130>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10c      	bne.n	800472e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0308 	bic.w	r3, r3, #8
 800471a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC1_SetConfig+0x11c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <TIM_OC1_SetConfig+0x120>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <TIM_OC1_SetConfig+0x124>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <TIM_OC1_SetConfig+0x128>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <TIM_OC1_SetConfig+0x12c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <TIM_OC1_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	40015000 	.word	0x40015000

080047c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0210 	bic.w	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <TIM_OC2_SetConfig+0x110>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC2_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <TIM_OC2_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC2_SetConfig+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <TIM_OC2_SetConfig+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10d      	bne.n	8004850 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <TIM_OC2_SetConfig+0x110>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <TIM_OC2_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <TIM_OC2_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <TIM_OC2_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_OC2_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <TIM_OC2_SetConfig+0x118>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d113      	bne.n	80048a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004886:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40015000 	.word	0x40015000
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	; (80049f4 <TIM_OC3_SetConfig+0x10c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_OC3_SetConfig+0x72>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <TIM_OC3_SetConfig+0x110>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC3_SetConfig+0x72>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a29      	ldr	r2, [pc, #164]	; (80049fc <TIM_OC3_SetConfig+0x114>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10d      	bne.n	8004976 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004974:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <TIM_OC3_SetConfig+0x10c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_OC3_SetConfig+0x110>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <TIM_OC3_SetConfig+0x118>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1c      	ldr	r2, [pc, #112]	; (8004a04 <TIM_OC3_SetConfig+0x11c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <TIM_OC3_SetConfig+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a16      	ldr	r2, [pc, #88]	; (80049fc <TIM_OC3_SetConfig+0x114>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d113      	bne.n	80049ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40015000 	.word	0x40015000
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <TIM_OC4_SetConfig+0xc8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <TIM_OC4_SetConfig+0x8c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <TIM_OC4_SetConfig+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00f      	beq.n	8004a98 <TIM_OC4_SetConfig+0x8c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <TIM_OC4_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <TIM_OC4_SetConfig+0x8c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <TIM_OC4_SetConfig+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_OC4_SetConfig+0x8c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <TIM_OC4_SetConfig+0xd8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC4_SetConfig+0x8c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <TIM_OC4_SetConfig+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d109      	bne.n	8004aac <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800
 8004ae8:	40015000 	.word	0x40015000

08004aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <TIM_OC5_SetConfig+0xbc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <TIM_OC5_SetConfig+0x82>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <TIM_OC5_SetConfig+0xc0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <TIM_OC5_SetConfig+0x82>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <TIM_OC5_SetConfig+0xc4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_OC5_SetConfig+0x82>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <TIM_OC5_SetConfig+0xc8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_OC5_SetConfig+0x82>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC5_SetConfig+0xcc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC5_SetConfig+0x82>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <TIM_OC5_SetConfig+0xd0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d109      	bne.n	8004b82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	621a      	str	r2, [r3, #32]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40012c00 	.word	0x40012c00
 8004bac:	40013400 	.word	0x40013400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40014400 	.word	0x40014400
 8004bb8:	40014800 	.word	0x40014800
 8004bbc:	40015000 	.word	0x40015000

08004bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	051b      	lsls	r3, r3, #20
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <TIM_OC6_SetConfig+0xc0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <TIM_OC6_SetConfig+0x84>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <TIM_OC6_SetConfig+0xc4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_OC6_SetConfig+0x84>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <TIM_OC6_SetConfig+0xc8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_OC6_SetConfig+0x84>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC6_SetConfig+0xcc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_OC6_SetConfig+0x84>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC6_SetConfig+0xd0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC6_SetConfig+0x84>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <TIM_OC6_SetConfig+0xd4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	40015000 	.word	0x40015000

08004c98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b70      	cmp	r3, #112	; 0x70
 8004ce4:	d01a      	beq.n	8004d1c <TIM_SlaveTimer_SetConfig+0x84>
 8004ce6:	2b70      	cmp	r3, #112	; 0x70
 8004ce8:	d860      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004cea:	2b60      	cmp	r3, #96	; 0x60
 8004cec:	d054      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0x100>
 8004cee:	2b60      	cmp	r3, #96	; 0x60
 8004cf0:	d85c      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004cf2:	2b50      	cmp	r3, #80	; 0x50
 8004cf4:	d046      	beq.n	8004d84 <TIM_SlaveTimer_SetConfig+0xec>
 8004cf6:	2b50      	cmp	r3, #80	; 0x50
 8004cf8:	d858      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d019      	beq.n	8004d32 <TIM_SlaveTimer_SetConfig+0x9a>
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d854      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d055      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	d850      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d051      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d84c      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04d      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d04b      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004d1a:	e047      	b.n	8004dac <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004d2c:	f000 f9e6 	bl	80050fc <TIM_ETR_SetConfig>
      break;
 8004d30:	e040      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d101      	bne.n	8004d3e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03b      	b.n	8004db6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
      break;
 8004d82:	e017      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d90:	461a      	mov	r2, r3
 8004d92:	f000 f883 	bl	8004e9c <TIM_TI1_ConfigInputStage>
      break;
 8004d96:	e00d      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da4:	461a      	mov	r2, r3
 8004da6:	f000 f8e5 	bl	8004f74 <TIM_TI2_ConfigInputStage>
      break;
 8004daa:	e003      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e000      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004db2:	bf00      	nop
  }

  return status;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <TIM_TI1_SetConfig+0xc4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d017      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d013      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <TIM_TI1_SetConfig+0xc8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <TIM_TI1_SetConfig+0xcc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <TIM_TI1_SetConfig+0xd0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <TIM_TI1_SetConfig+0xd4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_TI1_SetConfig+0x5e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <TIM_TI1_SetConfig+0xd8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <TIM_TI1_SetConfig+0x62>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <TIM_TI1_SetConfig+0x64>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e003      	b.n	8004e42 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f023 030a 	bic.w	r3, r3, #10
 8004e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f003 030a 	and.w	r3, r3, #10
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40013400 	.word	0x40013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40015000 	.word	0x40015000

08004e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 030a 	bic.w	r3, r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f023 0210 	bic.w	r2, r3, #16
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f023 0210 	bic.w	r2, r3, #16
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	031b      	lsls	r3, r3, #12
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0303 	bic.w	r3, r3, #3
 8005000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	b2db      	uxtb	r3, r3
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005024:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800508a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	031b      	lsls	r3, r3, #12
 8005090:	b29b      	uxth	r3, r3
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800509e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	031b      	lsls	r3, r3, #12
 80050a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	431a      	orrs	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	609a      	str	r2, [r3, #8]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2201      	movs	r2, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e06d      	b.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2d      	ldr	r2, [pc, #180]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d018      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a11      	ldr	r2, [pc, #68]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40015000 	.word	0x40015000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40014000 	.word	0x40014000

080052a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e040      	b.n	8005334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc f872 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2224      	movs	r2, #36	; 0x24
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fbca 	bl	8005a78 <UART_SetConfig>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e022      	b.n	8005334 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd92 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800530a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800531a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fe19 	bl	8005f64 <UART_CheckIdleState>
 8005332:	4603      	mov	r3, r0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800533c:	b480      	push	{r7}
 800533e:	b08b      	sub	sp, #44	; 0x2c
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534e:	2b20      	cmp	r3, #32
 8005350:	d147      	bne.n	80053e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_Transmit_IT+0x22>
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e040      	b.n	80053e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	88fa      	ldrh	r2, [r7, #6]
 8005374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2221      	movs	r2, #33	; 0x21
 800538a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005394:	d107      	bne.n	80053a6 <HAL_UART_Transmit_IT+0x6a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <HAL_UART_Transmit_IT+0xb4>)
 80053a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80053a4:	e002      	b.n	80053ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <HAL_UART_Transmit_IT+0xb8>)
 80053aa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	372c      	adds	r7, #44	; 0x2c
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080064bd 	.word	0x080064bd
 80053f4:	08006405 	.word	0x08006405

080053f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540c:	2b20      	cmp	r3, #32
 800540e:	d132      	bne.n	8005476 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Receive_IT+0x24>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e02b      	b.n	8005478 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d018      	beq.n	8005466 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	69f9      	ldr	r1, [r7, #28]
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e6      	bne.n	8005434 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	461a      	mov	r2, r3
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fe89 	bl	8006184 <UART_Start_Receive_IT>
 8005472:	4603      	mov	r3, r0
 8005474:	e000      	b.n	8005478 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
  }
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	; 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0ba      	sub	sp, #232	; 0xe8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80054ae:	4013      	ands	r3, r2
 80054b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00f      	beq.n	80054e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 82ab 	beq.w	8005a34 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
      }
      return;
 80054e6:	e2a5      	b.n	8005a34 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8117 	beq.w	8005720 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005502:	4b85      	ldr	r3, [pc, #532]	; (8005718 <HAL_UART_IRQHandler+0x298>)
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 810a 	beq.w	8005720 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_UART_IRQHandler+0xbc>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d011      	beq.n	800556c <HAL_UART_IRQHandler+0xec>
 8005548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2202      	movs	r2, #2
 800555a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_UART_IRQHandler+0x11c>
 8005578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2204      	movs	r2, #4
 800558a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ce:	f043 0208 	orr.w	r2, r3, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <HAL_UART_IRQHandler+0x18a>
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8211 	beq.w	8005a38 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800565a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d04f      	beq.n	8005702 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fe54 	bl	8006310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d141      	bne.n	80056fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800568c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1d9      	bne.n	8005676 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <HAL_UART_IRQHandler+0x29c>)
 80056d0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc f963 	bl	80019a2 <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e00f      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9aa 	bl	8005a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	e00b      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9a6 	bl	8005a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e007      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9a2 	bl	8005a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005710:	e192      	b.n	8005a38 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005712:	bf00      	nop
    return;
 8005714:	e190      	b.n	8005a38 <HAL_UART_IRQHandler+0x5b8>
 8005716:	bf00      	nop
 8005718:	04000120 	.word	0x04000120
 800571c:	080063d9 	.word	0x080063d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 814b 	bne.w	80059c0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8144 	beq.w	80059c0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 813d 	beq.w	80059c0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2210      	movs	r2, #16
 800574c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	f040 80b5 	bne.w	80058c8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8164 	beq.w	8005a3c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577e:	429a      	cmp	r2, r3
 8005780:	f080 815c 	bcs.w	8005a3c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b20      	cmp	r3, #32
 8005796:	f000 8086 	beq.w	80058a6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1da      	bne.n	800579a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005808:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800580c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005810:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800581a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e1      	bne.n	80057e4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005844:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800584a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e3      	bne.n	8005820 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005888:	65bb      	str	r3, [r7, #88]	; 0x58
 800588a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800588e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e4      	bne.n	8005866 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fc f845 	bl	8001930 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8cd 	bl	8005a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c6:	e0b9      	b.n	8005a3c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80ab 	beq.w	8005a40 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80058ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80a6 	beq.w	8005a40 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
 8005918:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e4      	bne.n	80058f4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	623b      	str	r3, [r7, #32]
   return(result);
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800594e:	633a      	str	r2, [r7, #48]	; 0x30
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	60fb      	str	r3, [r7, #12]
   return(result);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0310 	bic.w	r3, r3, #16
 800598a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	617b      	str	r3, [r7, #20]
   return(result);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e4      	bne.n	8005976 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f851 	bl	8005a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059be:	e03f      	b.n	8005a40 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <HAL_UART_IRQHandler+0x56a>
 80059cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 ff9c 	bl	8006920 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059e8:	e02d      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01c      	beq.n	8005a44 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
    }
    return;
 8005a12:	e017      	b.n	8005a44 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00c      	beq.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fda5 	bl	800657c <UART_EndTransmit_IT>
    return;
 8005a32:	e008      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005a34:	bf00      	nop
 8005a36:	e006      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005a38:	bf00      	nop
 8005a3a:	e004      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005a44:	bf00      	nop
  }

}
 8005a46:	37e8      	adds	r7, #232	; 0xe8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b92      	ldr	r3, [pc, #584]	; (8005cec <UART_SetConfig+0x274>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a80      	ldr	r2, [pc, #512]	; (8005cf0 <UART_SetConfig+0x278>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d120      	bne.n	8005b36 <UART_SetConfig+0xbe>
 8005af4:	4b7f      	ldr	r3, [pc, #508]	; (8005cf4 <UART_SetConfig+0x27c>)
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d817      	bhi.n	8005b30 <UART_SetConfig+0xb8>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x90>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b25 	.word	0x08005b25
 8005b10:	08005b2b 	.word	0x08005b2b
 8005b14:	08005b1f 	.word	0x08005b1f
 8005b18:	2301      	movs	r3, #1
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e0b5      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e0b2      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b24:	2304      	movs	r3, #4
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e0af      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e0ac      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b30:	2310      	movs	r3, #16
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e0a9      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a6f      	ldr	r2, [pc, #444]	; (8005cf8 <UART_SetConfig+0x280>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d124      	bne.n	8005b8a <UART_SetConfig+0x112>
 8005b40:	4b6c      	ldr	r3, [pc, #432]	; (8005cf4 <UART_SetConfig+0x27c>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b4c:	d011      	beq.n	8005b72 <UART_SetConfig+0xfa>
 8005b4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b52:	d817      	bhi.n	8005b84 <UART_SetConfig+0x10c>
 8005b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b58:	d011      	beq.n	8005b7e <UART_SetConfig+0x106>
 8005b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b5e:	d811      	bhi.n	8005b84 <UART_SetConfig+0x10c>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <UART_SetConfig+0xf4>
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b68:	d006      	beq.n	8005b78 <UART_SetConfig+0x100>
 8005b6a:	e00b      	b.n	8005b84 <UART_SetConfig+0x10c>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e08b      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b72:	2302      	movs	r3, #2
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e088      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e085      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e082      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b84:	2310      	movs	r3, #16
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e07f      	b.n	8005c8a <UART_SetConfig+0x212>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5b      	ldr	r2, [pc, #364]	; (8005cfc <UART_SetConfig+0x284>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d124      	bne.n	8005bde <UART_SetConfig+0x166>
 8005b94:	4b57      	ldr	r3, [pc, #348]	; (8005cf4 <UART_SetConfig+0x27c>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ba0:	d011      	beq.n	8005bc6 <UART_SetConfig+0x14e>
 8005ba2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ba6:	d817      	bhi.n	8005bd8 <UART_SetConfig+0x160>
 8005ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bac:	d011      	beq.n	8005bd2 <UART_SetConfig+0x15a>
 8005bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bb2:	d811      	bhi.n	8005bd8 <UART_SetConfig+0x160>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <UART_SetConfig+0x148>
 8005bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbc:	d006      	beq.n	8005bcc <UART_SetConfig+0x154>
 8005bbe:	e00b      	b.n	8005bd8 <UART_SetConfig+0x160>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e061      	b.n	8005c8a <UART_SetConfig+0x212>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e05e      	b.n	8005c8a <UART_SetConfig+0x212>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e05b      	b.n	8005c8a <UART_SetConfig+0x212>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e058      	b.n	8005c8a <UART_SetConfig+0x212>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e055      	b.n	8005c8a <UART_SetConfig+0x212>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a47      	ldr	r2, [pc, #284]	; (8005d00 <UART_SetConfig+0x288>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d124      	bne.n	8005c32 <UART_SetConfig+0x1ba>
 8005be8:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <UART_SetConfig+0x27c>)
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005bf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bf4:	d011      	beq.n	8005c1a <UART_SetConfig+0x1a2>
 8005bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bfa:	d817      	bhi.n	8005c2c <UART_SetConfig+0x1b4>
 8005bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c00:	d011      	beq.n	8005c26 <UART_SetConfig+0x1ae>
 8005c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c06:	d811      	bhi.n	8005c2c <UART_SetConfig+0x1b4>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <UART_SetConfig+0x19c>
 8005c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c10:	d006      	beq.n	8005c20 <UART_SetConfig+0x1a8>
 8005c12:	e00b      	b.n	8005c2c <UART_SetConfig+0x1b4>
 8005c14:	2300      	movs	r3, #0
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e037      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e034      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c20:	2304      	movs	r3, #4
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e031      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c26:	2308      	movs	r3, #8
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e02e      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e02b      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <UART_SetConfig+0x28c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d124      	bne.n	8005c86 <UART_SetConfig+0x20e>
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <UART_SetConfig+0x27c>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c48:	d011      	beq.n	8005c6e <UART_SetConfig+0x1f6>
 8005c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c4e:	d817      	bhi.n	8005c80 <UART_SetConfig+0x208>
 8005c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c54:	d011      	beq.n	8005c7a <UART_SetConfig+0x202>
 8005c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c5a:	d811      	bhi.n	8005c80 <UART_SetConfig+0x208>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <UART_SetConfig+0x1f0>
 8005c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c64:	d006      	beq.n	8005c74 <UART_SetConfig+0x1fc>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x208>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e00d      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e00a      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e007      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e004      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e001      	b.n	8005c8a <UART_SetConfig+0x212>
 8005c86:	2310      	movs	r3, #16
 8005c88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c92:	d16b      	bne.n	8005d6c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005c94:	7ffb      	ldrb	r3, [r7, #31]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d838      	bhi.n	8005d0c <UART_SetConfig+0x294>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x228>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fd fb72 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61b8      	str	r0, [r7, #24]
        break;
 8005cca:	e024      	b.n	8005d16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fd fb90 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61b8      	str	r0, [r7, #24]
        break;
 8005cd2:	e020      	b.n	8005d16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <UART_SetConfig+0x290>)
 8005cd6:	61bb      	str	r3, [r7, #24]
        break;
 8005cd8:	e01d      	b.n	8005d16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fd faf1 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8005cde:	61b8      	str	r0, [r7, #24]
        break;
 8005ce0:	e019      	b.n	8005d16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	61bb      	str	r3, [r7, #24]
        break;
 8005ce8:	e015      	b.n	8005d16 <UART_SetConfig+0x29e>
 8005cea:	bf00      	nop
 8005cec:	efff69f3 	.word	0xefff69f3
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40004400 	.word	0x40004400
 8005cfc:	40004800 	.word	0x40004800
 8005d00:	40004c00 	.word	0x40004c00
 8005d04:	40005000 	.word	0x40005000
 8005d08:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	77bb      	strb	r3, [r7, #30]
        break;
 8005d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d073      	beq.n	8005e04 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	005a      	lsls	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d916      	bls.n	8005d66 <UART_SetConfig+0x2ee>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3e:	d212      	bcs.n	8005d66 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f023 030f 	bic.w	r3, r3, #15
 8005d48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	89fb      	ldrh	r3, [r7, #14]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	89fa      	ldrh	r2, [r7, #14]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	e04e      	b.n	8005e04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	77bb      	strb	r3, [r7, #30]
 8005d6a:	e04b      	b.n	8005e04 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d827      	bhi.n	8005dc2 <UART_SetConfig+0x34a>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <UART_SetConfig+0x300>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dc3 	.word	0x08005dc3
 8005d88:	08005db3 	.word	0x08005db3
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005dc3 	.word	0x08005dc3
 8005d94:	08005dc3 	.word	0x08005dc3
 8005d98:	08005dbb 	.word	0x08005dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d9c:	f7fd fb06 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8005da0:	61b8      	str	r0, [r7, #24]
        break;
 8005da2:	e013      	b.n	8005dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7fd fb24 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005da8:	61b8      	str	r0, [r7, #24]
        break;
 8005daa:	e00f      	b.n	8005dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <UART_SetConfig+0x3a4>)
 8005dae:	61bb      	str	r3, [r7, #24]
        break;
 8005db0:	e00c      	b.n	8005dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db2:	f7fd fa85 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8005db6:	61b8      	str	r0, [r7, #24]
        break;
 8005db8:	e008      	b.n	8005dcc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dbe:	61bb      	str	r3, [r7, #24]
        break;
 8005dc0:	e004      	b.n	8005dcc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8005dca:	bf00      	nop
    }

    if (pclk != 0U)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d018      	beq.n	8005e04 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085a      	lsrs	r2, r3, #1
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	441a      	add	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d909      	bls.n	8005e00 <UART_SetConfig+0x388>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d205      	bcs.n	8005e00 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	e001      	b.n	8005e04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e10:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	007a1200 	.word	0x007a1200

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b098      	sub	sp, #96	; 0x60
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f74:	f7fb fb78 	bl	8001668 <HAL_GetTick>
 8005f78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d12e      	bne.n	8005fe6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f88c 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d021      	beq.n	8005fe6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e062      	b.n	80060ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d149      	bne.n	8006088 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f856 	bl	80060b4 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d03c      	beq.n	8006088 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	623b      	str	r3, [r7, #32]
   return(result);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602c:	633b      	str	r3, [r7, #48]	; 0x30
 800602e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	64bb      	str	r3, [r7, #72]	; 0x48
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006060:	61fa      	str	r2, [r7, #28]
 8006062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	69b9      	ldr	r1, [r7, #24]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	617b      	str	r3, [r7, #20]
   return(result);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e011      	b.n	80060ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3758      	adds	r7, #88	; 0x58
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c4:	e049      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d045      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ce:	f7fb facb 	bl	8001668 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d302      	bcc.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e048      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d031      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d110      	bne.n	8006126 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f8ff 	bl	8006310 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2208      	movs	r2, #8
 8006116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e029      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006134:	d111      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800613e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f8e5 	bl	8006310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e00f      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d0a6      	beq.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006184:	b480      	push	{r7}
 8006186:	b097      	sub	sp, #92	; 0x5c
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	88fa      	ldrh	r2, [r7, #6]
 800619c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d10e      	bne.n	80061d6 <UART_Start_Receive_IT+0x52>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <UART_Start_Receive_IT+0x48>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ca:	e02d      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	22ff      	movs	r2, #255	; 0xff
 80061d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d4:	e028      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <UART_Start_Receive_IT+0x76>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <UART_Start_Receive_IT+0x6c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ee:	e01b      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	227f      	movs	r2, #127	; 0x7f
 80061f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061f8:	e016      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006202:	d10d      	bne.n	8006220 <UART_Start_Receive_IT+0x9c>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <UART_Start_Receive_IT+0x92>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	227f      	movs	r2, #127	; 0x7f
 8006210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006214:	e008      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	223f      	movs	r2, #63	; 0x3f
 800621a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800621e:	e003      	b.n	8006228 <UART_Start_Receive_IT+0xa4>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2222      	movs	r2, #34	; 0x22
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	657b      	str	r3, [r7, #84]	; 0x54
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006258:	64ba      	str	r2, [r7, #72]	; 0x48
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800625e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006274:	d107      	bne.n	8006286 <UART_Start_Receive_IT+0x102>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a21      	ldr	r2, [pc, #132]	; (8006308 <UART_Start_Receive_IT+0x184>)
 8006282:	669a      	str	r2, [r3, #104]	; 0x68
 8006284:	e002      	b.n	800628c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a20      	ldr	r2, [pc, #128]	; (800630c <UART_Start_Receive_IT+0x188>)
 800628a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d019      	beq.n	80062c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
 80062b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e6      	bne.n	8006294 <UART_Start_Receive_IT+0x110>
 80062c6:	e018      	b.n	80062fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f043 0320 	orr.w	r3, r3, #32
 80062dc:	653b      	str	r3, [r7, #80]	; 0x50
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	69f9      	ldr	r1, [r7, #28]
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	375c      	adds	r7, #92	; 0x5c
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	08006779 	.word	0x08006779
 800630c:	080065d1 	.word	0x080065d1

08006310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b095      	sub	sp, #84	; 0x54
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
 8006338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800633c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e6      	bne.n	8006318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	61fb      	str	r3, [r7, #28]
   return(result);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	64bb      	str	r3, [r7, #72]	; 0x48
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006382:	2b01      	cmp	r3, #1
 8006384:	d118      	bne.n	80063b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	60bb      	str	r3, [r7, #8]
   return(result);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f023 0310 	bic.w	r3, r3, #16
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a4:	61bb      	str	r3, [r7, #24]
 80063a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6979      	ldr	r1, [r7, #20]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	613b      	str	r3, [r7, #16]
   return(result);
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e6      	bne.n	8006386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063cc:	bf00      	nop
 80063ce:	3754      	adds	r7, #84	; 0x54
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff fb28 	bl	8005a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b08f      	sub	sp, #60	; 0x3c
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006410:	2b21      	cmp	r3, #33	; 0x21
 8006412:	d14d      	bne.n	80064b0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d132      	bne.n	8006486 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	61fb      	str	r3, [r7, #28]
   return(result);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006440:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e6      	bne.n	8006420 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	613b      	str	r3, [r7, #16]
   return(result);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006484:	e014      	b.n	80064b0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	b292      	uxth	r2, r2
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80064b0:	bf00      	nop
 80064b2:	373c      	adds	r7, #60	; 0x3c
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b091      	sub	sp, #68	; 0x44
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c8:	2b21      	cmp	r3, #33	; 0x21
 80064ca:	d151      	bne.n	8006570 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d132      	bne.n	800653e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	623b      	str	r3, [r7, #32]
   return(result);
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
 80064f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e6      	bne.n	80064d8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60fb      	str	r3, [r7, #12]
   return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	617b      	str	r3, [r7, #20]
   return(result);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e6      	bne.n	800650a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800653c:	e018      	b.n	8006570 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006550:	b292      	uxth	r2, r2
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006558:	1c9a      	adds	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006570:	bf00      	nop
 8006572:	3744      	adds	r7, #68	; 0x44
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	60bb      	str	r3, [r7, #8]
   return(result);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	613b      	str	r3, [r7, #16]
   return(result);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e6      	bne.n	8006584 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fa fa84 	bl	8000ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c8:	bf00      	nop
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b09c      	sub	sp, #112	; 0x70
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	2b22      	cmp	r3, #34	; 0x22
 80065ea:	f040 80b9 	bne.w	8006760 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80065fc:	b2d9      	uxtb	r1, r3
 80065fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006602:	b2da      	uxtb	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	400a      	ands	r2, r1
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 809c 	bne.w	8006770 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800664c:	66bb      	str	r3, [r7, #104]	; 0x68
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006656:	65bb      	str	r3, [r7, #88]	; 0x58
 8006658:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800665c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e6      	bne.n	8006638 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	667b      	str	r3, [r7, #100]	; 0x64
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800668a:	647a      	str	r2, [r7, #68]	; 0x44
 800668c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e5      	bne.n	800666a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d018      	beq.n	80066f2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	623b      	str	r3, [r7, #32]
   return(result);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066d4:	663b      	str	r3, [r7, #96]	; 0x60
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
 80066e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d12e      	bne.n	8006758 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	60fb      	str	r3, [r7, #12]
   return(result);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f023 0310 	bic.w	r3, r3, #16
 8006714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	69b9      	ldr	r1, [r7, #24]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	617b      	str	r3, [r7, #20]
   return(result);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e6      	bne.n	8006700 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d103      	bne.n	8006748 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2210      	movs	r2, #16
 8006746:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff f985 	bl	8005a60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006756:	e00b      	b.n	8006770 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fa f9ed 	bl	8000b38 <HAL_UART_RxCpltCallback>
}
 800675e:	e007      	b.n	8006770 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0208 	orr.w	r2, r2, #8
 800676e:	619a      	str	r2, [r3, #24]
}
 8006770:	bf00      	nop
 8006772:	3770      	adds	r7, #112	; 0x70
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b09c      	sub	sp, #112	; 0x70
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006786:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	f040 80b9 	bne.w	8006908 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800679c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80067aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80067ae:	4013      	ands	r3, r2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	1c9a      	adds	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 809c 	bne.w	8006918 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f4:	667b      	str	r3, [r7, #100]	; 0x64
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006800:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e6      	bne.n	80067e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	663b      	str	r3, [r7, #96]	; 0x60
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006832:	643a      	str	r2, [r7, #64]	; 0x40
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d018      	beq.n	800689a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	61fb      	str	r3, [r7, #28]
   return(result);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800687c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006888:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e6      	bne.n	8006868 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d12e      	bne.n	8006900 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f023 0310 	bic.w	r3, r3, #16
 80068bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6979      	ldr	r1, [r7, #20]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	613b      	str	r3, [r7, #16]
   return(result);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d103      	bne.n	80068f0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2210      	movs	r2, #16
 80068ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff f8b1 	bl	8005a60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068fe:	e00b      	b.n	8006918 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fa f919 	bl	8000b38 <HAL_UART_RxCpltCallback>
}
 8006906:	e007      	b.n	8006918 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	619a      	str	r2, [r3, #24]
}
 8006918:	bf00      	nop
 800691a:	3770      	adds	r7, #112	; 0x70
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <atoi>:
 8006934:	220a      	movs	r2, #10
 8006936:	2100      	movs	r1, #0
 8006938:	f000 b882 	b.w	8006a40 <strtol>

0800693c <_strtol_l.constprop.0>:
 800693c:	2b01      	cmp	r3, #1
 800693e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006942:	d001      	beq.n	8006948 <_strtol_l.constprop.0+0xc>
 8006944:	2b24      	cmp	r3, #36	; 0x24
 8006946:	d906      	bls.n	8006956 <_strtol_l.constprop.0+0x1a>
 8006948:	f000 f8de 	bl	8006b08 <__errno>
 800694c:	2316      	movs	r3, #22
 800694e:	6003      	str	r3, [r0, #0]
 8006950:	2000      	movs	r0, #0
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a3c <_strtol_l.constprop.0+0x100>
 800695a:	460d      	mov	r5, r1
 800695c:	462e      	mov	r6, r5
 800695e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006962:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006966:	f017 0708 	ands.w	r7, r7, #8
 800696a:	d1f7      	bne.n	800695c <_strtol_l.constprop.0+0x20>
 800696c:	2c2d      	cmp	r4, #45	; 0x2d
 800696e:	d132      	bne.n	80069d6 <_strtol_l.constprop.0+0x9a>
 8006970:	782c      	ldrb	r4, [r5, #0]
 8006972:	2701      	movs	r7, #1
 8006974:	1cb5      	adds	r5, r6, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d05b      	beq.n	8006a32 <_strtol_l.constprop.0+0xf6>
 800697a:	2b10      	cmp	r3, #16
 800697c:	d109      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 800697e:	2c30      	cmp	r4, #48	; 0x30
 8006980:	d107      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 8006982:	782c      	ldrb	r4, [r5, #0]
 8006984:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006988:	2c58      	cmp	r4, #88	; 0x58
 800698a:	d14d      	bne.n	8006a28 <_strtol_l.constprop.0+0xec>
 800698c:	786c      	ldrb	r4, [r5, #1]
 800698e:	2310      	movs	r3, #16
 8006990:	3502      	adds	r5, #2
 8006992:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006996:	f108 38ff 	add.w	r8, r8, #4294967295
 800699a:	f04f 0e00 	mov.w	lr, #0
 800699e:	fbb8 f9f3 	udiv	r9, r8, r3
 80069a2:	4676      	mov	r6, lr
 80069a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80069a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069ac:	f1bc 0f09 	cmp.w	ip, #9
 80069b0:	d816      	bhi.n	80069e0 <_strtol_l.constprop.0+0xa4>
 80069b2:	4664      	mov	r4, ip
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	dd24      	ble.n	8006a02 <_strtol_l.constprop.0+0xc6>
 80069b8:	f1be 3fff 	cmp.w	lr, #4294967295
 80069bc:	d008      	beq.n	80069d0 <_strtol_l.constprop.0+0x94>
 80069be:	45b1      	cmp	r9, r6
 80069c0:	d31c      	bcc.n	80069fc <_strtol_l.constprop.0+0xc0>
 80069c2:	d101      	bne.n	80069c8 <_strtol_l.constprop.0+0x8c>
 80069c4:	45a2      	cmp	sl, r4
 80069c6:	db19      	blt.n	80069fc <_strtol_l.constprop.0+0xc0>
 80069c8:	fb06 4603 	mla	r6, r6, r3, r4
 80069cc:	f04f 0e01 	mov.w	lr, #1
 80069d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069d4:	e7e8      	b.n	80069a8 <_strtol_l.constprop.0+0x6c>
 80069d6:	2c2b      	cmp	r4, #43	; 0x2b
 80069d8:	bf04      	itt	eq
 80069da:	782c      	ldrbeq	r4, [r5, #0]
 80069dc:	1cb5      	addeq	r5, r6, #2
 80069de:	e7ca      	b.n	8006976 <_strtol_l.constprop.0+0x3a>
 80069e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80069e4:	f1bc 0f19 	cmp.w	ip, #25
 80069e8:	d801      	bhi.n	80069ee <_strtol_l.constprop.0+0xb2>
 80069ea:	3c37      	subs	r4, #55	; 0x37
 80069ec:	e7e2      	b.n	80069b4 <_strtol_l.constprop.0+0x78>
 80069ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80069f2:	f1bc 0f19 	cmp.w	ip, #25
 80069f6:	d804      	bhi.n	8006a02 <_strtol_l.constprop.0+0xc6>
 80069f8:	3c57      	subs	r4, #87	; 0x57
 80069fa:	e7db      	b.n	80069b4 <_strtol_l.constprop.0+0x78>
 80069fc:	f04f 3eff 	mov.w	lr, #4294967295
 8006a00:	e7e6      	b.n	80069d0 <_strtol_l.constprop.0+0x94>
 8006a02:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a06:	d105      	bne.n	8006a14 <_strtol_l.constprop.0+0xd8>
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	6003      	str	r3, [r0, #0]
 8006a0c:	4646      	mov	r6, r8
 8006a0e:	b942      	cbnz	r2, 8006a22 <_strtol_l.constprop.0+0xe6>
 8006a10:	4630      	mov	r0, r6
 8006a12:	e79e      	b.n	8006952 <_strtol_l.constprop.0+0x16>
 8006a14:	b107      	cbz	r7, 8006a18 <_strtol_l.constprop.0+0xdc>
 8006a16:	4276      	negs	r6, r6
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	d0f9      	beq.n	8006a10 <_strtol_l.constprop.0+0xd4>
 8006a1c:	f1be 0f00 	cmp.w	lr, #0
 8006a20:	d000      	beq.n	8006a24 <_strtol_l.constprop.0+0xe8>
 8006a22:	1e69      	subs	r1, r5, #1
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	e7f3      	b.n	8006a10 <_strtol_l.constprop.0+0xd4>
 8006a28:	2430      	movs	r4, #48	; 0x30
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1b1      	bne.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	e7af      	b.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a32:	2c30      	cmp	r4, #48	; 0x30
 8006a34:	d0a5      	beq.n	8006982 <_strtol_l.constprop.0+0x46>
 8006a36:	230a      	movs	r3, #10
 8006a38:	e7ab      	b.n	8006992 <_strtol_l.constprop.0+0x56>
 8006a3a:	bf00      	nop
 8006a3c:	0800747d 	.word	0x0800747d

08006a40 <strtol>:
 8006a40:	4613      	mov	r3, r2
 8006a42:	460a      	mov	r2, r1
 8006a44:	4601      	mov	r1, r0
 8006a46:	4802      	ldr	r0, [pc, #8]	; (8006a50 <strtol+0x10>)
 8006a48:	6800      	ldr	r0, [r0, #0]
 8006a4a:	f7ff bf77 	b.w	800693c <_strtol_l.constprop.0>
 8006a4e:	bf00      	nop
 8006a50:	2000007c 	.word	0x2000007c

08006a54 <siprintf>:
 8006a54:	b40e      	push	{r1, r2, r3}
 8006a56:	b500      	push	{lr}
 8006a58:	b09c      	sub	sp, #112	; 0x70
 8006a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a5c:	9002      	str	r0, [sp, #8]
 8006a5e:	9006      	str	r0, [sp, #24]
 8006a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a64:	4809      	ldr	r0, [pc, #36]	; (8006a8c <siprintf+0x38>)
 8006a66:	9107      	str	r1, [sp, #28]
 8006a68:	9104      	str	r1, [sp, #16]
 8006a6a:	4909      	ldr	r1, [pc, #36]	; (8006a90 <siprintf+0x3c>)
 8006a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a70:	9105      	str	r1, [sp, #20]
 8006a72:	6800      	ldr	r0, [r0, #0]
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	a902      	add	r1, sp, #8
 8006a78:	f000 f9d2 	bl	8006e20 <_svfiprintf_r>
 8006a7c:	9b02      	ldr	r3, [sp, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	b01c      	add	sp, #112	; 0x70
 8006a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a88:	b003      	add	sp, #12
 8006a8a:	4770      	bx	lr
 8006a8c:	2000007c 	.word	0x2000007c
 8006a90:	ffff0208 	.word	0xffff0208

08006a94 <_vsiprintf_r>:
 8006a94:	b500      	push	{lr}
 8006a96:	b09b      	sub	sp, #108	; 0x6c
 8006a98:	9100      	str	r1, [sp, #0]
 8006a9a:	9104      	str	r1, [sp, #16]
 8006a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006aa0:	9105      	str	r1, [sp, #20]
 8006aa2:	9102      	str	r1, [sp, #8]
 8006aa4:	4905      	ldr	r1, [pc, #20]	; (8006abc <_vsiprintf_r+0x28>)
 8006aa6:	9103      	str	r1, [sp, #12]
 8006aa8:	4669      	mov	r1, sp
 8006aaa:	f000 f9b9 	bl	8006e20 <_svfiprintf_r>
 8006aae:	9b00      	ldr	r3, [sp, #0]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	b01b      	add	sp, #108	; 0x6c
 8006ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aba:	bf00      	nop
 8006abc:	ffff0208 	.word	0xffff0208

08006ac0 <vsiprintf>:
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	4802      	ldr	r0, [pc, #8]	; (8006ad0 <vsiprintf+0x10>)
 8006ac8:	6800      	ldr	r0, [r0, #0]
 8006aca:	f7ff bfe3 	b.w	8006a94 <_vsiprintf_r>
 8006ace:	bf00      	nop
 8006ad0:	2000007c 	.word	0x2000007c

08006ad4 <memset>:
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d100      	bne.n	8006ade <memset+0xa>
 8006adc:	4770      	bx	lr
 8006ade:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae2:	e7f9      	b.n	8006ad8 <memset+0x4>

08006ae4 <strncmp>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	b16a      	cbz	r2, 8006b04 <strncmp+0x20>
 8006ae8:	3901      	subs	r1, #1
 8006aea:	1884      	adds	r4, r0, r2
 8006aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d103      	bne.n	8006b00 <strncmp+0x1c>
 8006af8:	42a0      	cmp	r0, r4
 8006afa:	d001      	beq.n	8006b00 <strncmp+0x1c>
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d1f5      	bne.n	8006aec <strncmp+0x8>
 8006b00:	1ad0      	subs	r0, r2, r3
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	4610      	mov	r0, r2
 8006b06:	e7fc      	b.n	8006b02 <strncmp+0x1e>

08006b08 <__errno>:
 8006b08:	4b01      	ldr	r3, [pc, #4]	; (8006b10 <__errno+0x8>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	2000007c 	.word	0x2000007c

08006b14 <__libc_init_array>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	4d0d      	ldr	r5, [pc, #52]	; (8006b4c <__libc_init_array+0x38>)
 8006b18:	4c0d      	ldr	r4, [pc, #52]	; (8006b50 <__libc_init_array+0x3c>)
 8006b1a:	1b64      	subs	r4, r4, r5
 8006b1c:	10a4      	asrs	r4, r4, #2
 8006b1e:	2600      	movs	r6, #0
 8006b20:	42a6      	cmp	r6, r4
 8006b22:	d109      	bne.n	8006b38 <__libc_init_array+0x24>
 8006b24:	4d0b      	ldr	r5, [pc, #44]	; (8006b54 <__libc_init_array+0x40>)
 8006b26:	4c0c      	ldr	r4, [pc, #48]	; (8006b58 <__libc_init_array+0x44>)
 8006b28:	f000 fc6a 	bl	8007400 <_init>
 8006b2c:	1b64      	subs	r4, r4, r5
 8006b2e:	10a4      	asrs	r4, r4, #2
 8006b30:	2600      	movs	r6, #0
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	d105      	bne.n	8006b42 <__libc_init_array+0x2e>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3c:	4798      	blx	r3
 8006b3e:	3601      	adds	r6, #1
 8006b40:	e7ee      	b.n	8006b20 <__libc_init_array+0xc>
 8006b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b46:	4798      	blx	r3
 8006b48:	3601      	adds	r6, #1
 8006b4a:	e7f2      	b.n	8006b32 <__libc_init_array+0x1e>
 8006b4c:	080075b0 	.word	0x080075b0
 8006b50:	080075b0 	.word	0x080075b0
 8006b54:	080075b0 	.word	0x080075b0
 8006b58:	080075b4 	.word	0x080075b4

08006b5c <__retarget_lock_acquire_recursive>:
 8006b5c:	4770      	bx	lr

08006b5e <__retarget_lock_release_recursive>:
 8006b5e:	4770      	bx	lr

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b76:	4291      	cmp	r1, r2
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <_free_r>:
 8006b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d044      	beq.n	8006c0c <_free_r+0x90>
 8006b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b86:	9001      	str	r0, [sp, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b8e:	bfb8      	it	lt
 8006b90:	18e4      	addlt	r4, r4, r3
 8006b92:	f000 f8df 	bl	8006d54 <__malloc_lock>
 8006b96:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <_free_r+0x94>)
 8006b98:	9801      	ldr	r0, [sp, #4]
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	b933      	cbnz	r3, 8006bac <_free_r+0x30>
 8006b9e:	6063      	str	r3, [r4, #4]
 8006ba0:	6014      	str	r4, [r2, #0]
 8006ba2:	b003      	add	sp, #12
 8006ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ba8:	f000 b8da 	b.w	8006d60 <__malloc_unlock>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d908      	bls.n	8006bc2 <_free_r+0x46>
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	1961      	adds	r1, r4, r5
 8006bb4:	428b      	cmp	r3, r1
 8006bb6:	bf01      	itttt	eq
 8006bb8:	6819      	ldreq	r1, [r3, #0]
 8006bba:	685b      	ldreq	r3, [r3, #4]
 8006bbc:	1949      	addeq	r1, r1, r5
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	e7ed      	b.n	8006b9e <_free_r+0x22>
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b10b      	cbz	r3, 8006bcc <_free_r+0x50>
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d9fa      	bls.n	8006bc2 <_free_r+0x46>
 8006bcc:	6811      	ldr	r1, [r2, #0]
 8006bce:	1855      	adds	r5, r2, r1
 8006bd0:	42a5      	cmp	r5, r4
 8006bd2:	d10b      	bne.n	8006bec <_free_r+0x70>
 8006bd4:	6824      	ldr	r4, [r4, #0]
 8006bd6:	4421      	add	r1, r4
 8006bd8:	1854      	adds	r4, r2, r1
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	d1e0      	bne.n	8006ba2 <_free_r+0x26>
 8006be0:	681c      	ldr	r4, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	6053      	str	r3, [r2, #4]
 8006be6:	440c      	add	r4, r1
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	e7da      	b.n	8006ba2 <_free_r+0x26>
 8006bec:	d902      	bls.n	8006bf4 <_free_r+0x78>
 8006bee:	230c      	movs	r3, #12
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	e7d6      	b.n	8006ba2 <_free_r+0x26>
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	1961      	adds	r1, r4, r5
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf04      	itt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	6063      	str	r3, [r4, #4]
 8006c02:	bf04      	itt	eq
 8006c04:	1949      	addeq	r1, r1, r5
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	6054      	str	r4, [r2, #4]
 8006c0a:	e7ca      	b.n	8006ba2 <_free_r+0x26>
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	20000b08 	.word	0x20000b08

08006c14 <sbrk_aligned>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4e0e      	ldr	r6, [pc, #56]	; (8006c50 <sbrk_aligned+0x3c>)
 8006c18:	460c      	mov	r4, r1
 8006c1a:	6831      	ldr	r1, [r6, #0]
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	b911      	cbnz	r1, 8006c26 <sbrk_aligned+0x12>
 8006c20:	f000 fba6 	bl	8007370 <_sbrk_r>
 8006c24:	6030      	str	r0, [r6, #0]
 8006c26:	4621      	mov	r1, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 fba1 	bl	8007370 <_sbrk_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d00a      	beq.n	8006c48 <sbrk_aligned+0x34>
 8006c32:	1cc4      	adds	r4, r0, #3
 8006c34:	f024 0403 	bic.w	r4, r4, #3
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d007      	beq.n	8006c4c <sbrk_aligned+0x38>
 8006c3c:	1a21      	subs	r1, r4, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fb96 	bl	8007370 <_sbrk_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d101      	bne.n	8006c4c <sbrk_aligned+0x38>
 8006c48:	f04f 34ff 	mov.w	r4, #4294967295
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	20000b0c 	.word	0x20000b0c

08006c54 <_malloc_r>:
 8006c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c58:	1ccd      	adds	r5, r1, #3
 8006c5a:	f025 0503 	bic.w	r5, r5, #3
 8006c5e:	3508      	adds	r5, #8
 8006c60:	2d0c      	cmp	r5, #12
 8006c62:	bf38      	it	cc
 8006c64:	250c      	movcc	r5, #12
 8006c66:	2d00      	cmp	r5, #0
 8006c68:	4607      	mov	r7, r0
 8006c6a:	db01      	blt.n	8006c70 <_malloc_r+0x1c>
 8006c6c:	42a9      	cmp	r1, r5
 8006c6e:	d905      	bls.n	8006c7c <_malloc_r+0x28>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	2600      	movs	r6, #0
 8006c76:	4630      	mov	r0, r6
 8006c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d50 <_malloc_r+0xfc>
 8006c80:	f000 f868 	bl	8006d54 <__malloc_lock>
 8006c84:	f8d8 3000 	ldr.w	r3, [r8]
 8006c88:	461c      	mov	r4, r3
 8006c8a:	bb5c      	cbnz	r4, 8006ce4 <_malloc_r+0x90>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ffc0 	bl	8006c14 <sbrk_aligned>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	4604      	mov	r4, r0
 8006c98:	d155      	bne.n	8006d46 <_malloc_r+0xf2>
 8006c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c9e:	4626      	mov	r6, r4
 8006ca0:	2e00      	cmp	r6, #0
 8006ca2:	d145      	bne.n	8006d30 <_malloc_r+0xdc>
 8006ca4:	2c00      	cmp	r4, #0
 8006ca6:	d048      	beq.n	8006d3a <_malloc_r+0xe6>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	4631      	mov	r1, r6
 8006cac:	4638      	mov	r0, r7
 8006cae:	eb04 0903 	add.w	r9, r4, r3
 8006cb2:	f000 fb5d 	bl	8007370 <_sbrk_r>
 8006cb6:	4581      	cmp	r9, r0
 8006cb8:	d13f      	bne.n	8006d3a <_malloc_r+0xe6>
 8006cba:	6821      	ldr	r1, [r4, #0]
 8006cbc:	1a6d      	subs	r5, r5, r1
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7ff ffa7 	bl	8006c14 <sbrk_aligned>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d037      	beq.n	8006d3a <_malloc_r+0xe6>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	442b      	add	r3, r5
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d038      	beq.n	8006d4a <_malloc_r+0xf6>
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	42a2      	cmp	r2, r4
 8006cdc:	d12b      	bne.n	8006d36 <_malloc_r+0xe2>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	e00f      	b.n	8006d04 <_malloc_r+0xb0>
 8006ce4:	6822      	ldr	r2, [r4, #0]
 8006ce6:	1b52      	subs	r2, r2, r5
 8006ce8:	d41f      	bmi.n	8006d2a <_malloc_r+0xd6>
 8006cea:	2a0b      	cmp	r2, #11
 8006cec:	d917      	bls.n	8006d1e <_malloc_r+0xca>
 8006cee:	1961      	adds	r1, r4, r5
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	6025      	str	r5, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	6059      	strne	r1, [r3, #4]
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	bf08      	it	eq
 8006cfc:	f8c8 1000 	streq.w	r1, [r8]
 8006d00:	5162      	str	r2, [r4, r5]
 8006d02:	604b      	str	r3, [r1, #4]
 8006d04:	4638      	mov	r0, r7
 8006d06:	f104 060b 	add.w	r6, r4, #11
 8006d0a:	f000 f829 	bl	8006d60 <__malloc_unlock>
 8006d0e:	f026 0607 	bic.w	r6, r6, #7
 8006d12:	1d23      	adds	r3, r4, #4
 8006d14:	1af2      	subs	r2, r6, r3
 8006d16:	d0ae      	beq.n	8006c76 <_malloc_r+0x22>
 8006d18:	1b9b      	subs	r3, r3, r6
 8006d1a:	50a3      	str	r3, [r4, r2]
 8006d1c:	e7ab      	b.n	8006c76 <_malloc_r+0x22>
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	6862      	ldr	r2, [r4, #4]
 8006d22:	d1dd      	bne.n	8006ce0 <_malloc_r+0x8c>
 8006d24:	f8c8 2000 	str.w	r2, [r8]
 8006d28:	e7ec      	b.n	8006d04 <_malloc_r+0xb0>
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	6864      	ldr	r4, [r4, #4]
 8006d2e:	e7ac      	b.n	8006c8a <_malloc_r+0x36>
 8006d30:	4634      	mov	r4, r6
 8006d32:	6876      	ldr	r6, [r6, #4]
 8006d34:	e7b4      	b.n	8006ca0 <_malloc_r+0x4c>
 8006d36:	4613      	mov	r3, r2
 8006d38:	e7cc      	b.n	8006cd4 <_malloc_r+0x80>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	603b      	str	r3, [r7, #0]
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f000 f80e 	bl	8006d60 <__malloc_unlock>
 8006d44:	e797      	b.n	8006c76 <_malloc_r+0x22>
 8006d46:	6025      	str	r5, [r4, #0]
 8006d48:	e7dc      	b.n	8006d04 <_malloc_r+0xb0>
 8006d4a:	605b      	str	r3, [r3, #4]
 8006d4c:	deff      	udf	#255	; 0xff
 8006d4e:	bf00      	nop
 8006d50:	20000b08 	.word	0x20000b08

08006d54 <__malloc_lock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_lock+0x8>)
 8006d56:	f7ff bf01 	b.w	8006b5c <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20000b04 	.word	0x20000b04

08006d60 <__malloc_unlock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_unlock+0x8>)
 8006d62:	f7ff befc 	b.w	8006b5e <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	20000b04 	.word	0x20000b04

08006d6c <__ssputs_r>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	688e      	ldr	r6, [r1, #8]
 8006d72:	461f      	mov	r7, r3
 8006d74:	42be      	cmp	r6, r7
 8006d76:	680b      	ldr	r3, [r1, #0]
 8006d78:	4682      	mov	sl, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	4690      	mov	r8, r2
 8006d7e:	d82c      	bhi.n	8006dda <__ssputs_r+0x6e>
 8006d80:	898a      	ldrh	r2, [r1, #12]
 8006d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d86:	d026      	beq.n	8006dd6 <__ssputs_r+0x6a>
 8006d88:	6965      	ldr	r5, [r4, #20]
 8006d8a:	6909      	ldr	r1, [r1, #16]
 8006d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d90:	eba3 0901 	sub.w	r9, r3, r1
 8006d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d98:	1c7b      	adds	r3, r7, #1
 8006d9a:	444b      	add	r3, r9
 8006d9c:	106d      	asrs	r5, r5, #1
 8006d9e:	429d      	cmp	r5, r3
 8006da0:	bf38      	it	cc
 8006da2:	461d      	movcc	r5, r3
 8006da4:	0553      	lsls	r3, r2, #21
 8006da6:	d527      	bpl.n	8006df8 <__ssputs_r+0x8c>
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7ff ff53 	bl	8006c54 <_malloc_r>
 8006dae:	4606      	mov	r6, r0
 8006db0:	b360      	cbz	r0, 8006e0c <__ssputs_r+0xa0>
 8006db2:	6921      	ldr	r1, [r4, #16]
 8006db4:	464a      	mov	r2, r9
 8006db6:	f7ff fed3 	bl	8006b60 <memcpy>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	6126      	str	r6, [r4, #16]
 8006dc8:	6165      	str	r5, [r4, #20]
 8006dca:	444e      	add	r6, r9
 8006dcc:	eba5 0509 	sub.w	r5, r5, r9
 8006dd0:	6026      	str	r6, [r4, #0]
 8006dd2:	60a5      	str	r5, [r4, #8]
 8006dd4:	463e      	mov	r6, r7
 8006dd6:	42be      	cmp	r6, r7
 8006dd8:	d900      	bls.n	8006ddc <__ssputs_r+0x70>
 8006dda:	463e      	mov	r6, r7
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	4632      	mov	r2, r6
 8006de0:	4641      	mov	r1, r8
 8006de2:	f000 faab 	bl	800733c <memmove>
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	1b9b      	subs	r3, r3, r6
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	4433      	add	r3, r6
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	2000      	movs	r0, #0
 8006df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df8:	462a      	mov	r2, r5
 8006dfa:	f000 fac9 	bl	8007390 <_realloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1e0      	bne.n	8006dc6 <__ssputs_r+0x5a>
 8006e04:	6921      	ldr	r1, [r4, #16]
 8006e06:	4650      	mov	r0, sl
 8006e08:	f7ff feb8 	bl	8006b7c <_free_r>
 8006e0c:	230c      	movs	r3, #12
 8006e0e:	f8ca 3000 	str.w	r3, [sl]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	e7e9      	b.n	8006df4 <__ssputs_r+0x88>

08006e20 <_svfiprintf_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4698      	mov	r8, r3
 8006e26:	898b      	ldrh	r3, [r1, #12]
 8006e28:	061b      	lsls	r3, r3, #24
 8006e2a:	b09d      	sub	sp, #116	; 0x74
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	4614      	mov	r4, r2
 8006e32:	d50e      	bpl.n	8006e52 <_svfiprintf_r+0x32>
 8006e34:	690b      	ldr	r3, [r1, #16]
 8006e36:	b963      	cbnz	r3, 8006e52 <_svfiprintf_r+0x32>
 8006e38:	2140      	movs	r1, #64	; 0x40
 8006e3a:	f7ff ff0b 	bl	8006c54 <_malloc_r>
 8006e3e:	6028      	str	r0, [r5, #0]
 8006e40:	6128      	str	r0, [r5, #16]
 8006e42:	b920      	cbnz	r0, 8006e4e <_svfiprintf_r+0x2e>
 8006e44:	230c      	movs	r3, #12
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e0d0      	b.n	8006ff0 <_svfiprintf_r+0x1d0>
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	616b      	str	r3, [r5, #20]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	2320      	movs	r3, #32
 8006e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e60:	2330      	movs	r3, #48	; 0x30
 8006e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007008 <_svfiprintf_r+0x1e8>
 8006e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e6a:	f04f 0901 	mov.w	r9, #1
 8006e6e:	4623      	mov	r3, r4
 8006e70:	469a      	mov	sl, r3
 8006e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e76:	b10a      	cbz	r2, 8006e7c <_svfiprintf_r+0x5c>
 8006e78:	2a25      	cmp	r2, #37	; 0x25
 8006e7a:	d1f9      	bne.n	8006e70 <_svfiprintf_r+0x50>
 8006e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e80:	d00b      	beq.n	8006e9a <_svfiprintf_r+0x7a>
 8006e82:	465b      	mov	r3, fp
 8006e84:	4622      	mov	r2, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ff6f 	bl	8006d6c <__ssputs_r>
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f000 80a9 	beq.w	8006fe6 <_svfiprintf_r+0x1c6>
 8006e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e96:	445a      	add	r2, fp
 8006e98:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80a1 	beq.w	8006fe6 <_svfiprintf_r+0x1c6>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eae:	f10a 0a01 	add.w	sl, sl, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eba:	931a      	str	r3, [sp, #104]	; 0x68
 8006ebc:	4654      	mov	r4, sl
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	4850      	ldr	r0, [pc, #320]	; (8007008 <_svfiprintf_r+0x1e8>)
 8006ec6:	f7f9 f993 	bl	80001f0 <memchr>
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	b9d8      	cbnz	r0, 8006f06 <_svfiprintf_r+0xe6>
 8006ece:	06d0      	lsls	r0, r2, #27
 8006ed0:	bf44      	itt	mi
 8006ed2:	2320      	movmi	r3, #32
 8006ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed8:	0711      	lsls	r1, r2, #28
 8006eda:	bf44      	itt	mi
 8006edc:	232b      	movmi	r3, #43	; 0x2b
 8006ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee8:	d015      	beq.n	8006f16 <_svfiprintf_r+0xf6>
 8006eea:	9a07      	ldr	r2, [sp, #28]
 8006eec:	4654      	mov	r4, sl
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f04f 0c0a 	mov.w	ip, #10
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efa:	3b30      	subs	r3, #48	; 0x30
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d94d      	bls.n	8006f9c <_svfiprintf_r+0x17c>
 8006f00:	b1b0      	cbz	r0, 8006f30 <_svfiprintf_r+0x110>
 8006f02:	9207      	str	r2, [sp, #28]
 8006f04:	e014      	b.n	8006f30 <_svfiprintf_r+0x110>
 8006f06:	eba0 0308 	sub.w	r3, r0, r8
 8006f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	46a2      	mov	sl, r4
 8006f14:	e7d2      	b.n	8006ebc <_svfiprintf_r+0x9c>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d19      	adds	r1, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9103      	str	r1, [sp, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfbb      	ittet	lt
 8006f22:	425b      	neglt	r3, r3
 8006f24:	f042 0202 	orrlt.w	r2, r2, #2
 8006f28:	9307      	strge	r3, [sp, #28]
 8006f2a:	9307      	strlt	r3, [sp, #28]
 8006f2c:	bfb8      	it	lt
 8006f2e:	9204      	strlt	r2, [sp, #16]
 8006f30:	7823      	ldrb	r3, [r4, #0]
 8006f32:	2b2e      	cmp	r3, #46	; 0x2e
 8006f34:	d10c      	bne.n	8006f50 <_svfiprintf_r+0x130>
 8006f36:	7863      	ldrb	r3, [r4, #1]
 8006f38:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3a:	d134      	bne.n	8006fa6 <_svfiprintf_r+0x186>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfb8      	it	lt
 8006f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f4c:	3402      	adds	r4, #2
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007018 <_svfiprintf_r+0x1f8>
 8006f54:	7821      	ldrb	r1, [r4, #0]
 8006f56:	2203      	movs	r2, #3
 8006f58:	4650      	mov	r0, sl
 8006f5a:	f7f9 f949 	bl	80001f0 <memchr>
 8006f5e:	b138      	cbz	r0, 8006f70 <_svfiprintf_r+0x150>
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	eba0 000a 	sub.w	r0, r0, sl
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	4082      	lsls	r2, r0
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	3401      	adds	r4, #1
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f74:	4825      	ldr	r0, [pc, #148]	; (800700c <_svfiprintf_r+0x1ec>)
 8006f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f7a:	2206      	movs	r2, #6
 8006f7c:	f7f9 f938 	bl	80001f0 <memchr>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d038      	beq.n	8006ff6 <_svfiprintf_r+0x1d6>
 8006f84:	4b22      	ldr	r3, [pc, #136]	; (8007010 <_svfiprintf_r+0x1f0>)
 8006f86:	bb1b      	cbnz	r3, 8006fd0 <_svfiprintf_r+0x1b0>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	3307      	adds	r3, #7
 8006f8c:	f023 0307 	bic.w	r3, r3, #7
 8006f90:	3308      	adds	r3, #8
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	4433      	add	r3, r6
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	e768      	b.n	8006e6e <_svfiprintf_r+0x4e>
 8006f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e7a6      	b.n	8006ef4 <_svfiprintf_r+0xd4>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	3401      	adds	r4, #1
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	4619      	mov	r1, r3
 8006fae:	f04f 0c0a 	mov.w	ip, #10
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb8:	3a30      	subs	r2, #48	; 0x30
 8006fba:	2a09      	cmp	r2, #9
 8006fbc:	d903      	bls.n	8006fc6 <_svfiprintf_r+0x1a6>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0c6      	beq.n	8006f50 <_svfiprintf_r+0x130>
 8006fc2:	9105      	str	r1, [sp, #20]
 8006fc4:	e7c4      	b.n	8006f50 <_svfiprintf_r+0x130>
 8006fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fca:	4604      	mov	r4, r0
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e7f0      	b.n	8006fb2 <_svfiprintf_r+0x192>
 8006fd0:	ab03      	add	r3, sp, #12
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <_svfiprintf_r+0x1f4>)
 8006fd8:	a904      	add	r1, sp, #16
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	1c42      	adds	r2, r0, #1
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	d1d6      	bne.n	8006f94 <_svfiprintf_r+0x174>
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	065b      	lsls	r3, r3, #25
 8006fea:	f53f af2d 	bmi.w	8006e48 <_svfiprintf_r+0x28>
 8006fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff0:	b01d      	add	sp, #116	; 0x74
 8006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <_svfiprintf_r+0x1f4>)
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	4638      	mov	r0, r7
 8007002:	f000 f879 	bl	80070f8 <_printf_i>
 8007006:	e7eb      	b.n	8006fe0 <_svfiprintf_r+0x1c0>
 8007008:	0800757d 	.word	0x0800757d
 800700c:	08007587 	.word	0x08007587
 8007010:	00000000 	.word	0x00000000
 8007014:	08006d6d 	.word	0x08006d6d
 8007018:	08007583 	.word	0x08007583

0800701c <_printf_common>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	4616      	mov	r6, r2
 8007022:	4699      	mov	r9, r3
 8007024:	688a      	ldr	r2, [r1, #8]
 8007026:	690b      	ldr	r3, [r1, #16]
 8007028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800702c:	4293      	cmp	r3, r2
 800702e:	bfb8      	it	lt
 8007030:	4613      	movlt	r3, r2
 8007032:	6033      	str	r3, [r6, #0]
 8007034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007038:	4607      	mov	r7, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b10a      	cbz	r2, 8007042 <_printf_common+0x26>
 800703e:	3301      	adds	r3, #1
 8007040:	6033      	str	r3, [r6, #0]
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	0699      	lsls	r1, r3, #26
 8007046:	bf42      	ittt	mi
 8007048:	6833      	ldrmi	r3, [r6, #0]
 800704a:	3302      	addmi	r3, #2
 800704c:	6033      	strmi	r3, [r6, #0]
 800704e:	6825      	ldr	r5, [r4, #0]
 8007050:	f015 0506 	ands.w	r5, r5, #6
 8007054:	d106      	bne.n	8007064 <_printf_common+0x48>
 8007056:	f104 0a19 	add.w	sl, r4, #25
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	6832      	ldr	r2, [r6, #0]
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	42ab      	cmp	r3, r5
 8007062:	dc26      	bgt.n	80070b2 <_printf_common+0x96>
 8007064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007068:	1e13      	subs	r3, r2, #0
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	bf18      	it	ne
 800706e:	2301      	movne	r3, #1
 8007070:	0692      	lsls	r2, r2, #26
 8007072:	d42b      	bmi.n	80070cc <_printf_common+0xb0>
 8007074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d01e      	beq.n	80070c0 <_printf_common+0xa4>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	f003 0306 	and.w	r3, r3, #6
 800708a:	2b04      	cmp	r3, #4
 800708c:	bf02      	ittt	eq
 800708e:	68e5      	ldreq	r5, [r4, #12]
 8007090:	6833      	ldreq	r3, [r6, #0]
 8007092:	1aed      	subeq	r5, r5, r3
 8007094:	68a3      	ldr	r3, [r4, #8]
 8007096:	bf0c      	ite	eq
 8007098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800709c:	2500      	movne	r5, #0
 800709e:	4293      	cmp	r3, r2
 80070a0:	bfc4      	itt	gt
 80070a2:	1a9b      	subgt	r3, r3, r2
 80070a4:	18ed      	addgt	r5, r5, r3
 80070a6:	2600      	movs	r6, #0
 80070a8:	341a      	adds	r4, #26
 80070aa:	42b5      	cmp	r5, r6
 80070ac:	d11a      	bne.n	80070e4 <_printf_common+0xc8>
 80070ae:	2000      	movs	r0, #0
 80070b0:	e008      	b.n	80070c4 <_printf_common+0xa8>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4652      	mov	r2, sl
 80070b6:	4649      	mov	r1, r9
 80070b8:	4638      	mov	r0, r7
 80070ba:	47c0      	blx	r8
 80070bc:	3001      	adds	r0, #1
 80070be:	d103      	bne.n	80070c8 <_printf_common+0xac>
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c8:	3501      	adds	r5, #1
 80070ca:	e7c6      	b.n	800705a <_printf_common+0x3e>
 80070cc:	18e1      	adds	r1, r4, r3
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	2030      	movs	r0, #48	; 0x30
 80070d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070d6:	4422      	add	r2, r4
 80070d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070e0:	3302      	adds	r3, #2
 80070e2:	e7c7      	b.n	8007074 <_printf_common+0x58>
 80070e4:	2301      	movs	r3, #1
 80070e6:	4622      	mov	r2, r4
 80070e8:	4649      	mov	r1, r9
 80070ea:	4638      	mov	r0, r7
 80070ec:	47c0      	blx	r8
 80070ee:	3001      	adds	r0, #1
 80070f0:	d0e6      	beq.n	80070c0 <_printf_common+0xa4>
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7d9      	b.n	80070aa <_printf_common+0x8e>
	...

080070f8 <_printf_i>:
 80070f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	7e0f      	ldrb	r7, [r1, #24]
 80070fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007100:	2f78      	cmp	r7, #120	; 0x78
 8007102:	4691      	mov	r9, r2
 8007104:	4680      	mov	r8, r0
 8007106:	460c      	mov	r4, r1
 8007108:	469a      	mov	sl, r3
 800710a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800710e:	d807      	bhi.n	8007120 <_printf_i+0x28>
 8007110:	2f62      	cmp	r7, #98	; 0x62
 8007112:	d80a      	bhi.n	800712a <_printf_i+0x32>
 8007114:	2f00      	cmp	r7, #0
 8007116:	f000 80d4 	beq.w	80072c2 <_printf_i+0x1ca>
 800711a:	2f58      	cmp	r7, #88	; 0x58
 800711c:	f000 80c0 	beq.w	80072a0 <_printf_i+0x1a8>
 8007120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007128:	e03a      	b.n	80071a0 <_printf_i+0xa8>
 800712a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800712e:	2b15      	cmp	r3, #21
 8007130:	d8f6      	bhi.n	8007120 <_printf_i+0x28>
 8007132:	a101      	add	r1, pc, #4	; (adr r1, 8007138 <_printf_i+0x40>)
 8007134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007138:	08007191 	.word	0x08007191
 800713c:	080071a5 	.word	0x080071a5
 8007140:	08007121 	.word	0x08007121
 8007144:	08007121 	.word	0x08007121
 8007148:	08007121 	.word	0x08007121
 800714c:	08007121 	.word	0x08007121
 8007150:	080071a5 	.word	0x080071a5
 8007154:	08007121 	.word	0x08007121
 8007158:	08007121 	.word	0x08007121
 800715c:	08007121 	.word	0x08007121
 8007160:	08007121 	.word	0x08007121
 8007164:	080072a9 	.word	0x080072a9
 8007168:	080071d1 	.word	0x080071d1
 800716c:	08007263 	.word	0x08007263
 8007170:	08007121 	.word	0x08007121
 8007174:	08007121 	.word	0x08007121
 8007178:	080072cb 	.word	0x080072cb
 800717c:	08007121 	.word	0x08007121
 8007180:	080071d1 	.word	0x080071d1
 8007184:	08007121 	.word	0x08007121
 8007188:	08007121 	.word	0x08007121
 800718c:	0800726b 	.word	0x0800726b
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	602a      	str	r2, [r5, #0]
 8007198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800719c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071a0:	2301      	movs	r3, #1
 80071a2:	e09f      	b.n	80072e4 <_printf_i+0x1ec>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	682b      	ldr	r3, [r5, #0]
 80071a8:	0607      	lsls	r7, r0, #24
 80071aa:	f103 0104 	add.w	r1, r3, #4
 80071ae:	6029      	str	r1, [r5, #0]
 80071b0:	d501      	bpl.n	80071b6 <_printf_i+0xbe>
 80071b2:	681e      	ldr	r6, [r3, #0]
 80071b4:	e003      	b.n	80071be <_printf_i+0xc6>
 80071b6:	0646      	lsls	r6, r0, #25
 80071b8:	d5fb      	bpl.n	80071b2 <_printf_i+0xba>
 80071ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071be:	2e00      	cmp	r6, #0
 80071c0:	da03      	bge.n	80071ca <_printf_i+0xd2>
 80071c2:	232d      	movs	r3, #45	; 0x2d
 80071c4:	4276      	negs	r6, r6
 80071c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ca:	485a      	ldr	r0, [pc, #360]	; (8007334 <_printf_i+0x23c>)
 80071cc:	230a      	movs	r3, #10
 80071ce:	e012      	b.n	80071f6 <_printf_i+0xfe>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	1d19      	adds	r1, r3, #4
 80071d6:	6029      	str	r1, [r5, #0]
 80071d8:	0605      	lsls	r5, r0, #24
 80071da:	d501      	bpl.n	80071e0 <_printf_i+0xe8>
 80071dc:	681e      	ldr	r6, [r3, #0]
 80071de:	e002      	b.n	80071e6 <_printf_i+0xee>
 80071e0:	0641      	lsls	r1, r0, #25
 80071e2:	d5fb      	bpl.n	80071dc <_printf_i+0xe4>
 80071e4:	881e      	ldrh	r6, [r3, #0]
 80071e6:	4853      	ldr	r0, [pc, #332]	; (8007334 <_printf_i+0x23c>)
 80071e8:	2f6f      	cmp	r7, #111	; 0x6f
 80071ea:	bf0c      	ite	eq
 80071ec:	2308      	moveq	r3, #8
 80071ee:	230a      	movne	r3, #10
 80071f0:	2100      	movs	r1, #0
 80071f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071f6:	6865      	ldr	r5, [r4, #4]
 80071f8:	60a5      	str	r5, [r4, #8]
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	bfa2      	ittt	ge
 80071fe:	6821      	ldrge	r1, [r4, #0]
 8007200:	f021 0104 	bicge.w	r1, r1, #4
 8007204:	6021      	strge	r1, [r4, #0]
 8007206:	b90e      	cbnz	r6, 800720c <_printf_i+0x114>
 8007208:	2d00      	cmp	r5, #0
 800720a:	d04b      	beq.n	80072a4 <_printf_i+0x1ac>
 800720c:	4615      	mov	r5, r2
 800720e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007212:	fb03 6711 	mls	r7, r3, r1, r6
 8007216:	5dc7      	ldrb	r7, [r0, r7]
 8007218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800721c:	4637      	mov	r7, r6
 800721e:	42bb      	cmp	r3, r7
 8007220:	460e      	mov	r6, r1
 8007222:	d9f4      	bls.n	800720e <_printf_i+0x116>
 8007224:	2b08      	cmp	r3, #8
 8007226:	d10b      	bne.n	8007240 <_printf_i+0x148>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	07de      	lsls	r6, r3, #31
 800722c:	d508      	bpl.n	8007240 <_printf_i+0x148>
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	6861      	ldr	r1, [r4, #4]
 8007232:	4299      	cmp	r1, r3
 8007234:	bfde      	ittt	le
 8007236:	2330      	movle	r3, #48	; 0x30
 8007238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800723c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007240:	1b52      	subs	r2, r2, r5
 8007242:	6122      	str	r2, [r4, #16]
 8007244:	f8cd a000 	str.w	sl, [sp]
 8007248:	464b      	mov	r3, r9
 800724a:	aa03      	add	r2, sp, #12
 800724c:	4621      	mov	r1, r4
 800724e:	4640      	mov	r0, r8
 8007250:	f7ff fee4 	bl	800701c <_printf_common>
 8007254:	3001      	adds	r0, #1
 8007256:	d14a      	bne.n	80072ee <_printf_i+0x1f6>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	b004      	add	sp, #16
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	f043 0320 	orr.w	r3, r3, #32
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	4833      	ldr	r0, [pc, #204]	; (8007338 <_printf_i+0x240>)
 800726c:	2778      	movs	r7, #120	; 0x78
 800726e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	6829      	ldr	r1, [r5, #0]
 8007276:	061f      	lsls	r7, r3, #24
 8007278:	f851 6b04 	ldr.w	r6, [r1], #4
 800727c:	d402      	bmi.n	8007284 <_printf_i+0x18c>
 800727e:	065f      	lsls	r7, r3, #25
 8007280:	bf48      	it	mi
 8007282:	b2b6      	uxthmi	r6, r6
 8007284:	07df      	lsls	r7, r3, #31
 8007286:	bf48      	it	mi
 8007288:	f043 0320 	orrmi.w	r3, r3, #32
 800728c:	6029      	str	r1, [r5, #0]
 800728e:	bf48      	it	mi
 8007290:	6023      	strmi	r3, [r4, #0]
 8007292:	b91e      	cbnz	r6, 800729c <_printf_i+0x1a4>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	f023 0320 	bic.w	r3, r3, #32
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	2310      	movs	r3, #16
 800729e:	e7a7      	b.n	80071f0 <_printf_i+0xf8>
 80072a0:	4824      	ldr	r0, [pc, #144]	; (8007334 <_printf_i+0x23c>)
 80072a2:	e7e4      	b.n	800726e <_printf_i+0x176>
 80072a4:	4615      	mov	r5, r2
 80072a6:	e7bd      	b.n	8007224 <_printf_i+0x12c>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	6826      	ldr	r6, [r4, #0]
 80072ac:	6961      	ldr	r1, [r4, #20]
 80072ae:	1d18      	adds	r0, r3, #4
 80072b0:	6028      	str	r0, [r5, #0]
 80072b2:	0635      	lsls	r5, r6, #24
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	d501      	bpl.n	80072bc <_printf_i+0x1c4>
 80072b8:	6019      	str	r1, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <_printf_i+0x1ca>
 80072bc:	0670      	lsls	r0, r6, #25
 80072be:	d5fb      	bpl.n	80072b8 <_printf_i+0x1c0>
 80072c0:	8019      	strh	r1, [r3, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	4615      	mov	r5, r2
 80072c8:	e7bc      	b.n	8007244 <_printf_i+0x14c>
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	602a      	str	r2, [r5, #0]
 80072d0:	681d      	ldr	r5, [r3, #0]
 80072d2:	6862      	ldr	r2, [r4, #4]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4628      	mov	r0, r5
 80072d8:	f7f8 ff8a 	bl	80001f0 <memchr>
 80072dc:	b108      	cbz	r0, 80072e2 <_printf_i+0x1ea>
 80072de:	1b40      	subs	r0, r0, r5
 80072e0:	6060      	str	r0, [r4, #4]
 80072e2:	6863      	ldr	r3, [r4, #4]
 80072e4:	6123      	str	r3, [r4, #16]
 80072e6:	2300      	movs	r3, #0
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	e7aa      	b.n	8007244 <_printf_i+0x14c>
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	462a      	mov	r2, r5
 80072f2:	4649      	mov	r1, r9
 80072f4:	4640      	mov	r0, r8
 80072f6:	47d0      	blx	sl
 80072f8:	3001      	adds	r0, #1
 80072fa:	d0ad      	beq.n	8007258 <_printf_i+0x160>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	079b      	lsls	r3, r3, #30
 8007300:	d413      	bmi.n	800732a <_printf_i+0x232>
 8007302:	68e0      	ldr	r0, [r4, #12]
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	4298      	cmp	r0, r3
 8007308:	bfb8      	it	lt
 800730a:	4618      	movlt	r0, r3
 800730c:	e7a6      	b.n	800725c <_printf_i+0x164>
 800730e:	2301      	movs	r3, #1
 8007310:	4632      	mov	r2, r6
 8007312:	4649      	mov	r1, r9
 8007314:	4640      	mov	r0, r8
 8007316:	47d0      	blx	sl
 8007318:	3001      	adds	r0, #1
 800731a:	d09d      	beq.n	8007258 <_printf_i+0x160>
 800731c:	3501      	adds	r5, #1
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	9903      	ldr	r1, [sp, #12]
 8007322:	1a5b      	subs	r3, r3, r1
 8007324:	42ab      	cmp	r3, r5
 8007326:	dcf2      	bgt.n	800730e <_printf_i+0x216>
 8007328:	e7eb      	b.n	8007302 <_printf_i+0x20a>
 800732a:	2500      	movs	r5, #0
 800732c:	f104 0619 	add.w	r6, r4, #25
 8007330:	e7f5      	b.n	800731e <_printf_i+0x226>
 8007332:	bf00      	nop
 8007334:	0800758e 	.word	0x0800758e
 8007338:	0800759f 	.word	0x0800759f

0800733c <memmove>:
 800733c:	4288      	cmp	r0, r1
 800733e:	b510      	push	{r4, lr}
 8007340:	eb01 0402 	add.w	r4, r1, r2
 8007344:	d902      	bls.n	800734c <memmove+0x10>
 8007346:	4284      	cmp	r4, r0
 8007348:	4623      	mov	r3, r4
 800734a:	d807      	bhi.n	800735c <memmove+0x20>
 800734c:	1e43      	subs	r3, r0, #1
 800734e:	42a1      	cmp	r1, r4
 8007350:	d008      	beq.n	8007364 <memmove+0x28>
 8007352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800735a:	e7f8      	b.n	800734e <memmove+0x12>
 800735c:	4402      	add	r2, r0
 800735e:	4601      	mov	r1, r0
 8007360:	428a      	cmp	r2, r1
 8007362:	d100      	bne.n	8007366 <memmove+0x2a>
 8007364:	bd10      	pop	{r4, pc}
 8007366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800736a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800736e:	e7f7      	b.n	8007360 <memmove+0x24>

08007370 <_sbrk_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d06      	ldr	r5, [pc, #24]	; (800738c <_sbrk_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7fa f8a8 	bl	80014d0 <_sbrk>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_sbrk_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_sbrk_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000b00 	.word	0x20000b00

08007390 <_realloc_r>:
 8007390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007394:	4680      	mov	r8, r0
 8007396:	4614      	mov	r4, r2
 8007398:	460e      	mov	r6, r1
 800739a:	b921      	cbnz	r1, 80073a6 <_realloc_r+0x16>
 800739c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	4611      	mov	r1, r2
 80073a2:	f7ff bc57 	b.w	8006c54 <_malloc_r>
 80073a6:	b92a      	cbnz	r2, 80073b4 <_realloc_r+0x24>
 80073a8:	f7ff fbe8 	bl	8006b7c <_free_r>
 80073ac:	4625      	mov	r5, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b4:	f000 f81b 	bl	80073ee <_malloc_usable_size_r>
 80073b8:	4284      	cmp	r4, r0
 80073ba:	4607      	mov	r7, r0
 80073bc:	d802      	bhi.n	80073c4 <_realloc_r+0x34>
 80073be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073c2:	d812      	bhi.n	80073ea <_realloc_r+0x5a>
 80073c4:	4621      	mov	r1, r4
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7ff fc44 	bl	8006c54 <_malloc_r>
 80073cc:	4605      	mov	r5, r0
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0ed      	beq.n	80073ae <_realloc_r+0x1e>
 80073d2:	42bc      	cmp	r4, r7
 80073d4:	4622      	mov	r2, r4
 80073d6:	4631      	mov	r1, r6
 80073d8:	bf28      	it	cs
 80073da:	463a      	movcs	r2, r7
 80073dc:	f7ff fbc0 	bl	8006b60 <memcpy>
 80073e0:	4631      	mov	r1, r6
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff fbca 	bl	8006b7c <_free_r>
 80073e8:	e7e1      	b.n	80073ae <_realloc_r+0x1e>
 80073ea:	4635      	mov	r5, r6
 80073ec:	e7df      	b.n	80073ae <_realloc_r+0x1e>

080073ee <_malloc_usable_size_r>:
 80073ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f2:	1f18      	subs	r0, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bfbc      	itt	lt
 80073f8:	580b      	ldrlt	r3, [r1, r0]
 80073fa:	18c0      	addlt	r0, r0, r3
 80073fc:	4770      	bx	lr
	...

08007400 <_init>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr

0800740c <_fini>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr
