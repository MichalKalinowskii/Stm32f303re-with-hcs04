
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e74  08007e74  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08007e74  08007e74  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e74  08007e74  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e74  08007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000848  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008cc  200008cc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010bd5  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002496  00000000  00000000  00030ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da8  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab2  00000000  00000000  00033f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020630  00000000  00000000  000349c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e60  00000000  00000000  00054ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8b94  00000000  00000000  00066e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f10  00000000  00000000  0012f9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001338f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cc0 	.word	0x08007cc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08007cc0 	.word	0x08007cc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <hc_sr_04_init>:

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr_04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo,
		TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 ff14 	bl	80040e4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f003 fb7a 	bl	80039c0 <HAL_TIM_PWM_Start>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <hc_sr_04_convert_us_to_cm>:

uint32_t hc_sr_04_convert_us_to_cm(uint32_t distance_us)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <hc_sr_04_convert_us_to_cm+0x20>)
 80002e0:	fba2 2303 	umull	r2, r3, r2, r3
 80002e4:	095b      	lsrs	r3, r3, #5
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	8d3dcb09 	.word	0x8d3dcb09

080002f8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d114      	bne.n	8000334 <HAL_TIM_IC_CaptureCallback+0x3c>
	{
		hdma_tim1_ch1.State = HAL_DMA_STATE_READY;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_TIM_IC_CaptureCallback+0x48>)
 800030c:	2201      	movs	r2, #1
 800030e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		HAL_DMA_Start_IT(&hdma_tim1_ch1, (uint32_t)&TIM1->CCR2, &pwmInResult[0], 1);
 8000312:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000314:	2301      	movs	r3, #1
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <HAL_TIM_IC_CaptureCallback+0x48>)
 800031a:	f001 fa6b 	bl	80017f4 <HAL_DMA_Start_IT>
		pwmInResult;
		uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 800031e:	2104      	movs	r1, #4
 8000320:	480a      	ldr	r0, [pc, #40]	; (800034c <HAL_TIM_IC_CaptureCallback+0x54>)
 8000322:	f004 fc05 	bl	8004b30 <HAL_TIM_ReadCapturedValue>
 8000326:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
 8000328:	68f8      	ldr	r0, [r7, #12]
 800032a:	f7ff ffd3 	bl	80002d4 <hc_sr_04_convert_us_to_cm>
 800032e:	4603      	mov	r3, r0
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000332:	60d3      	str	r3, [r2, #12]
	}
}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40012c00 	.word	0x40012c00
 8000340:	20000138 	.word	0x20000138
 8000344:	2000066c 	.word	0x2000066c
 8000348:	40012c38 	.word	0x40012c38
 800034c:	200000a0 	.word	0x200000a0
 8000350:	2000065c 	.word	0x2000065c

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b0ce      	sub	sp, #312	; 0x138
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f001 f88d 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f85d 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 fa2f 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000366:	f000 fa07 	bl	8000778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800036a:	f000 f9d5 	bl	8000718 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800036e:	f000 f8b9 	bl	80004e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000372:	f000 f95b 	bl	800062c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buffer_R.tab[buffer_R.empty], 1);
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <main+0xac>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	4a21      	ldr	r2, [pc, #132]	; (8000400 <main+0xac>)
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	4413      	add	r3, r2
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	481f      	ldr	r0, [pc, #124]	; (8000404 <main+0xb0>)
 8000386:	f005 fc97 	bl	8005cb8 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)pulse, 1);
 800038a:	2301      	movs	r3, #1
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <main+0xb4>)
 800038e:	2108      	movs	r1, #8
 8000390:	481e      	ldr	r0, [pc, #120]	; (800040c <main+0xb8>)
 8000392:	f003 fc21 	bl	8003bd8 <HAL_TIM_PWM_Start_DMA>
  hc_sr_04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8000396:	2308      	movs	r3, #8
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <main+0xb8>)
 800039a:	491d      	ldr	r1, [pc, #116]	; (8000410 <main+0xbc>)
 800039c:	481d      	ldr	r0, [pc, #116]	; (8000414 <main+0xc0>)
 800039e:	f7ff ff77 	bl	8000290 <hc_sr_04_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);  // Enable PWM input capture with interrupts
 80003a2:	2104      	movs	r1, #4
 80003a4:	481a      	ldr	r0, [pc, #104]	; (8000410 <main+0xbc>)
 80003a6:	f003 fe9d 	bl	80040e4 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USART_fSend("START\n\r");
 80003aa:	481b      	ldr	r0, [pc, #108]	; (8000418 <main+0xc4>)
 80003ac:	f000 faac 	bl	8000908 <USART_fSend>
  int16_t length = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
  char bFrame[300];
  char senderAddress[4];
  while (1)
  {
	  if ((length = getFrame(bFrame)) != -1) {
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fb84 	bl	8000ac8 <getFrame>
 80003c0:	4603      	mov	r3, r0
 80003c2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80003c6:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80003ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ce:	d0f2      	beq.n	80003b6 <main+0x62>
		 if ((length = analizeFrame(bFrame,length,senderAddress)) != 0) {
 80003d0:	1d3a      	adds	r2, r7, #4
 80003d2:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fc1a 	bl	8000c14 <analizeFrame>
 80003e0:	4603      	mov	r3, r0
 80003e2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80003e6:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0e3      	beq.n	80003b6 <main+0x62>
			 analizeCommend(bFrame, length, senderAddress);
 80003ee:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	f107 0308 	add.w	r3, r7, #8
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fdd7 	bl	8000fac <analizeCommend>
	  if ((length = getFrame(bFrame)) != -1) {
 80003fe:	e7da      	b.n	80003b6 <main+0x62>
 8000400:	20000010 	.word	0x20000010
 8000404:	200001c0 	.word	0x200001c0
 8000408:	20000020 	.word	0x20000020
 800040c:	200000ec 	.word	0x200000ec
 8000410:	200000a0 	.word	0x200000a0
 8000414:	2000065c 	.word	0x2000065c
 8000418:	08007cd8 	.word	0x08007cd8

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b0a6      	sub	sp, #152	; 0x98
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000426:	2228      	movs	r2, #40	; 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f006 ffb2 	bl	8007394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2258      	movs	r2, #88	; 0x58
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f006 ffa4 	bl	8007394 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044c:	2302      	movs	r3, #2
 800044e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2310      	movs	r3, #16
 8000456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fd40 	bl	8001f00 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000486:	f000 fdd1 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048e:	2302      	movs	r3, #2
 8000490:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004a4:	2102      	movs	r1, #2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fd7e 	bl	8002fa8 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004b2:	f000 fdbb 	bl	800102c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <SystemClock_Config+0xc4>)
 80004b8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004be:	2300      	movs	r3, #0
 80004c0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 ffa3 	bl	8003414 <HAL_RCCEx_PeriphCLKConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004d4:	f000 fdaa 	bl	800102c <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	3798      	adds	r7, #152	; 0x98
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	00101002 	.word	0x00101002

080004e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b090      	sub	sp, #64	; 0x40
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004f8:	f107 031c 	add.w	r3, r7, #28
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	463b      	mov	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000520:	4b40      	ldr	r3, [pc, #256]	; (8000624 <MX_TIM1_Init+0x140>)
 8000522:	4a41      	ldr	r2, [pc, #260]	; (8000628 <MX_TIM1_Init+0x144>)
 8000524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000526:	4b3f      	ldr	r3, [pc, #252]	; (8000624 <MX_TIM1_Init+0x140>)
 8000528:	2247      	movs	r2, #71	; 0x47
 800052a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <MX_TIM1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000532:	4b3c      	ldr	r3, [pc, #240]	; (8000624 <MX_TIM1_Init+0x140>)
 8000534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000538:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <MX_TIM1_Init+0x140>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_TIM1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <MX_TIM1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800054c:	4835      	ldr	r0, [pc, #212]	; (8000624 <MX_TIM1_Init+0x140>)
 800054e:	f003 f97f 	bl	8003850 <HAL_TIM_Base_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000558:	f000 fd68 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000566:	4619      	mov	r1, r3
 8000568:	482e      	ldr	r0, [pc, #184]	; (8000624 <MX_TIM1_Init+0x140>)
 800056a:	f004 f9d5 	bl	8004918 <HAL_TIM_ConfigClockSource>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000574:	f000 fd5a 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000578:	482a      	ldr	r0, [pc, #168]	; (8000624 <MX_TIM1_Init+0x140>)
 800057a:	f003 fd51 	bl	8004020 <HAL_TIM_IC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000584:	f000 fd52 	bl	800102c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000588:	2304      	movs	r3, #4
 800058a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800058c:	2350      	movs	r3, #80	; 0x50
 800058e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4619      	mov	r1, r3
 80005a2:	4820      	ldr	r0, [pc, #128]	; (8000624 <MX_TIM1_Init+0x140>)
 80005a4:	f004 fa81 	bl	8004aaa <HAL_TIM_SlaveConfigSynchro>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005ae:	f000 fd3d 	bl	800102c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	4816      	ldr	r0, [pc, #88]	; (8000624 <MX_TIM1_Init+0x140>)
 80005cc:	f003 fff3 	bl	80045b6 <HAL_TIM_IC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80005d6:	f000 fd29 	bl	800102c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80005da:	2302      	movs	r3, #2
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80005de:	2302      	movs	r3, #2
 80005e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2204      	movs	r2, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <MX_TIM1_Init+0x140>)
 80005ec:	f003 ffe3 	bl	80045b6 <HAL_TIM_IC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80005f6:	f000 fd19 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_TIM1_Init+0x140>)
 800060c:	f005 f9fe 	bl	8005a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000616:	f000 fd09 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3740      	adds	r7, #64	; 0x40
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000a0 	.word	0x200000a0
 8000628:	40012c00 	.word	0x40012c00

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000668:	2247      	movs	r2, #71	; 0x47
 800066a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_TIM2_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000674:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_TIM2_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000686:	4823      	ldr	r0, [pc, #140]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000688:	f003 f8e2 	bl	8003850 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000692:	f000 fccb 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a0:	4619      	mov	r1, r3
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <MX_TIM2_Init+0xe8>)
 80006a4:	f004 f938 	bl	8004918 <HAL_TIM_ConfigClockSource>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006ae:	f000 fcbd 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <MX_TIM2_Init+0xe8>)
 80006b4:	f003 f923 	bl	80038fe <HAL_TIM_PWM_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006be:	f000 fcb5 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <MX_TIM2_Init+0xe8>)
 80006d2:	f005 f99b 	bl	8005a0c <HAL_TIMEx_MasterConfigSynchronization>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006dc:	f000 fca6 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2208      	movs	r2, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	; (8000714 <MX_TIM2_Init+0xe8>)
 80006f8:	f003 fffa 	bl	80046f0 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000702:	f000 fc93 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <MX_TIM2_Init+0xe8>)
 8000708:	f000 fd72 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 800070c:	bf00      	nop
 800070e:	3738      	adds	r7, #56	; 0x38
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000ec 	.word	0x200000ec

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	f005 fa00 	bl	8005b60 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 fc61 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001c0 	.word	0x200001c0
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_DMA_Init+0x48>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <MX_DMA_Init+0x48>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_DMA_Init+0x48>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200b      	movs	r0, #11
 800079c:	f000 ffad 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a0:	200b      	movs	r0, #11
 80007a2:	f000 ffc6 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200c      	movs	r0, #12
 80007ac:	f000 ffa5 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b0:	200c      	movs	r0, #12
 80007b2:	f000 ffbe 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_GPIO_Init+0xc4>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a2a      	ldr	r2, [pc, #168]	; (8000888 <MX_GPIO_Init+0xc4>)
 80007e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_GPIO_Init+0xc4>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_GPIO_Init+0xc4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <MX_GPIO_Init+0xc4>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xc4>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f001 fb45 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0xc8>)
 800085e:	f001 f9ad 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2320      	movs	r3, #32
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f001 f99e 	bl	8001bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	48000800 	.word	0x48000800

08000890 <USART_keyboardhit>:
{
	uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
	distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
}

uint8_t USART_keyboardhit(){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	if(buffer_R.empty == buffer_R.busy){
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <USART_keyboardhit+0x20>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <USART_keyboardhit+0x20>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	d101      	bne.n	80008a4 <USART_keyboardhit+0x14>
		return 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e000      	b.n	80008a6 <USART_keyboardhit+0x16>
	}
	return 1;
 80008a4:	2301      	movs	r3, #1
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	20000010 	.word	0x20000010

080008b4 <USART_getchar>:

int8_t USART_getchar(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	int16_t character;
	if(USART_keyboardhit()){
 80008ba:	f7ff ffe9 	bl	8000890 <USART_keyboardhit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d019      	beq.n	80008f8 <USART_getchar+0x44>
		character = buffer_R.tab[buffer_R.busy];
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <USART_getchar+0x50>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <USART_getchar+0x50>)
 80008ca:	6852      	ldr	r2, [r2, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	80fb      	strh	r3, [r7, #6]
		buffer_R.busy++;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <USART_getchar+0x50>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <USART_getchar+0x50>)
 80008da:	6053      	str	r3, [r2, #4]
		buffer_R.busy %= buffer_R.len;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <USART_getchar+0x50>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <USART_getchar+0x50>)
 80008e2:	6892      	ldr	r2, [r2, #8]
 80008e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80008e8:	fb01 f202 	mul.w	r2, r1, r2
 80008ec:	1a9b      	subs	r3, r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <USART_getchar+0x50>)
 80008f0:	6053      	str	r3, [r2, #4]
		return character;
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	e001      	b.n	80008fc <USART_getchar+0x48>
	}
	else{
		return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000010 	.word	0x20000010

08000908 <USART_fSend>:

void USART_fSend(char *msg, ...){
 8000908:	b40f      	push	{r0, r1, r2, r3}
 800090a:	b580      	push	{r7, lr}
 800090c:	b0a4      	sub	sp, #144	; 0x90
 800090e:	af00      	add	r7, sp, #0
	char tempDataToSend[128];
	int idx;
	va_list arglist;
	va_start(arglist, msg);
 8000910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000914:	607b      	str	r3, [r7, #4]
	vsprintf(tempDataToSend, msg, arglist);
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000920:	4618      	mov	r0, r3
 8000922:	f006 fd2d 	bl	8007380 <vsiprintf>
	va_end(arglist);
	idx = buffer_T.empty;
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <USART_fSend+0xfc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000934:	e020      	b.n	8000978 <USART_fSend+0x70>
		buffer_T.tab[idx] = tempDataToSend[i];
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <USART_fSend+0xfc>)
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800093e:	4413      	add	r3, r2
 8000940:	f107 0108 	add.w	r1, r7, #8
 8000944:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000948:	440a      	add	r2, r1
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	701a      	strb	r2, [r3, #0]
		idx++;
 800094e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000952:	3301      	adds	r3, #1
 8000954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		idx %= buffer_T.len;
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <USART_fSend+0xfc>)
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000960:	fb93 f1f2 	sdiv	r1, r3, r2
 8000964:	fb01 f202 	mul.w	r2, r1, r2
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 800096e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000972:	3301      	adds	r3, #1
 8000974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc2f 	bl	80001e0 <strlen>
 8000982:	4602      	mov	r2, r0
 8000984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000988:	429a      	cmp	r2, r3
 800098a:	d8d4      	bhi.n	8000936 <USART_fSend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
	}
	__disable_irq();
	//Sprawdzamy czy nie trwa w tym momencie transmisja, jeśli nie to przestawiamy index i ją uruchamiamy
	if((buffer_T.busy == buffer_T.empty) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET)){
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <USART_fSend+0xfc>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <USART_fSend+0xfc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d125      	bne.n	80009e8 <USART_fSend+0xe0>
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <USART_fSend+0x100>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	2b80      	cmp	r3, #128	; 0x80
 80009a8:	d11e      	bne.n	80009e8 <USART_fSend+0xe0>
		buffer_T.empty = idx;
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <USART_fSend+0xfc>)
 80009ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009b0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2,&buffer_T.tab[buffer_T.busy],1);
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <USART_fSend+0xfc>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <USART_fSend+0xfc>)
 80009b8:	6852      	ldr	r2, [r2, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	2201      	movs	r2, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <USART_fSend+0x100>)
 80009c2:	f005 f91b 	bl	8005bfc <HAL_UART_Transmit_IT>
		buffer_T.busy++;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <USART_fSend+0xfc>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <USART_fSend+0xfc>)
 80009ce:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <USART_fSend+0xfc>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <USART_fSend+0xfc>)
 80009d6:	6892      	ldr	r2, [r2, #8]
 80009d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80009dc:	fb01 f202 	mul.w	r2, r1, r2
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <USART_fSend+0xfc>)
 80009e4:	6053      	str	r3, [r2, #4]
 80009e6:	e003      	b.n	80009f0 <USART_fSend+0xe8>
	}
	else{
		buffer_T.empty = idx;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <USART_fSend+0xfc>)
 80009ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009f0:	b662      	cpsie	i
}
 80009f2:	bf00      	nop
	}
	__enable_irq();
}
 80009f4:	bf00      	nop
 80009f6:	3790      	adds	r7, #144	; 0x90
 80009f8:	46bd      	mov	sp, r7
 80009fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009fe:	b004      	add	sp, #16
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200001c0 	.word	0x200001c0

08000a0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && buffer_T.busy != buffer_T.empty){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <HAL_UART_TxCpltCallback+0x60>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d123      	bne.n	8000a64 <HAL_UART_TxCpltCallback+0x58>
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d01d      	beq.n	8000a64 <HAL_UART_TxCpltCallback+0x58>
		uint8_t character = buffer_T.tab[buffer_T.busy];
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a2e:	6852      	ldr	r2, [r2, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	73fb      	strb	r3, [r7, #15]
		buffer_T.busy++;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a3e:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a46:	6892      	ldr	r2, [r2, #8]
 8000a48:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a4c:	fb01 f202 	mul.w	r2, r1, r2
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_UART_TxCpltCallback+0x64>)
 8000a54:	6053      	str	r3, [r2, #4]
		HAL_UART_Transmit_IT(&huart2,&character,1);
 8000a56:	f107 030f 	add.w	r3, r7, #15
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <HAL_UART_TxCpltCallback+0x60>)
 8000a60:	f005 f8cc 	bl	8005bfc <HAL_UART_Transmit_IT>
	}
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200001c0 	.word	0x200001c0
 8000a70:	20000000 	.word	0x20000000

08000a74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_RxCpltCallback+0x4c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d119      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0x44>
			buffer_R.empty++;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000a8c:	6013      	str	r3, [r2, #0]
			buffer_R.empty %= buffer_R.len;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000a94:	6892      	ldr	r2, [r2, #8]
 8000a96:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a9a:	fb01 f202 	mul.w	r2, r1, r2
 8000a9e:	1a9b      	subs	r3, r3, r2
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000aa2:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,&buffer_R.tab[buffer_R.empty],1);
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_UART_RxCpltCallback+0x50>)
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <HAL_UART_RxCpltCallback+0x4c>)
 8000ab4:	f005 f900 	bl	8005cb8 <HAL_UART_Receive_IT>
		}
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001c0 	.word	0x200001c0
 8000ac4:	20000010 	.word	0x20000010

08000ac8 <getFrame>:

int16_t getFrame(char *bufferedFrame) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	static int16_t numberOfChars = -1;
	static char frameBuf[frameMaxSize - 2];
	int16_t charFromFrame;
    int16_t ret;
	static uint8_t tildeOccured = 0;
	if ((charFromFrame = USART_getchar()) != -1) {
 8000ad0:	f7ff fef0 	bl	80008b4 <USART_getchar>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	81fb      	strh	r3, [r7, #14]
 8000ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	f000 808c 	beq.w	8000bfc <getFrame+0x134>
		if (charFromFrame == startFrame) {
 8000ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae8:	2b7b      	cmp	r3, #123	; 0x7b
 8000aea:	d106      	bne.n	8000afa <getFrame+0x32>
			numberOfChars = 0;
 8000aec:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <getFrame+0x140>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	801a      	strh	r2, [r3, #0]
			tildeOccured = 0;
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <getFrame+0x144>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e080      	b.n	8000bfc <getFrame+0x134>
		}
		else if (numberOfChars >= 0) {
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <getFrame+0x140>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db7b      	blt.n	8000bfc <getFrame+0x134>
			if (tildeOccured == 1) {
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <getFrame+0x144>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d13a      	bne.n	8000b82 <getFrame+0xba>
				switch (charFromFrame) {
 8000b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b10:	2b60      	cmp	r3, #96	; 0x60
 8000b12:	d006      	beq.n	8000b22 <getFrame+0x5a>
 8000b14:	2b60      	cmp	r3, #96	; 0x60
 8000b16:	dc2b      	bgt.n	8000b70 <getFrame+0xa8>
 8000b18:	2b5b      	cmp	r3, #91	; 0x5b
 8000b1a:	d00f      	beq.n	8000b3c <getFrame+0x74>
 8000b1c:	2b5d      	cmp	r3, #93	; 0x5d
 8000b1e:	d01a      	beq.n	8000b56 <getFrame+0x8e>
 8000b20:	e026      	b.n	8000b70 <getFrame+0xa8>
					case codingChar:
						frameBuf[numberOfChars++] = codingChar;
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <getFrame+0x140>)
 8000b24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b28:	b293      	uxth	r3, r2
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b219      	sxth	r1, r3
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <getFrame+0x140>)
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <getFrame+0x148>)
 8000b36:	2160      	movs	r1, #96	; 0x60
 8000b38:	5499      	strb	r1, [r3, r2]
						break;
 8000b3a:	e01e      	b.n	8000b7a <getFrame+0xb2>
					case codeStartcharFromFrame:
						frameBuf[numberOfChars++] = startFrame;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <getFrame+0x140>)
 8000b3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b42:	b293      	uxth	r3, r2
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b219      	sxth	r1, r3
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <getFrame+0x140>)
 8000b4c:	8019      	strh	r1, [r3, #0]
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <getFrame+0x148>)
 8000b50:	217b      	movs	r1, #123	; 0x7b
 8000b52:	5499      	strb	r1, [r3, r2]
						break;
 8000b54:	e011      	b.n	8000b7a <getFrame+0xb2>
					case codeEndcharFromFrame:
						frameBuf[numberOfChars++] = endFrame;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <getFrame+0x140>)
 8000b58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b5c:	b293      	uxth	r3, r2
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b219      	sxth	r1, r3
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <getFrame+0x140>)
 8000b66:	8019      	strh	r1, [r3, #0]
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <getFrame+0x148>)
 8000b6a:	217d      	movs	r1, #125	; 0x7d
 8000b6c:	5499      	strb	r1, [r3, r2]
						break;
 8000b6e:	e004      	b.n	8000b7a <getFrame+0xb2>
					default:
						numberOfChars = -1;
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <getFrame+0x140>)
 8000b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b76:	801a      	strh	r2, [r3, #0]
						break;
 8000b78:	bf00      	nop
				}
				tildeOccured = 0;
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <getFrame+0x144>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e032      	b.n	8000be8 <getFrame+0x120>
			}
			else {
				if (charFromFrame == codingChar) {
 8000b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b86:	2b60      	cmp	r3, #96	; 0x60
 8000b88:	d103      	bne.n	8000b92 <getFrame+0xca>
					tildeOccured = 1;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <getFrame+0x144>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e02a      	b.n	8000be8 <getFrame+0x120>
				}
				else if (charFromFrame == endFrame) {
 8000b92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b96:	2b7d      	cmp	r3, #125	; 0x7d
 8000b98:	d115      	bne.n	8000bc6 <getFrame+0xfe>
					ret = numberOfChars;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <getFrame+0x140>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	81bb      	strh	r3, [r7, #12]
					numberOfChars = -1;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <getFrame+0x140>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	801a      	strh	r2, [r3, #0]
					if (ret >= (frameMinSize-2)) {
 8000ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bac:	2b07      	cmp	r3, #7
 8000bae:	dd1b      	ble.n	8000be8 <getFrame+0x120>
						memcpy(bufferedFrame, frameBuf, ret + 1);
 8000bb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4915      	ldr	r1, [pc, #84]	; (8000c10 <getFrame+0x148>)
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f006 fc30 	bl	8007420 <memcpy>
						return ret;
 8000bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc4:	e01c      	b.n	8000c00 <getFrame+0x138>
					}
				}
				else {
					frameBuf[numberOfChars] = charFromFrame;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <getFrame+0x140>)
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	b2d9      	uxtb	r1, r3
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <getFrame+0x148>)
 8000bd4:	5499      	strb	r1, [r3, r2]
					numberOfChars++;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <getFrame+0x140>)
 8000bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3301      	adds	r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <getFrame+0x140>)
 8000be6:	801a      	strh	r2, [r3, #0]
				}
			}
			if (numberOfChars >= (frameMaxSize - 2)) {
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <getFrame+0x140>)
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000bf2:	dd03      	ble.n	8000bfc <getFrame+0x134>
				numberOfChars = -1;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <getFrame+0x140>)
 8000bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfa:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000024 	.word	0x20000024
 8000c0c:	20000670 	.word	0x20000670
 8000c10:	20000674 	.word	0x20000674

08000c14 <analizeFrame>:


uint8_t analizeFrame(char *bufferedFrame, int16_t len, char *sender_add) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	817b      	strh	r3, [r7, #10]
	uint8_t intCRC;
	uint16_t commandLength;
	uint8_t i;
	uint8_t crc_temp;

	if (strncmp(bufferedFrame, device_address, 3) == 0) {
 8000c22:	2203      	movs	r2, #3
 8000c24:	4947      	ldr	r1, [pc, #284]	; (8000d44 <analizeFrame+0x130>)
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f006 fbbc 	bl	80073a4 <strncmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8082 	bne.w	8000d38 <analizeFrame+0x124>
		//Pobranie i sprawdzenie nadawcy
		memcpy(sender_add, bufferedFrame + 3, 3);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3303      	adds	r3, #3
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f006 fbef 	bl	8007420 <memcpy>
		for (i = 0; i < 3; ++i) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]
 8000c46:	e01c      	b.n	8000c82 <analizeFrame+0x6e>
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000c48:	7ffb      	ldrb	r3, [r7, #31]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b40      	cmp	r3, #64	; 0x40
 8000c52:	d905      	bls.n	8000c60 <analizeFrame+0x4c>
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b5a      	cmp	r3, #90	; 0x5a
 8000c5e:	d90d      	bls.n	8000c7c <analizeFrame+0x68>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c60:	7ffb      	ldrb	r3, [r7, #31]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000c68:	2b60      	cmp	r3, #96	; 0x60
 8000c6a:	d905      	bls.n	8000c78 <analizeFrame+0x64>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c6c:	7ffb      	ldrb	r3, [r7, #31]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b7a      	cmp	r3, #122	; 0x7a
 8000c76:	d901      	bls.n	8000c7c <analizeFrame+0x68>
				return 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e05e      	b.n	8000d3a <analizeFrame+0x126>
		for (i = 0; i < 3; ++i) {
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	77fb      	strb	r3, [r7, #31]
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d9df      	bls.n	8000c48 <analizeFrame+0x34>
			}
		}
		//Pobranie i sprawdzenie zakresu znaków (dla crc)
		//string crc - wartość crc zapisana w postaci znakowej np."25"
		memcpy(stringCRC, bufferedFrame + len - 2, 2);
 8000c88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c8c:	3b02      	subs	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	82bb      	strh	r3, [r7, #20]
		stringCRC[2] = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < 2; ++i) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	77fb      	strb	r3, [r7, #31]
 8000ca0:	e012      	b.n	8000cc8 <analizeFrame+0xb4>
			if (!(stringCRC[i] >= 0x30 && stringCRC[i] <= 0x39)) {
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
 8000ca4:	3320      	adds	r3, #32
 8000ca6:	443b      	add	r3, r7
 8000ca8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000cac:	2b2f      	cmp	r3, #47	; 0x2f
 8000cae:	d906      	bls.n	8000cbe <analizeFrame+0xaa>
 8000cb0:	7ffb      	ldrb	r3, [r7, #31]
 8000cb2:	3320      	adds	r3, #32
 8000cb4:	443b      	add	r3, r7
 8000cb6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000cba:	2b39      	cmp	r3, #57	; 0x39
 8000cbc:	d901      	bls.n	8000cc2 <analizeFrame+0xae>
				return 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e03b      	b.n	8000d3a <analizeFrame+0x126>
		for (i = 0; i < 2; ++i) {
 8000cc2:	7ffb      	ldrb	r3, [r7, #31]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	77fb      	strb	r3, [r7, #31]
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d9e9      	bls.n	8000ca2 <analizeFrame+0x8e>
			}
		}
		//Pobranie danych
		//Pobieranie długości danych (długość ramki - stałe elementy)
		commandLength = len - 8;
 8000cce:	897b      	ldrh	r3, [r7, #10]
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	83bb      	strh	r3, [r7, #28]
		memcpy(bufferedFrame, bufferedFrame + 6, commandLength);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3306      	adds	r3, #6
 8000cd8:	8bba      	ldrh	r2, [r7, #28]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f006 fb9f 	bl	8007420 <memcpy>
		//string null-terminated na końcu
		bufferedFrame[commandLength] = 0;
 8000ce2:	8bbb      	ldrh	r3, [r7, #28]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

		//Sprawdzenie konkretnych wartości CRC
		intCRC = atoi(stringCRC);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 fa7f 	bl	80071f4 <atoi>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	76fb      	strb	r3, [r7, #27]
		if ((crc_temp = CRC_100(bufferedFrame, commandLength)) != intCRC) {
 8000cfa:	8bbb      	ldrh	r3, [r7, #28]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 f925 	bl	8000f50 <CRC_100>
 8000d06:	4603      	mov	r3, r0
 8000d08:	76bb      	strb	r3, [r7, #26]
 8000d0a:	7eba      	ldrb	r2, [r7, #26]
 8000d0c:	7efb      	ldrb	r3, [r7, #27]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d010      	beq.n	8000d34 <analizeFrame+0x120>
			sprintf(wrong, "WRONG_CRC_%02d;", crc_temp);
 8000d12:	7ebb      	ldrb	r3, [r7, #26]
 8000d14:	461a      	mov	r2, r3
 8000d16:	490c      	ldr	r1, [pc, #48]	; (8000d48 <analizeFrame+0x134>)
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <analizeFrame+0x138>)
 8000d1a:	f006 fafb 	bl	8007314 <siprintf>
			sendFrame(sender_add, wrong, strlen(wrong));
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <analizeFrame+0x138>)
 8000d20:	f7ff fa5e 	bl	80001e0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4908      	ldr	r1, [pc, #32]	; (8000d4c <analizeFrame+0x138>)
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f810 	bl	8000d50 <sendFrame>
			return 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e002      	b.n	8000d3a <analizeFrame+0x126>
		}
		return 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <analizeFrame+0x126>
	}
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08007d04 	.word	0x08007d04
 8000d48:	08007ce0 	.word	0x08007ce0
 8000d4c:	20000648 	.word	0x20000648

08000d50 <sendFrame>:

void sendFrame(char dst[4], char *com, uint8_t com_len) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d5c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d60:	6018      	str	r0, [r3, #0]
 8000d62:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d66:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d6a:	6019      	str	r1, [r3, #0]
 8000d6c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d70:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d74:	701a      	strb	r2, [r3, #0]
	char frameToSend[frameMin + 510 + 1];
	uint16_t codeCommandLength;
	uint8_t crc;
	char codeCommand[510];

	codeCommandLength = code_Command(com, codeCommand, com_len);
 8000d76:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d7a:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	f107 0114 	add.w	r1, r7, #20
 8000d84:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d88:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	f000 f87f 	bl	8000e90 <code_Command>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

	frameToSend[0] = startFrame;
 8000d98:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000da0:	227b      	movs	r2, #123	; 0x7b
 8000da2:	701a      	strb	r2, [r3, #0]
	memcpy(frameToSend + 1, dst, 3);
 8000da4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000da8:	3301      	adds	r3, #1
 8000daa:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000dae:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 8000db2:	2203      	movs	r2, #3
 8000db4:	6809      	ldr	r1, [r1, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 fb32 	bl	8007420 <memcpy>
	memcpy(frameToSend + 1 + 3, device_address, 3);
 8000dbc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4930      	ldr	r1, [pc, #192]	; (8000e88 <sendFrame+0x138>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 fb2a 	bl	8007420 <memcpy>

	memcpy(frameToSend + 1 + 3 + 3, codeCommand, codeCommandLength);
 8000dcc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000dd0:	3307      	adds	r3, #7
 8000dd2:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000dd6:	f107 0114 	add.w	r1, r7, #20
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 fb20 	bl	8007420 <memcpy>

	//długość przed zakodowaniem zakodowaniem znaków
	crc = CRC_100(com, com_len);
 8000de0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000de4:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000dee:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000df2:	4611      	mov	r1, r2
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	f000 f8ab 	bl	8000f50 <CRC_100>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	// 78/10 =7
	// 7+48 = 55
	// "7"
	frameToSend[1 + 3 + 3 + codeCommandLength] = crc / 10 + 48;
 8000e00:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <sendFrame+0x13c>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e12:	3307      	adds	r3, #7
 8000e14:	3230      	adds	r2, #48	; 0x30
 8000e16:	b2d1      	uxtb	r1, r2
 8000e18:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e1c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e20:	54d1      	strb	r1, [r2, r3]
	// 78 % 10 = 8
	// 8 + 48 = 56
	// "8"
	frameToSend[1 + 3 + 3  + codeCommandLength + 1] = crc % 10 + 48;
 8000e22:	f897 241d 	ldrb.w	r2, [r7, #1053]	; 0x41d
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <sendFrame+0x13c>)
 8000e28:	fba3 1302 	umull	r1, r3, r3, r2
 8000e2c:	08d9      	lsrs	r1, r3, #3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e3e:	3308      	adds	r3, #8
 8000e40:	3230      	adds	r2, #48	; 0x30
 8000e42:	b2d1      	uxtb	r1, r2
 8000e44:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e48:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e4c:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 2] = endFrame;
 8000e4e:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e52:	3309      	adds	r3, #9
 8000e54:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e58:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e5c:	217d      	movs	r1, #125	; 0x7d
 8000e5e:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 3] = 0;
 8000e60:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e64:	330a      	adds	r3, #10
 8000e66:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e6a:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e6e:	2100      	movs	r1, #0
 8000e70:	54d1      	strb	r1, [r2, r3]

	USART_fSend(frameToSend);
 8000e72:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fd46 	bl	8000908 <USART_fSend>
}
 8000e7c:	bf00      	nop
 8000e7e:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	08007d04 	.word	0x08007d04
 8000e8c:	cccccccd 	.word	0xcccccccd

08000e90 <code_Command>:

//Przerobienie znaków początku, końca i znaku kodującego na nadające się do przesyłania w ramce
int16_t code_Command(char *src, char *dst, uint8_t com_len) {
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	uint16_t j;
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	82fb      	strh	r3, [r7, #22]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	82bb      	strh	r3, [r7, #20]
 8000ea6:	e045      	b.n	8000f34 <code_Command+0xa4>

		switch (src[i]) {
 8000ea8:	8afb      	ldrh	r3, [r7, #22]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b7d      	cmp	r3, #125	; 0x7d
 8000eb2:	d022      	beq.n	8000efa <code_Command+0x6a>
 8000eb4:	2b7d      	cmp	r3, #125	; 0x7d
 8000eb6:	dc2e      	bgt.n	8000f16 <code_Command+0x86>
 8000eb8:	2b60      	cmp	r3, #96	; 0x60
 8000eba:	d002      	beq.n	8000ec2 <code_Command+0x32>
 8000ebc:	2b7b      	cmp	r3, #123	; 0x7b
 8000ebe:	d00e      	beq.n	8000ede <code_Command+0x4e>
 8000ec0:	e029      	b.n	8000f16 <code_Command+0x86>
		case codingChar:
			dst[j++] = codingChar;
 8000ec2:	8abb      	ldrh	r3, [r7, #20]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	82ba      	strh	r2, [r7, #20]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	2260      	movs	r2, #96	; 0x60
 8000ed0:	701a      	strb	r2, [r3, #0]
			dst[j] = codingChar;
 8000ed2:	8abb      	ldrh	r3, [r7, #20]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	2260      	movs	r2, #96	; 0x60
 8000eda:	701a      	strb	r2, [r3, #0]
			break;
 8000edc:	e024      	b.n	8000f28 <code_Command+0x98>
		case startFrame:
			dst[j++] = codingChar;
 8000ede:	8abb      	ldrh	r3, [r7, #20]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	82ba      	strh	r2, [r7, #20]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2260      	movs	r2, #96	; 0x60
 8000eec:	701a      	strb	r2, [r3, #0]
			dst[j] = '[';
 8000eee:	8abb      	ldrh	r3, [r7, #20]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	225b      	movs	r2, #91	; 0x5b
 8000ef6:	701a      	strb	r2, [r3, #0]
			break;
 8000ef8:	e016      	b.n	8000f28 <code_Command+0x98>
		case endFrame:
			dst[j++] = codingChar;
 8000efa:	8abb      	ldrh	r3, [r7, #20]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	82ba      	strh	r2, [r7, #20]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4413      	add	r3, r2
 8000f06:	2260      	movs	r2, #96	; 0x60
 8000f08:	701a      	strb	r2, [r3, #0]
			dst[j] = ']';
 8000f0a:	8abb      	ldrh	r3, [r7, #20]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	4413      	add	r3, r2
 8000f10:	225d      	movs	r2, #93	; 0x5d
 8000f12:	701a      	strb	r2, [r3, #0]
			break;
 8000f14:	e008      	b.n	8000f28 <code_Command+0x98>
		default:
			dst[j] = src[i];
 8000f16:	8afb      	ldrh	r3, [r7, #22]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	441a      	add	r2, r3
 8000f1c:	8abb      	ldrh	r3, [r7, #20]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	440b      	add	r3, r1
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
			break;
 8000f26:	bf00      	nop
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	82fb      	strh	r3, [r7, #22]
 8000f2e:	8abb      	ldrh	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	82bb      	strh	r3, [r7, #20]
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	8afa      	ldrh	r2, [r7, #22]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3b4      	bcc.n	8000ea8 <code_Command+0x18>
		}
	}
	return j;
 8000f3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <CRC_100>:

uint8_t CRC_100(char *src, uint8_t len) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t temp = src[0];
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e009      	b.n	8000f7c <CRC_100+0x2c>
		//xor, ponieważ or da nam same 1, and same 0
		temp ^= src[i];
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	4053      	eors	r3, r2
 8000f74:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3f1      	bcc.n	8000f68 <CRC_100+0x18>
	}
	temp %= 100;
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <CRC_100+0x58>)
 8000f88:	fba2 1203 	umull	r1, r2, r2, r3
 8000f8c:	0952      	lsrs	r2, r2, #5
 8000f8e:	2164      	movs	r1, #100	; 0x64
 8000f90:	fb01 f202 	mul.w	r2, r1, r2
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	73bb      	strb	r3, [r7, #14]
	return temp;
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	51eb851f 	.word	0x51eb851f

08000fac <analizeCommend>:

void analizeCommend(char* com, uint8_t len, char* sender_add) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	72fb      	strb	r3, [r7, #11]
	if (strncmp(com, "GetSurvey()", (unsigned)11) == 0) {
 8000fba:	220b      	movs	r2, #11
 8000fbc:	4917      	ldr	r1, [pc, #92]	; (800101c <analizeCommend+0x70>)
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f006 f9f0 	bl	80073a4 <strncmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d123      	bne.n	8001012 <analizeCommend+0x66>
		//GetSurvey();
		char stringDistance[20];
		sprintf(stringDistance, "%lu", (unsigned long)distance_sensor.distance_cm);
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <analizeCommend+0x74>)
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4914      	ldr	r1, [pc, #80]	; (8001024 <analizeCommend+0x78>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 f99d 	bl	8007314 <siprintf>
		strcat(stringDistance, "cm");
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8fe 	bl	80001e0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4413      	add	r3, r2
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <analizeCommend+0x7c>)
 8000ff0:	8811      	ldrh	r1, [r2, #0]
 8000ff2:	7892      	ldrb	r2, [r2, #2]
 8000ff4:	8019      	strh	r1, [r3, #0]
 8000ff6:	709a      	strb	r2, [r3, #2]
		sendFrame(sender_add, stringDistance, strlen(stringDistance));
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8ef 	bl	80001e0 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fe9f 	bl	8000d50 <sendFrame>
	}
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	08007cf0 	.word	0x08007cf0
 8001020:	2000065c 	.word	0x2000065c
 8001024:	08007cfc 	.word	0x08007cfc
 8001028:	08007d00 	.word	0x08007d00

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x44>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x44>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x44>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x44>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 fb38 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_TIM_Base_MspInit+0x158>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d15b      	bne.n	800115a <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010e4:	2306      	movs	r3, #6
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f000 fd63 	bl	8001bbc <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 80010f8:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_TIM_Base_MspInit+0x164>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001120:	2220      	movs	r2, #32
 8001122:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 800112e:	f000 fb1a 	bl	8001766 <HAL_DMA_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 8001138:	f7ff ff78 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <HAL_TIM_Base_MspInit+0x160>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	201b      	movs	r0, #27
 800114e:	f000 fad4 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001152:	201b      	movs	r0, #27
 8001154:	f000 faed 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001158:	e039      	b.n	80011ce <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001162:	d134      	bne.n	80011ce <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	61d3      	str	r3, [r2, #28]
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_TIM_Base_MspInit+0x15c>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_TIM_Base_MspInit+0x16c>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 8001184:	2210      	movs	r2, #16
 8001186:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 800119e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 80011a6:	2220      	movs	r2, #32
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 80011ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 80011b4:	f000 fad7 	bl	8001766 <HAL_DMA_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 80011be:	f7ff ff35 	bl	800102c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_TIM_Base_MspInit+0x168>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000138 	.word	0x20000138
 80011e4:	4002001c 	.word	0x4002001c
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	40020008 	.word	0x40020008

080011f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d11d      	bne.n	800124e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800123c:	230a      	movs	r3, #10
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fcb7 	bl	8001bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x8c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d130      	bne.n	80012e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0x90>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0x90>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_UART_MspInit+0x90>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_UART_MspInit+0x90>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f000 fc76 	bl	8001bbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2026      	movs	r0, #38	; 0x26
 80012d6:	f000 fa10 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012da:	2026      	movs	r0, #38	; 0x26
 80012dc:	f000 fa29 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40004400 	.word	0x40004400
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
 800133c:	f000 f8e2 	bl	8001504 <HAL_IncTick>
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA1_Channel1_IRQHandler>:
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Channel1_IRQHandler+0x10>)
 800134a:	f000 fb29 	bl	80019a0 <HAL_DMA_IRQHandler>
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000017c 	.word	0x2000017c

08001358 <DMA1_Channel2_IRQHandler>:
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Channel2_IRQHandler+0x10>)
 800135e:	f000 fb1f 	bl	80019a0 <HAL_DMA_IRQHandler>
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000138 	.word	0x20000138

0800136c <TIM1_CC_IRQHandler>:
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM1_CC_IRQHandler+0x10>)
 8001372:	f003 f801 	bl	8004378 <HAL_TIM_IRQHandler>
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000a0 	.word	0x200000a0

08001380 <USART2_IRQHandler>:
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <USART2_IRQHandler+0x10>)
 8001386:	f004 fcdb 	bl	8005d40 <HAL_UART_IRQHandler>
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001c0 	.word	0x200001c0

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f006 f800 	bl	80073c8 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20010000 	.word	0x20010000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	2000077c 	.word	0x2000077c
 80013fc:	200008d0 	.word	0x200008d0

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f005 ffbf 	bl	80073d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7fe ff7d 	bl	8000354 <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800145c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001468:	08007e7c 	.word	0x08007e7c
  ldr r2, =_sbss
 800146c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001470:	200008cc 	.word	0x200008cc

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f92b 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fdd0 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f943 	bl	800174e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f90b 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000028 	.word	0x20000028
 80014fc:	20000030 	.word	0x20000030
 8001500:	2000002c 	.word	0x2000002c

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000030 	.word	0x20000030
 8001528:	20000780 	.word	0x20000780

0800152c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000780 	.word	0x20000780

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e037      	b.n	80017ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001792:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9b8 	bl	8001b44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}  
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_DMA_Start_IT+0x20>
 8001810:	2302      	movs	r3, #2
 8001812:	e04a      	b.n	80018aa <HAL_DMA_Start_IT+0xb6>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001822:	2b01      	cmp	r3, #1
 8001824:	d13a      	bne.n	800189c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f94b 	bl	8001ae6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 020e 	orr.w	r2, r2, #14
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e00f      	b.n	800188a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 020a 	orr.w	r2, r2, #10
 8001878:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0204 	bic.w	r2, r2, #4
 8001888:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e005      	b.n	80018a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2204      	movs	r2, #4
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 020e 	bic.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001936:	2b02      	cmp	r3, #2
 8001938:	d005      	beq.n	8001946 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e027      	b.n	8001996 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020e 	bic.w	r2, r2, #14
 8001954:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
    } 
  }
  return status;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d024      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x72>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01f      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2104      	movs	r1, #4
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d06a      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a10:	e065      	b.n	8001ade <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2202      	movs	r2, #2
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02c      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xdc>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d027      	beq.n	8001a7c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020a 	bic.w	r2, r2, #10
 8001a48:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d035      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a7a:	e030      	b.n	8001ade <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d028      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13e>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020e 	bic.w	r2, r2, #14
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
    }
  }
}  
 8001adc:	e7ff      	b.n	8001ade <HAL_DMA_IRQHandler+0x13e>
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b10      	cmp	r3, #16
 8001b12:	d108      	bne.n	8001b26 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b24:	e007      	b.n	8001b36 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	60da      	str	r2, [r3, #12]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <DMA_CalcBaseAndBitshift+0x60>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d80f      	bhi.n	8001b78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b60:	4413      	add	r3, r2
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <DMA_CalcBaseAndBitshift+0x68>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	009a      	lsls	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b76:	e00e      	b.n	8001b96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <DMA_CalcBaseAndBitshift+0x70>)
 8001b80:	4413      	add	r3, r2
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <DMA_CalcBaseAndBitshift+0x68>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <DMA_CalcBaseAndBitshift+0x74>)
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40020407 	.word	0x40020407
 8001ba8:	bffdfff8 	.word	0xbffdfff8
 8001bac:	cccccccd 	.word	0xcccccccd
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	bffdfbf8 	.word	0xbffdfbf8
 8001bb8:	40020400 	.word	0x40020400

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e160      	b.n	8001e8e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8152 	beq.w	8001e88 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x40>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	6939      	ldr	r1, [r7, #16]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80ac 	beq.w	8001e88 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d72:	d025      	beq.n	8001dc0 <HAL_GPIO_Init+0x204>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <HAL_GPIO_Init+0x2f8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d01f      	beq.n	8001dbc <HAL_GPIO_Init+0x200>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x2fc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d019      	beq.n	8001db8 <HAL_GPIO_Init+0x1fc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x300>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1f8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x304>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1f4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x308>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1f0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x30c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1ec>
 8001da4:	2306      	movs	r3, #6
 8001da6:	e00c      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001da8:	2307      	movs	r3, #7
 8001daa:	e00a      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001dac:	2305      	movs	r3, #5
 8001dae:	e008      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e006      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e004      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_GPIO_Init+0x206>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd2:	4937      	ldr	r1, [pc, #220]	; (8001eb0 <HAL_GPIO_Init+0x2f4>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e04:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_GPIO_Init+0x310>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f ae97 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48001000 	.word	0x48001000
 8001ec4:	48001400 	.word	0x48001400
 8001ec8:	48001800 	.word	0x48001800
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f001 b83a 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 816f 	beq.w	800221a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f3c:	4bb5      	ldr	r3, [pc, #724]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d00c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f48:	4bb2      	ldr	r3, [pc, #712]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d15c      	bne.n	800200e <HAL_RCC_OscConfig+0x10e>
 8001f54:	4baf      	ldr	r3, [pc, #700]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d155      	bne.n	800200e <HAL_RCC_OscConfig+0x10e>
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x94>
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e015      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f98:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fb0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fbc:	4b95      	ldr	r3, [pc, #596]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001fc8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fcc:	fa92 f2a2 	rbit	r2, r2
 8001fd0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001fd4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fd8:	fab2 f282 	clz	r2, r2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f002 021f 	and.w	r2, r2, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8111 	beq.w	8002218 <HAL_RCC_OscConfig+0x318>
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8108 	bne.w	8002218 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f000 bfc6 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x12e>
 8002020:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a7b      	ldr	r2, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e036      	b.n	800209c <HAL_RCC_OscConfig+0x19c>
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x158>
 800203e:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a74      	ldr	r2, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b72      	ldr	r3, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a71      	ldr	r2, [pc, #452]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e021      	b.n	800209c <HAL_RCC_OscConfig+0x19c>
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x184>
 800206a:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a69      	ldr	r2, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a66      	ldr	r2, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0x19c>
 8002084:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a62      	ldr	r2, [pc, #392]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b60      	ldr	r3, [pc, #384]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a5f      	ldr	r2, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d059      	beq.n	8002160 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa3e 	bl	800152c <HAL_GetTick>
 80020b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b6:	f7ff fa39 	bl	800152c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d902      	bls.n	80020cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f000 bf67 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 80020cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80020e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_OscConfig+0x1fe>
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x22a>
 80020fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002102:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002116:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800211a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800212e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002132:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002136:	fa92 f2a2 	rbit	r2, r2
 800213a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800213e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f002 021f 	and.w	r2, r2, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ab      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1b6>
 800215e:	e05c      	b.n	800221a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f9e4 	bl	800152c <HAL_GetTick>
 8002164:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216a:	f7ff f9df 	bl	800152c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d902      	bls.n	8002180 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	f000 bf0d 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002194:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2b2>
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x2de>
 80021b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_RCC_OscConfig+0x314>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80021e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80021f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f002 021f 	and.w	r2, r2, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ab      	bne.n	800216a <HAL_RCC_OscConfig+0x26a>
 8002212:	e002      	b.n	800221a <HAL_RCC_OscConfig+0x31a>
 8002214:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 817f 	beq.w	800252e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002230:	4ba7      	ldr	r3, [pc, #668]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800223c:	4ba4      	ldr	r3, [pc, #656]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d173      	bne.n	8002330 <HAL_RCC_OscConfig+0x430>
 8002248:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002254:	d16c      	bne.n	8002330 <HAL_RCC_OscConfig+0x430>
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002268:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x386>
 8002280:	4b93      	ldr	r3, [pc, #588]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e013      	b.n	80022ae <HAL_RCC_OscConfig+0x3ae>
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002298:	2302      	movs	r3, #2
 800229a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800229e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2202      	movs	r2, #2
 80022b0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80022b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80022c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3f6>
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d002      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f000 be52 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002302:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	21f8      	movs	r1, #248	; 0xf8
 800230c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002314:	fa91 f1a1 	rbit	r1, r1
 8002318:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800231c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002320:	fab1 f181 	clz	r1, r1
 8002324:	b2c9      	uxtb	r1, r1
 8002326:	408b      	lsls	r3, r1
 8002328:	4969      	ldr	r1, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e0fe      	b.n	800252e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8088 	beq.w	8002452 <HAL_RCC_OscConfig+0x552>
 8002342:	2301      	movs	r3, #1
 8002344:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002354:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002362:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	461a      	mov	r2, r3
 800236a:	2301      	movs	r3, #1
 800236c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff f8dd 	bl	800152c <HAL_GetTick>
 8002372:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002378:	f7ff f8d8 	bl	800152c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d902      	bls.n	800238e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f000 be06 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80023a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_RCC_OscConfig+0x4be>
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	e013      	b.n	80023e6 <HAL_RCC_OscConfig+0x4e6>
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023d0:	2302      	movs	r3, #2
 80023d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	2202      	movs	r2, #2
 80023e8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80023ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80023f0:	fa92 f2a2 	rbit	r2, r2
 80023f4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80023f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0af      	beq.n	8002378 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002424:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	21f8      	movs	r1, #248	; 0xf8
 800242e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002436:	fa91 f1a1 	rbit	r1, r1
 800243a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800243e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002442:	fab1 f181 	clz	r1, r1
 8002446:	b2c9      	uxtb	r1, r1
 8002448:	408b      	lsls	r3, r1
 800244a:	4921      	ldr	r1, [pc, #132]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e06d      	b.n	800252e <HAL_RCC_OscConfig+0x62e>
 8002452:	2301      	movs	r3, #1
 8002454:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002464:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002472:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	2300      	movs	r3, #0
 800247c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff f855 	bl	800152c <HAL_GetTick>
 8002482:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f850 	bl	800152c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d902      	bls.n	800249e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	f000 bd7e 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80024b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5d4>
 80024c8:	4b01      	ldr	r3, [pc, #4]	; (80024d0 <HAL_RCC_OscConfig+0x5d0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e016      	b.n	80024fc <HAL_RCC_OscConfig+0x5fc>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80024e6:	2302      	movs	r3, #2
 80024e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024f8:	4bbf      	ldr	r3, [pc, #764]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2202      	movs	r2, #2
 80024fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002502:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002506:	fa92 f2a2 	rbit	r2, r2
 800250a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800250e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ac      	bne.n	8002488 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002532:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8113 	beq.w	800276a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002548:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d07c      	beq.n	800264e <HAL_RCC_OscConfig+0x74e>
 8002554:	2301      	movs	r3, #1
 8002556:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4ba2      	ldr	r3, [pc, #648]	; (80027fc <HAL_RCC_OscConfig+0x8fc>)
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	461a      	mov	r2, r3
 800257a:	2301      	movs	r3, #1
 800257c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7fe ffd5 	bl	800152c <HAL_GetTick>
 8002582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe ffd0 	bl	800152c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d902      	bls.n	800259e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	f000 bcfe 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 8002600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800260a:	2102      	movs	r1, #2
 800260c:	6019      	str	r1, [r3, #0]
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f1a3 	rbit	r1, r3
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002624:	6019      	str	r1, [r3, #0]
  return result;
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d09d      	beq.n	8002588 <HAL_RCC_OscConfig+0x688>
 800264c:	e08d      	b.n	800276a <HAL_RCC_OscConfig+0x86a>
 800264e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800266c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002670:	601a      	str	r2, [r3, #0]
  return result;
 8002672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002676:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800267a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x8fc>)
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2300      	movs	r3, #0
 800268e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe ff4c 	bl	800152c <HAL_GetTick>
 8002694:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe ff47 	bl	800152c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bc75 	b.w	8002f9a <HAL_RCC_OscConfig+0x109a>
 80026b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026dc:	2202      	movs	r2, #2
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fa93 f2a3 	rbit	r2, r3
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800271a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 800271e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002724:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002728:	2102      	movs	r1, #2
 800272a:	6019      	str	r1, [r3, #0]
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f1a3 	rbit	r1, r3
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002742:	6019      	str	r1, [r3, #0]
  return result;
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d197      	bne.n	800269a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 81a5 	beq.w	8002aca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCC_OscConfig+0x8f8>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_OscConfig+0x900>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d121      	bne.n	8002810 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_RCC_OscConfig+0x900>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x900>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fea8 	bl	800152c <HAL_GetTick>
 80027dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	e010      	b.n	8002804 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e2:	f7fe fea3 	bl	800152c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e3d1      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	10908120 	.word	0x10908120
 8002800:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_RCC_OscConfig+0xb3c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0e8      	beq.n	80027e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002814:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x92e>
 8002820:	4b87      	ldr	r3, [pc, #540]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a86      	ldr	r2, [pc, #536]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e035      	b.n	800289a <HAL_RCC_OscConfig+0x99a>
 800282e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x958>
 800283e:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a7f      	ldr	r2, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	e020      	b.n	800289a <HAL_RCC_OscConfig+0x99a>
 8002858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x982>
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a74      	ldr	r2, [pc, #464]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a71      	ldr	r2, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x99a>
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a6b      	ldr	r2, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8081 	beq.w	80029ae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fe3e 	bl	800152c <HAL_GetTick>
 80028b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fe39 	bl	800152c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e365      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 80028ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028fa:	2202      	movs	r2, #2
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002902:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	fa93 f2a3 	rbit	r2, r3
 800290c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002910:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002914:	601a      	str	r2, [r3, #0]
  return result;
 8002916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800291a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800291e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d102      	bne.n	800293a <HAL_RCC_OscConfig+0xa3a>
 8002934:	4b42      	ldr	r3, [pc, #264]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	e013      	b.n	8002962 <HAL_RCC_OscConfig+0xa62>
 800293a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002958:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002966:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800296a:	2102      	movs	r1, #2
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002972:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	fa92 f1a2 	rbit	r1, r2
 800297c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002980:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002984:	6011      	str	r1, [r2, #0]
  return result;
 8002986:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800298a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d084      	beq.n	80028b6 <HAL_RCC_OscConfig+0x9b6>
 80029ac:	e083      	b.n	8002ab6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fdbd 	bl	800152c <HAL_GetTick>
 80029b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fdb8 	bl	800152c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2e4      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 80029d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029d8:	2202      	movs	r2, #2
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029fc:	2202      	movs	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a16:	601a      	str	r2, [r3, #0]
  return result;
 8002a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0xb44>
 8002a36:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_RCC_OscConfig+0xb40>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	e017      	b.n	8002a6c <HAL_RCC_OscConfig+0xb6c>
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	4bb3      	ldr	r3, [pc, #716]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a70:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a74:	2102      	movs	r1, #2
 8002a76:	6011      	str	r1, [r2, #0]
 8002a78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	fa92 f1a2 	rbit	r1, r2
 8002a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a8a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a8e:	6011      	str	r1, [r2, #0]
  return result;
 8002a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a94:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	fab2 f282 	clz	r2, r2
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f002 021f 	and.w	r2, r2, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d180      	bne.n	80029b8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b9e      	ldr	r3, [pc, #632]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a9d      	ldr	r2, [pc, #628]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 825e 	beq.w	8002f98 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b96      	ldr	r3, [pc, #600]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f000 821f 	beq.w	8002f28 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f040 8170 	bne.w	8002ddc <HAL_RCC_OscConfig+0xedc>
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b20:	601a      	str	r2, [r3, #0]
  return result;
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fcf3 	bl	800152c <HAL_GetTick>
 8002b46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	e009      	b.n	8002b60 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fcee 	bl	800152c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e21c      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b84:	601a      	str	r2, [r3, #0]
  return result;
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d102      	bne.n	8002baa <HAL_RCC_OscConfig+0xcaa>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_OscConfig+0xcfa>
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c06:	6011      	str	r1, [r2, #0]
 8002c08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	fa92 f1a2 	rbit	r1, r2
 8002c16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c1a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c1e:	6011      	str	r1, [r2, #0]
  return result;
 8002c20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c24:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	fab2 f282 	clz	r2, r2
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d182      	bne.n	8002b4c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c46:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c60:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a19      	ldr	r1, [r3, #32]
 8002c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	492d      	ldr	r1, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cac:	601a      	str	r2, [r3, #0]
  return result;
 8002cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cb6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe fc2d 	bl	800152c <HAL_GetTick>
 8002cd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd6:	e009      	b.n	8002cec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fc28 	bl	800152c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e156      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 8002cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d10:	601a      	str	r2, [r3, #0]
  return result;
 8002d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0xe3c>
 8002d30:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <HAL_RCC_OscConfig+0xe38>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e02a      	b.n	8002d8c <HAL_RCC_OscConfig+0xe8c>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f2a3 	rbit	r2, r3
 8002d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d82:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <HAL_RCC_OscConfig+0x10a4>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d98:	6011      	str	r1, [r2, #0]
 8002d9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d9e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	fa92 f1a2 	rbit	r1, r2
 8002da8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dac:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002db0:	6011      	str	r1, [r2, #0]
  return result;
 8002db2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002db6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f002 021f 	and.w	r2, r2, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f43f af7f 	beq.w	8002cd8 <HAL_RCC_OscConfig+0xdd8>
 8002dda:	e0dd      	b.n	8002f98 <HAL_RCC_OscConfig+0x1098>
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e00:	601a      	str	r2, [r3, #0]
  return result;
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e0a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2300      	movs	r3, #0
 8002e20:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fb83 	bl	800152c <HAL_GetTick>
 8002e26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e009      	b.n	8002e40 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fb7e 	bl	800152c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ac      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_OscConfig+0xf8a>
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x10a4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e027      	b.n	8002eda <HAL_RCC_OscConfig+0xfda>
 8002e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f2a3 	rbit	r2, r3
 8002ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eaa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCC_OscConfig+0x10a4>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ede:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ee2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ee6:	6011      	str	r1, [r2, #0]
 8002ee8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	fa92 f1a2 	rbit	r1, r2
 8002ef6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002efa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002efe:	6011      	str	r1, [r2, #0]
  return result;
 8002f00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f04:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d182      	bne.n	8002e2c <HAL_RCC_OscConfig+0xf2c>
 8002f26:	e037      	b.n	8002f98 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e02e      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x10a4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_RCC_OscConfig+0x10a4>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f50:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d117      	bne.n	8002f94 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f68:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b09e      	sub	sp, #120	; 0x78
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e162      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b90      	ldr	r3, [pc, #576]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d910      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	498b      	ldr	r1, [pc, #556]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e14a      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	497f      	ldr	r1, [pc, #508]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80dc 	beq.w	80031d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d13c      	bne.n	800309e <HAL_RCC_ClockConfig+0xf6>
 8003024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003028:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_RCC_ClockConfig+0xa6>
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	e00f      	b.n	800306e <HAL_RCC_ClockConfig+0xc6>
 800304e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	667b      	str	r3, [r7, #100]	; 0x64
 800305c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003060:	663b      	str	r3, [r7, #96]	; 0x60
 8003062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003072:	65ba      	str	r2, [r7, #88]	; 0x58
 8003074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800307c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d17b      	bne.n	8003192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0f3      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d13c      	bne.n	8003120 <HAL_RCC_ClockConfig+0x178>
 80030a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x128>
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_ClockConfig+0x148>
 80030d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e2:	643b      	str	r3, [r7, #64]	; 0x40
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80030f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13a      	bne.n	8003192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0b2      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
 8003120:	2302      	movs	r3, #2
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_RCC_ClockConfig+0x1a0>
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	e00d      	b.n	8003164 <HAL_RCC_ClockConfig+0x1bc>
 8003148:	2302      	movs	r3, #2
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	2302      	movs	r3, #2
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	61fb      	str	r3, [r7, #28]
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2202      	movs	r2, #2
 8003166:	61ba      	str	r2, [r7, #24]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	fa92 f2a2 	rbit	r2, r2
 800316e:	617a      	str	r2, [r7, #20]
  return result;
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	fab2 f282 	clz	r2, r2
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f002 021f 	and.w	r2, r2, #31
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e079      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	491a      	ldr	r1, [pc, #104]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a4:	f7fe f9c2 	bl	800152c <HAL_GetTick>
 80031a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fe f9be 	bl	800152c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e061      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d214      	bcs.n	800320c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 0207 	bic.w	r2, r3, #7
 80031ea:	4906      	ldr	r1, [pc, #24]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_RCC_ClockConfig+0x25c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e040      	b.n	8003286 <HAL_RCC_ClockConfig+0x2de>
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_ClockConfig+0x2e8>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	491a      	ldr	r1, [pc, #104]	; (8003290 <HAL_RCC_ClockConfig+0x2e8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_RCC_ClockConfig+0x2e8>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4912      	ldr	r1, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x2e8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800324a:	f000 f829 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800324e:	4601      	mov	r1, r0
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_ClockConfig+0x2e8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003258:	22f0      	movs	r2, #240	; 0xf0
 800325a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	fa92 f2a2 	rbit	r2, r2
 8003262:	60fa      	str	r2, [r7, #12]
  return result;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	fab2 f282 	clz	r2, r2
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	40d3      	lsrs	r3, r2
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x2ec>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	fa21 f303 	lsr.w	r3, r1, r3
 8003276:	4a08      	ldr	r2, [pc, #32]	; (8003298 <HAL_RCC_ClockConfig+0x2f0>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCC_ClockConfig+0x2f4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe f910 	bl	80014a4 <HAL_InitTick>
  
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3778      	adds	r7, #120	; 0x78
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	08007d08 	.word	0x08007d08
 8003298:	20000028 	.word	0x20000028
 800329c:	2000002c 	.word	0x2000002c

080032a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x30>
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x36>
 80032ce:	e03f      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032d2:	623b      	str	r3, [r7, #32]
      break;
 80032d4:	e03f      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	fa92 f2a2 	rbit	r2, r2
 80032e8:	607a      	str	r2, [r7, #4]
  return result;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	40d3      	lsrs	r3, r2
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_RCC_GetSysClockFreq+0xcc>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	220f      	movs	r2, #15
 8003304:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	60fa      	str	r2, [r7, #12]
  return result;
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	40d3      	lsrs	r3, r2
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_RCC_GetSysClockFreq+0xd0>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003328:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc8>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	e007      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc8>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	623b      	str	r3, [r7, #32]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003352:	623b      	str	r3, [r7, #32]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6a3b      	ldr	r3, [r7, #32]
}
 8003358:	4618      	mov	r0, r3
 800335a:	372c      	adds	r7, #44	; 0x2c
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40021000 	.word	0x40021000
 8003368:	007a1200 	.word	0x007a1200
 800336c:	08007d20 	.word	0x08007d20
 8003370:	08007d30 	.word	0x08007d30

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000028 	.word	0x20000028

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003392:	f7ff ffef 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003396:	4601      	mov	r1, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	fa92 f2a2 	rbit	r2, r2
 80033ac:	603a      	str	r2, [r7, #0]
  return result;
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	40d3      	lsrs	r3, r2
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08007d18 	.word	0x08007d18

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033d6:	f7ff ffcd 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033da:	4601      	mov	r1, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	603a      	str	r2, [r7, #0]
  return result;
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	40d3      	lsrs	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	08007d18 	.word	0x08007d18

08003414 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b092      	sub	sp, #72	; 0x48
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80d4 	beq.w	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003438:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	61d3      	str	r3, [r2, #28]
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b45      	ldr	r3, [pc, #276]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d118      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346e:	4b42      	ldr	r3, [pc, #264]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a41      	ldr	r2, [pc, #260]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347a:	f7fe f857 	bl	800152c <HAL_GetTick>
 800347e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003480:	e008      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003482:	f7fe f853 	bl	800152c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b64      	cmp	r3, #100	; 0x64
 800348e:	d901      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1d6      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8084 	beq.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d07c      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	461a      	mov	r2, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe f803 	bl	800152c <HAL_GetTick>
 8003526:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd ffff 	bl	800152c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e180      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003540:	2302      	movs	r3, #2
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	2302      	movs	r3, #2
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	61fb      	str	r3, [r7, #28]
  return result;
 8003558:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d108      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800356e:	4b01      	ldr	r3, [pc, #4]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	e00d      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
 800357c:	10908100 	.word	0x10908100
 8003580:	2302      	movs	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	4b9a      	ldr	r3, [pc, #616]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2202      	movs	r2, #2
 8003592:	613a      	str	r2, [r7, #16]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	fa92 f2a2 	rbit	r2, r2
 800359a:	60fa      	str	r2, [r7, #12]
  return result;
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0b7      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ba:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	498c      	ldr	r1, [pc, #560]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4a87      	ldr	r2, [pc, #540]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ec:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f023 0203 	bic.w	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	497f      	ldr	r1, [pc, #508]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800360a:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4978      	ldr	r1, [pc, #480]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4970      	ldr	r1, [pc, #448]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f023 0210 	bic.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4969      	ldr	r1, [pc, #420]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	4961      	ldr	r1, [pc, #388]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003682:	4b5d      	ldr	r3, [pc, #372]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f023 0220 	bic.w	r2, r3, #32
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	495a      	ldr	r1, [pc, #360]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036a0:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	4952      	ldr	r1, [pc, #328]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036be:	4b4e      	ldr	r3, [pc, #312]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	494b      	ldr	r1, [pc, #300]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4943      	ldr	r1, [pc, #268]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036fa:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	493c      	ldr	r1, [pc, #240]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	4934      	ldr	r1, [pc, #208]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	492d      	ldr	r1, [pc, #180]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	491e      	ldr	r1, [pc, #120]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	490f      	ldr	r1, [pc, #60]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80037ea:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	4913      	ldr	r1, [pc, #76]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003800:	4313      	orrs	r3, r2
 8003802:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381c:	490b      	ldr	r1, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800381e:	4313      	orrs	r3, r2
 8003820:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800383c:	4313      	orrs	r3, r2
 800383e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3748      	adds	r7, #72	; 0x48
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e049      	b.n	80038f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fc02 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f001 faa0 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e049      	b.n	80039a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f841 	bl	80039ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f001 fa49 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_TIM_PWM_Start+0x24>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e03c      	b.n	8003a5e <HAL_TIM_PWM_Start+0x9e>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d109      	bne.n	80039fe <HAL_TIM_PWM_Start+0x3e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e02f      	b.n	8003a5e <HAL_TIM_PWM_Start+0x9e>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d109      	bne.n	8003a18 <HAL_TIM_PWM_Start+0x58>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e022      	b.n	8003a5e <HAL_TIM_PWM_Start+0x9e>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d109      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x72>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e015      	b.n	8003a5e <HAL_TIM_PWM_Start+0x9e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d109      	bne.n	8003a4c <HAL_TIM_PWM_Start+0x8c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e008      	b.n	8003a5e <HAL_TIM_PWM_Start+0x9e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0a1      	b.n	8003baa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Start+0xb6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a74:	e023      	b.n	8003abe <HAL_TIM_PWM_Start+0xfe>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start+0xc6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a84:	e01b      	b.n	8003abe <HAL_TIM_PWM_Start+0xfe>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0xd6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	e013      	b.n	8003abe <HAL_TIM_PWM_Start+0xfe>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0xe6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa4:	e00b      	b.n	8003abe <HAL_TIM_PWM_Start+0xfe>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xf6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	e003      	b.n	8003abe <HAL_TIM_PWM_Start+0xfe>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 ff7a 	bl	80059c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d018      	beq.n	8003b08 <HAL_TIM_PWM_Start+0x148>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a37      	ldr	r2, [pc, #220]	; (8003bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d013      	beq.n	8003b08 <HAL_TIM_PWM_Start+0x148>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a35      	ldr	r2, [pc, #212]	; (8003bbc <HAL_TIM_PWM_Start+0x1fc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_TIM_PWM_Start+0x148>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a34      	ldr	r2, [pc, #208]	; (8003bc0 <HAL_TIM_PWM_Start+0x200>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_TIM_PWM_Start+0x148>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <HAL_TIM_PWM_Start+0x204>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Start+0x148>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_TIM_PWM_Start+0x208>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Start+0x14c>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_TIM_PWM_Start+0x14e>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01d      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d018      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_TIM_PWM_Start+0x20c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_TIM_PWM_Start+0x210>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00e      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d009      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_TIM_PWM_Start+0x1fc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x1a8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_TIM_PWM_Start+0x208>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d115      	bne.n	8003b94 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_TIM_PWM_Start+0x214>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d015      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0x1e6>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d011      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e008      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	40015000 	.word	0x40015000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	00010007 	.word	0x00010007

08003bd8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e03c      	b.n	8003c7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d109      	bne.n	8003c1e <HAL_TIM_PWM_Start_DMA+0x46>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e02f      	b.n	8003c7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e022      	b.n	8003c7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d109      	bne.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e015      	b.n	8003c7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start_DMA+0x94>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e008      	b.n	8003c7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e1b0      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e03c      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x142>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_PWM_Start_DMA+0xe2>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e02f      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x142>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e022      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x142>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d109      	bne.n	8003cee <HAL_TIM_PWM_Start_DMA+0x116>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e015      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x142>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start_DMA+0x130>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e008      	b.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x142>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d034      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_TIM_PWM_Start_DMA+0x152>
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e15c      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x166>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e026      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start_DMA+0x176>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e01e      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start_DMA+0x186>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e016      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start_DMA+0x196>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6c:	e00e      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	e006      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d86:	e001      	b.n	8003d8c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e12d      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	f200 80ae 	bhi.w	8003ef0 <HAL_TIM_PWM_Start_DMA+0x318>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003ef1 	.word	0x08003ef1
 8003da4:	08003ef1 	.word	0x08003ef1
 8003da8:	08003ef1 	.word	0x08003ef1
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003ef1 	.word	0x08003ef1
 8003db4:	08003ef1 	.word	0x08003ef1
 8003db8:	08003ef1 	.word	0x08003ef1
 8003dbc:	08003e61 	.word	0x08003e61
 8003dc0:	08003ef1 	.word	0x08003ef1
 8003dc4:	08003ef1 	.word	0x08003ef1
 8003dc8:	08003ef1 	.word	0x08003ef1
 8003dcc:	08003ea9 	.word	0x08003ea9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	4a86      	ldr	r2, [pc, #536]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	4a85      	ldr	r2, [pc, #532]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	4a84      	ldr	r2, [pc, #528]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3334      	adds	r3, #52	; 0x34
 8003df4:	461a      	mov	r2, r3
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	f7fd fcfc 	bl	80017f4 <HAL_DMA_Start_IT>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0f0      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	60da      	str	r2, [r3, #12]
      break;
 8003e16:	e06e      	b.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	4a72      	ldr	r2, [pc, #456]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3338      	adds	r3, #56	; 0x38
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	f7fd fcd8 	bl	80017f4 <HAL_DMA_Start_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0cc      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5c:	60da      	str	r2, [r3, #12]
      break;
 8003e5e:	e04a      	b.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4a62      	ldr	r2, [pc, #392]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	4a61      	ldr	r2, [pc, #388]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a60      	ldr	r2, [pc, #384]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	333c      	adds	r3, #60	; 0x3c
 8003e84:	461a      	mov	r2, r3
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	f7fd fcb4 	bl	80017f4 <HAL_DMA_Start_IT>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0a8      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea4:	60da      	str	r2, [r3, #12]
      break;
 8003ea6:	e026      	b.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4a4f      	ldr	r2, [pc, #316]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a4e      	ldr	r2, [pc, #312]	; (8003ff8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3340      	adds	r3, #64	; 0x40
 8003ecc:	461a      	mov	r2, r3
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	f7fd fc90 	bl	80017f4 <HAL_DMA_Start_IT>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e084      	b.n	8003fe8 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eec:	60da      	str	r2, [r3, #12]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d174      	bne.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2201      	movs	r2, #1
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fd5b 	bl	80059c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_TIM_PWM_Start_DMA+0x424>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a39      	ldr	r2, [pc, #228]	; (8004000 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	; (8004004 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a36      	ldr	r2, [pc, #216]	; (8004008 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <HAL_TIM_PWM_Start_DMA+0x434>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	; (8004010 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_PWM_Start_DMA+0x372>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x374>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <HAL_TIM_PWM_Start_DMA+0x424>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d018      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <HAL_TIM_PWM_Start_DMA+0x440>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	; (8004010 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d115      	bne.n	8003fd2 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_TIM_PWM_Start_DMA+0x444>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d015      	beq.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x40c>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d011      	beq.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	e008      	b.n	8003fe4 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	08004cc3 	.word	0x08004cc3
 8003ff4:	08004d6b 	.word	0x08004d6b
 8003ff8:	08004c31 	.word	0x08004c31
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40013400 	.word	0x40013400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40015000 	.word	0x40015000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	00010007 	.word	0x00010007

08004020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e049      	b.n	80040c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f841 	bl	80040ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 feb8 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0x1e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e023      	b.n	800414a <HAL_TIM_IC_Start_IT+0x66>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0x2e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e01b      	b.n	800414a <HAL_TIM_IC_Start_IT+0x66>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_IC_Start_IT+0x3e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e013      	b.n	800414a <HAL_TIM_IC_Start_IT+0x66>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d104      	bne.n	8004132 <HAL_TIM_IC_Start_IT+0x4e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	e00b      	b.n	800414a <HAL_TIM_IC_Start_IT+0x66>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d104      	bne.n	8004142 <HAL_TIM_IC_Start_IT+0x5e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e003      	b.n	800414a <HAL_TIM_IC_Start_IT+0x66>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_TIM_IC_Start_IT+0x78>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e013      	b.n	8004184 <HAL_TIM_IC_Start_IT+0xa0>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d104      	bne.n	800416c <HAL_TIM_IC_Start_IT+0x88>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e00b      	b.n	8004184 <HAL_TIM_IC_Start_IT+0xa0>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d104      	bne.n	800417c <HAL_TIM_IC_Start_IT+0x98>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e003      	b.n	8004184 <HAL_TIM_IC_Start_IT+0xa0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004182:	b2db      	uxtb	r3, r3
 8004184:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	7bbb      	ldrb	r3, [r7, #14]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800418c:	7b7b      	ldrb	r3, [r7, #13]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0dd      	b.n	8004352 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0xc2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a4:	e023      	b.n	80041ee <HAL_TIM_IC_Start_IT+0x10a>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0xd2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	e01b      	b.n	80041ee <HAL_TIM_IC_Start_IT+0x10a>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0xe2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	e013      	b.n	80041ee <HAL_TIM_IC_Start_IT+0x10a>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0xf2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d4:	e00b      	b.n	80041ee <HAL_TIM_IC_Start_IT+0x10a>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x102>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	e003      	b.n	80041ee <HAL_TIM_IC_Start_IT+0x10a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_IC_Start_IT+0x11a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	e013      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x142>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_IC_Start_IT+0x12a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420c:	e00b      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x142>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_IC_Start_IT+0x13a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800421c:	e003      	b.n	8004226 <HAL_TIM_IC_Start_IT+0x142>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d841      	bhi.n	80042b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_TIM_IC_Start_IT+0x150>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004269 	.word	0x08004269
 8004238:	080042b1 	.word	0x080042b1
 800423c:	080042b1 	.word	0x080042b1
 8004240:	080042b1 	.word	0x080042b1
 8004244:	0800427b 	.word	0x0800427b
 8004248:	080042b1 	.word	0x080042b1
 800424c:	080042b1 	.word	0x080042b1
 8004250:	080042b1 	.word	0x080042b1
 8004254:	0800428d 	.word	0x0800428d
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042b1 	.word	0x080042b1
 8004260:	080042b1 	.word	0x080042b1
 8004264:	0800429f 	.word	0x0800429f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0202 	orr.w	r2, r2, #2
 8004276:	60da      	str	r2, [r3, #12]
      break;
 8004278:	e01d      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0204 	orr.w	r2, r2, #4
 8004288:	60da      	str	r2, [r3, #12]
      break;
 800428a:	e014      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	60da      	str	r2, [r3, #12]
      break;
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0210 	orr.w	r2, r2, #16
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d149      	bne.n	8004350 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fb7b 	bl	80059c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <HAL_TIM_IC_Start_IT+0x278>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_TIM_IC_Start_IT+0x27c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_TIM_IC_Start_IT+0x280>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_TIM_IC_Start_IT+0x284>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_TIM_IC_Start_IT+0x288>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_IC_Start_IT+0x22c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a19      	ldr	r2, [pc, #100]	; (8004370 <HAL_TIM_IC_Start_IT+0x28c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d115      	bne.n	800433c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <HAL_TIM_IC_Start_IT+0x290>)
 8004318:	4013      	ands	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d015      	beq.n	800434e <HAL_TIM_IC_Start_IT+0x26a>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d011      	beq.n	800434e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e008      	b.n	800434e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e000      	b.n	8004350 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40013400 	.word	0x40013400
 800436c:	40014000 	.word	0x40014000
 8004370:	40015000 	.word	0x40015000
 8004374:	00010007 	.word	0x00010007

08004378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0202 	mvn.w	r2, #2
 80043a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fb ff9c 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fc02 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fc09 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0204 	mvn.w	r2, #4
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fb ff72 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fbd8 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fbdf 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b08      	cmp	r3, #8
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0208 	mvn.w	r2, #8
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2204      	movs	r2, #4
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fb ff48 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fbae 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fbb5 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b10      	cmp	r3, #16
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b10      	cmp	r3, #16
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0210 	mvn.w	r2, #16
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2208      	movs	r2, #8
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fb ff1e 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fb84 	bl	8004bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb8b 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0201 	mvn.w	r2, #1
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb5e 	bl	8004bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b80      	cmp	r3, #128	; 0x80
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 fb08 	bl	8005b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d10e      	bne.n	8004556 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b80      	cmp	r3, #128	; 0x80
 8004544:	d107      	bne.n	8004556 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 fafb 	bl	8005b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d10e      	bne.n	8004582 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d107      	bne.n	8004582 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800457a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb43 	bl	8004c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0220 	mvn.w	r2, #32
 80045a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 fabb 	bl	8005b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e088      	b.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d11b      	bne.n	800461a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045f2:	f001 f827 	bl	8005644 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 020c 	bic.w	r2, r2, #12
 8004604:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6999      	ldr	r1, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
 8004618:	e060      	b.n	80046dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11c      	bne.n	800465a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004630:	f001 f8a5 	bl	800577e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004642:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	619a      	str	r2, [r3, #24]
 8004658:	e040      	b.n	80046dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d11b      	bne.n	8004698 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004670:	f001 f8f2 	bl	8005858 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 020c 	bic.w	r2, r2, #12
 8004682:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69d9      	ldr	r1, [r3, #28]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	61da      	str	r2, [r3, #28]
 8004696:	e021      	b.n	80046dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d11c      	bne.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80046ae:	f001 f90f 	bl	80058d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	021a      	lsls	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	61da      	str	r2, [r3, #28]
 80046d6:	e001      	b.n	80046dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800470a:	2302      	movs	r3, #2
 800470c:	e0ff      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b14      	cmp	r3, #20
 800471a:	f200 80f0 	bhi.w	80048fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004779 	.word	0x08004779
 8004728:	080048ff 	.word	0x080048ff
 800472c:	080048ff 	.word	0x080048ff
 8004730:	080048ff 	.word	0x080048ff
 8004734:	080047b9 	.word	0x080047b9
 8004738:	080048ff 	.word	0x080048ff
 800473c:	080048ff 	.word	0x080048ff
 8004740:	080048ff 	.word	0x080048ff
 8004744:	080047fb 	.word	0x080047fb
 8004748:	080048ff 	.word	0x080048ff
 800474c:	080048ff 	.word	0x080048ff
 8004750:	080048ff 	.word	0x080048ff
 8004754:	0800483b 	.word	0x0800483b
 8004758:	080048ff 	.word	0x080048ff
 800475c:	080048ff 	.word	0x080048ff
 8004760:	080048ff 	.word	0x080048ff
 8004764:	0800487d 	.word	0x0800487d
 8004768:	080048ff 	.word	0x080048ff
 800476c:	080048ff 	.word	0x080048ff
 8004770:	080048ff 	.word	0x080048ff
 8004774:	080048bd 	.word	0x080048bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fbc6 	bl	8004f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0208 	orr.w	r2, r2, #8
 8004792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0204 	bic.w	r2, r2, #4
 80047a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6999      	ldr	r1, [r3, #24]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	619a      	str	r2, [r3, #24]
      break;
 80047b6:	e0a5      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fc40 	bl	8005044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6999      	ldr	r1, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	619a      	str	r2, [r3, #24]
      break;
 80047f8:	e084      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fcb3 	bl	800516c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0208 	orr.w	r2, r2, #8
 8004814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0204 	bic.w	r2, r2, #4
 8004824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69d9      	ldr	r1, [r3, #28]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	61da      	str	r2, [r3, #28]
      break;
 8004838:	e064      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fd25 	bl	8005290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69d9      	ldr	r1, [r3, #28]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	021a      	lsls	r2, r3, #8
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	61da      	str	r2, [r3, #28]
      break;
 800487a:	e043      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fd74 	bl	8005370 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0208 	orr.w	r2, r2, #8
 8004896:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ba:	e023      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fdbe 	bl	8005444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048fc:	e002      	b.n	8004904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
      break;
 8004902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop

08004918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_TIM_ConfigClockSource+0x1c>
 8004930:	2302      	movs	r3, #2
 8004932:	e0b6      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x18a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d03e      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0xd8>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	f200 8087 	bhi.w	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	f000 8086 	beq.w	8004a8e <HAL_TIM_ConfigClockSource+0x176>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d87f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 8004988:	2b70      	cmp	r3, #112	; 0x70
 800498a:	d01a      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xaa>
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d87b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 8004990:	2b60      	cmp	r3, #96	; 0x60
 8004992:	d050      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x11e>
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d877      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 8004998:	2b50      	cmp	r3, #80	; 0x50
 800499a:	d03c      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xfe>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d873      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d058      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x13e>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d86f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 80049a8:	2b30      	cmp	r3, #48	; 0x30
 80049aa:	d064      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15e>
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	d86b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d060      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15e>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d867      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05c      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15e>
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d05a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15e>
 80049c0:	e062      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d2:	f000 ffd5 	bl	8005980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	609a      	str	r2, [r3, #8]
      break;
 80049ee:	e04f      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a00:	f000 ffbe 	bl	8005980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e03c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fe7c 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2150      	movs	r1, #80	; 0x50
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ff8b 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8004a34:	e02c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fed8 	bl	80057f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2160      	movs	r1, #96	; 0x60
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ff7b 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8004a54:	e01c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fe5c 	bl	8005720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 ff6b 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8004a74:	e00c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f000 ff62 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8004a86:	e003      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e031      	b.n	8004b26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fd21 	bl	800551c <TIM_SlaveTimer_SetConfig>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e018      	b.n	8004b26 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d831      	bhi.n	8004ba8 <HAL_TIM_ReadCapturedValue+0x78>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004ba9 	.word	0x08004ba9
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004ba9 	.word	0x08004ba9
 8004b64:	08004ba9 	.word	0x08004ba9
 8004b68:	08004ba9 	.word	0x08004ba9
 8004b6c:	08004b95 	.word	0x08004b95
 8004b70:	08004ba9 	.word	0x08004ba9
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004ba9 	.word	0x08004ba9
 8004b7c:	08004b9f 	.word	0x08004b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	60fb      	str	r3, [r7, #12]

      break;
 8004b88:	e00f      	b.n	8004baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	60fb      	str	r3, [r7, #12]

      break;
 8004b92:	e00a      	b.n	8004baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	60fb      	str	r3, [r7, #12]

      break;
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	60fb      	str	r3, [r7, #12]

      break;
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004ba8:	bf00      	nop
  }

  return tmpreg;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c56:	e02a      	b.n	8004cae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d107      	bne.n	8004c72 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2202      	movs	r2, #2
 8004c66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c70:	e01d      	b.n	8004cae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d107      	bne.n	8004c8c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8a:	e010      	b.n	8004cae <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d107      	bne.n	8004ca6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca4:	e003      	b.n	8004cae <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ffb4 	bl	8004c1c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	771a      	strb	r2, [r3, #28]
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10b      	bne.n	8004cf2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d136      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf0:	e031      	b.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d10b      	bne.n	8004d14 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d125      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d12:	e020      	b.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10b      	bne.n	8004d36 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2204      	movs	r2, #4
 8004d22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d114      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d34:	e00f      	b.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d10a      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2208      	movs	r2, #8
 8004d44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ff42 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d103      	bne.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	771a      	strb	r2, [r3, #28]
 8004d88:	e019      	b.n	8004dbe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d103      	bne.n	8004d9c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2202      	movs	r2, #2
 8004d98:	771a      	strb	r2, [r3, #28]
 8004d9a:	e010      	b.n	8004dbe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d103      	bne.n	8004dae <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2204      	movs	r2, #4
 8004daa:	771a      	strb	r2, [r3, #28]
 8004dac:	e007      	b.n	8004dbe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d102      	bne.n	8004dbe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff ff18 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	771a      	strb	r2, [r3, #28]
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a42      	ldr	r2, [pc, #264]	; (8004ef0 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d00f      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3f      	ldr	r2, [pc, #252]	; (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3e      	ldr	r2, [pc, #248]	; (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3d      	ldr	r2, [pc, #244]	; (8004efc <TIM_Base_SetConfig+0x128>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3c      	ldr	r2, [pc, #240]	; (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a31      	ldr	r2, [pc, #196]	; (8004ef0 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2e      	ldr	r2, [pc, #184]	; (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <TIM_Base_SetConfig+0x128>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a12      	ldr	r2, [pc, #72]	; (8004ef0 <TIM_Base_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_Base_SetConfig+0x100>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <TIM_Base_SetConfig+0x128>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x100>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <TIM_Base_SetConfig+0x130>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x100>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <TIM_Base_SetConfig+0x134>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x100>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <TIM_Base_SetConfig+0x138>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x100>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a0c      	ldr	r2, [pc, #48]	; (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d103      	bne.n	8004edc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40013400 	.word	0x40013400
 8004f00:	40015000 	.word	0x40015000
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a30      	ldr	r2, [pc, #192]	; (800502c <TIM_OC1_SetConfig+0x11c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <TIM_OC1_SetConfig+0x88>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <TIM_OC1_SetConfig+0x120>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00f      	beq.n	8004f98 <TIM_OC1_SetConfig+0x88>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2e      	ldr	r2, [pc, #184]	; (8005034 <TIM_OC1_SetConfig+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_OC1_SetConfig+0x88>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2d      	ldr	r2, [pc, #180]	; (8005038 <TIM_OC1_SetConfig+0x128>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_OC1_SetConfig+0x88>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_OC1_SetConfig+0x12c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC1_SetConfig+0x88>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_OC1_SetConfig+0x130>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0308 	bic.w	r3, r3, #8
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <TIM_OC1_SetConfig+0x11c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <TIM_OC1_SetConfig+0xd2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <TIM_OC1_SetConfig+0x120>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00f      	beq.n	8004fe2 <TIM_OC1_SetConfig+0xd2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <TIM_OC1_SetConfig+0x124>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00b      	beq.n	8004fe2 <TIM_OC1_SetConfig+0xd2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <TIM_OC1_SetConfig+0x128>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <TIM_OC1_SetConfig+0xd2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <TIM_OC1_SetConfig+0x12c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <TIM_OC1_SetConfig+0xd2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <TIM_OC1_SetConfig+0x130>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d111      	bne.n	8005006 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	40015000 	.word	0x40015000

08005044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0210 	bic.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0320 	bic.w	r3, r3, #32
 8005092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a2c      	ldr	r2, [pc, #176]	; (8005154 <TIM_OC2_SetConfig+0x110>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC2_SetConfig+0x74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <TIM_OC2_SetConfig+0x114>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC2_SetConfig+0x74>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <TIM_OC2_SetConfig+0x118>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10d      	bne.n	80050d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <TIM_OC2_SetConfig+0x110>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_OC2_SetConfig+0xc0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <TIM_OC2_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_OC2_SetConfig+0xc0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <TIM_OC2_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_OC2_SetConfig+0xc0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <TIM_OC2_SetConfig+0x120>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_OC2_SetConfig+0xc0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <TIM_OC2_SetConfig+0x124>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC2_SetConfig+0xc0>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a17      	ldr	r2, [pc, #92]	; (800515c <TIM_OC2_SetConfig+0x118>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005112:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40015000 	.word	0x40015000
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2b      	ldr	r2, [pc, #172]	; (8005278 <TIM_OC3_SetConfig+0x10c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_OC3_SetConfig+0x72>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <TIM_OC3_SetConfig+0x110>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC3_SetConfig+0x72>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <TIM_OC3_SetConfig+0x114>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10d      	bne.n	80051fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <TIM_OC3_SetConfig+0x10c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <TIM_OC3_SetConfig+0xbe>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1d      	ldr	r2, [pc, #116]	; (800527c <TIM_OC3_SetConfig+0x110>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00f      	beq.n	800522a <TIM_OC3_SetConfig+0xbe>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <TIM_OC3_SetConfig+0x118>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <TIM_OC3_SetConfig+0xbe>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <TIM_OC3_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_OC3_SetConfig+0xbe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <TIM_OC3_SetConfig+0x120>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC3_SetConfig+0xbe>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a16      	ldr	r2, [pc, #88]	; (8005280 <TIM_OC3_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d113      	bne.n	8005252 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	621a      	str	r2, [r3, #32]
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40015000 	.word	0x40015000
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	031b      	lsls	r3, r3, #12
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1a      	ldr	r2, [pc, #104]	; (8005358 <TIM_OC4_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <TIM_OC4_SetConfig+0x8c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a19      	ldr	r2, [pc, #100]	; (800535c <TIM_OC4_SetConfig+0xcc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_OC4_SetConfig+0x8c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <TIM_OC4_SetConfig+0xd0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_OC4_SetConfig+0x8c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <TIM_OC4_SetConfig+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC4_SetConfig+0x8c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a16      	ldr	r2, [pc, #88]	; (8005368 <TIM_OC4_SetConfig+0xd8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC4_SetConfig+0x8c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <TIM_OC4_SetConfig+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d109      	bne.n	8005330 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	019b      	lsls	r3, r3, #6
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40013400 	.word	0x40013400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	40015000 	.word	0x40015000

08005370 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <TIM_OC5_SetConfig+0xbc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <TIM_OC5_SetConfig+0x82>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <TIM_OC5_SetConfig+0xc0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_OC5_SetConfig+0x82>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <TIM_OC5_SetConfig+0xc4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_OC5_SetConfig+0x82>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <TIM_OC5_SetConfig+0xc8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_OC5_SetConfig+0x82>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <TIM_OC5_SetConfig+0xcc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_OC5_SetConfig+0x82>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <TIM_OC5_SetConfig+0xd0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d109      	bne.n	8005406 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40013400 	.word	0x40013400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800
 8005440:	40015000 	.word	0x40015000

08005444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800548a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	051b      	lsls	r3, r3, #20
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <TIM_OC6_SetConfig+0xc0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <TIM_OC6_SetConfig+0x84>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC6_SetConfig+0xc4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_OC6_SetConfig+0x84>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC6_SetConfig+0xc8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <TIM_OC6_SetConfig+0x84>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC6_SetConfig+0xcc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_OC6_SetConfig+0x84>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC6_SetConfig+0xd0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC6_SetConfig+0x84>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <TIM_OC6_SetConfig+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d109      	bne.n	80054dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40013400 	.word	0x40013400
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800
 8005518:	40015000 	.word	0x40015000

0800551c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b70      	cmp	r3, #112	; 0x70
 8005568:	d01a      	beq.n	80055a0 <TIM_SlaveTimer_SetConfig+0x84>
 800556a:	2b70      	cmp	r3, #112	; 0x70
 800556c:	d860      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 800556e:	2b60      	cmp	r3, #96	; 0x60
 8005570:	d054      	beq.n	800561c <TIM_SlaveTimer_SetConfig+0x100>
 8005572:	2b60      	cmp	r3, #96	; 0x60
 8005574:	d85c      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 8005576:	2b50      	cmp	r3, #80	; 0x50
 8005578:	d046      	beq.n	8005608 <TIM_SlaveTimer_SetConfig+0xec>
 800557a:	2b50      	cmp	r3, #80	; 0x50
 800557c:	d858      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d019      	beq.n	80055b6 <TIM_SlaveTimer_SetConfig+0x9a>
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d854      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	d055      	beq.n	8005636 <TIM_SlaveTimer_SetConfig+0x11a>
 800558a:	2b30      	cmp	r3, #48	; 0x30
 800558c:	d850      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 800558e:	2b20      	cmp	r3, #32
 8005590:	d051      	beq.n	8005636 <TIM_SlaveTimer_SetConfig+0x11a>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d84c      	bhi.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04d      	beq.n	8005636 <TIM_SlaveTimer_SetConfig+0x11a>
 800559a:	2b10      	cmp	r3, #16
 800559c:	d04b      	beq.n	8005636 <TIM_SlaveTimer_SetConfig+0x11a>
 800559e:	e047      	b.n	8005630 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80055b0:	f000 f9e6 	bl	8005980 <TIM_ETR_SetConfig>
      break;
 80055b4:	e040      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d101      	bne.n	80055c2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e03b      	b.n	800563a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
      break;
 8005606:	e017      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005614:	461a      	mov	r2, r3
 8005616:	f000 f883 	bl	8005720 <TIM_TI1_ConfigInputStage>
      break;
 800561a:	e00d      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005628:	461a      	mov	r2, r3
 800562a:	f000 f8e5 	bl	80057f8 <TIM_TI2_ConfigInputStage>
      break;
 800562e:	e003      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
      break;
 8005634:	e000      	b.n	8005638 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005636:	bf00      	nop
  }

  return status;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <TIM_TI1_SetConfig+0xc4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d017      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d013      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a23      	ldr	r2, [pc, #140]	; (800570c <TIM_TI1_SetConfig+0xc8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00f      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <TIM_TI1_SetConfig+0xcc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00b      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a21      	ldr	r2, [pc, #132]	; (8005714 <TIM_TI1_SetConfig+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d007      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a20      	ldr	r2, [pc, #128]	; (8005718 <TIM_TI1_SetConfig+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d003      	beq.n	80056a2 <TIM_TI1_SetConfig+0x5e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <TIM_TI1_SetConfig+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <TIM_TI1_SetConfig+0x62>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <TIM_TI1_SetConfig+0x64>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e003      	b.n	80056c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f023 030a 	bic.w	r3, r3, #10
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f003 030a 	and.w	r3, r3, #10
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40013400 	.word	0x40013400
 8005718:	40014000 	.word	0x40014000
 800571c:	40015000 	.word	0x40015000

08005720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 030a 	bic.w	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0210 	bic.w	r2, r3, #16
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f023 0210 	bic.w	r2, r3, #16
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	031b      	lsls	r3, r3, #12
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	b2db      	uxtb	r3, r3
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	621a      	str	r2, [r3, #32]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800590e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	031b      	lsls	r3, r3, #12
 8005914:	b29b      	uxth	r3, r3
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005922:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	031b      	lsls	r3, r3, #12
 8005928:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	f043 0307 	orr.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2201      	movs	r2, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	401a      	ands	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a1a      	ldr	r2, [r3, #32]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	fa01 f303 	lsl.w	r3, r1, r3
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e06d      	b.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a30      	ldr	r2, [pc, #192]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40015000 	.word	0x40015000
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40014000 	.word	0x40014000

08005b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e040      	b.n	8005bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fb6a 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fbca 	bl	8006338 <UART_SetConfig>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e022      	b.n	8005bf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fd92 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fe19 	bl	8006824 <UART_CheckIdleState>
 8005bf2:	4603      	mov	r3, r0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b08b      	sub	sp, #44	; 0x2c
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d147      	bne.n	8005ca2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_UART_Transmit_IT+0x22>
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e040      	b.n	8005ca4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2221      	movs	r2, #33	; 0x21
 8005c4a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d107      	bne.n	8005c66 <HAL_UART_Transmit_IT+0x6a>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <HAL_UART_Transmit_IT+0xb4>)
 8005c62:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c64:	e002      	b.n	8005c6c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a12      	ldr	r2, [pc, #72]	; (8005cb4 <HAL_UART_Transmit_IT+0xb8>)
 8005c6a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	69f9      	ldr	r1, [r7, #28]
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e000      	b.n	8005ca4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
  }
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	372c      	adds	r7, #44	; 0x2c
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	08006d7d 	.word	0x08006d7d
 8005cb4:	08006cc5 	.word	0x08006cc5

08005cb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d132      	bne.n	8005d36 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_UART_Receive_IT+0x24>
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e02b      	b.n	8005d38 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d018      	beq.n	8005d26 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	613b      	str	r3, [r7, #16]
   return(result);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	69f9      	ldr	r1, [r7, #28]
 8005d18:	6a3a      	ldr	r2, [r7, #32]
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e6      	bne.n	8005cf4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fe89 	bl	8006a44 <UART_Start_Receive_IT>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e000      	b.n	8005d38 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b0ba      	sub	sp, #232	; 0xe8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d6e:	4013      	ands	r3, r2
 8005d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d115      	bne.n	8005da8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 82ab 	beq.w	80062f4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
      }
      return;
 8005da6:	e2a5      	b.n	80062f4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8117 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_UART_IRQHandler+0x298>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 810a 	beq.w	8005fe0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d011      	beq.n	8005dfc <HAL_UART_IRQHandler+0xbc>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d011      	beq.n	8005e2c <HAL_UART_IRQHandler+0xec>
 8005e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	f043 0204 	orr.w	r2, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d011      	beq.n	8005e5c <HAL_UART_IRQHandler+0x11c>
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e52:	f043 0202 	orr.w	r2, r3, #2
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d017      	beq.n	8005e98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8e:	f043 0208 	orr.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <HAL_UART_IRQHandler+0x18a>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8211 	beq.w	80062f8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04f      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fe54 	bl	8006bd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d141      	bne.n	8005fba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1d9      	bne.n	8005f36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d013      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <HAL_UART_IRQHandler+0x29c>)
 8005f90:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb fcc4 	bl	8001924 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d017      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e00f      	b.n	8005fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9aa 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00b      	b.n	8005fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9a6 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e007      	b.n	8005fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9a2 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005fd0:	e192      	b.n	80062f8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd2:	bf00      	nop
    return;
 8005fd4:	e190      	b.n	80062f8 <HAL_UART_IRQHandler+0x5b8>
 8005fd6:	bf00      	nop
 8005fd8:	04000120 	.word	0x04000120
 8005fdc:	08006c99 	.word	0x08006c99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 814b 	bne.w	8006280 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 8144 	beq.w	8006280 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 813d 	beq.w	8006280 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2210      	movs	r2, #16
 800600c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	f040 80b5 	bne.w	8006188 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800602a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8164 	beq.w	80062fc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800603a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800603e:	429a      	cmp	r2, r3
 8006040:	f080 815c 	bcs.w	80062fc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800604a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b20      	cmp	r3, #32
 8006056:	f000 8086 	beq.w	8006166 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800606e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006088:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006090:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1da      	bne.n	800605a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e1      	bne.n	80060a4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006104:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800610a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e3      	bne.n	80060e0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006148:	65bb      	str	r3, [r7, #88]	; 0x58
 800614a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800614e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e4      	bne.n	8006126 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006160:	4618      	mov	r0, r3
 8006162:	f7fb fba6 	bl	80018b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006178:	b29b      	uxth	r3, r3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8cd 	bl	8006320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006186:	e0b9      	b.n	80062fc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80ab 	beq.w	8006300 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80061aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80a6 	beq.w	8006300 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d6:	647b      	str	r3, [r7, #68]	; 0x44
 80061d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e4      	bne.n	80061b4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800620e:	633a      	str	r2, [r7, #48]	; 0x30
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	60fb      	str	r3, [r7, #12]
   return(result);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0310 	bic.w	r3, r3, #16
 800624a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	617b      	str	r3, [r7, #20]
   return(result);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e4      	bne.n	8006236 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f851 	bl	8006320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800627e:	e03f      	b.n	8006300 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <HAL_UART_IRQHandler+0x56a>
 800628c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 ff9c 	bl	80071e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062a8:	e02d      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01c      	beq.n	8006304 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
    }
    return;
 80062d2:	e017      	b.n	8006304 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d012      	beq.n	8006306 <HAL_UART_IRQHandler+0x5c6>
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fda5 	bl	8006e3c <UART_EndTransmit_IT>
    return;
 80062f2:	e008      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
      return;
 80062f4:	bf00      	nop
 80062f6:	e006      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
    return;
 80062f8:	bf00      	nop
 80062fa:	e004      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
      return;
 80062fc:	bf00      	nop
 80062fe:	e002      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006304:	bf00      	nop
  }

}
 8006306:	37e8      	adds	r7, #232	; 0xe8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b92      	ldr	r3, [pc, #584]	; (80065ac <UART_SetConfig+0x274>)
 8006364:	4013      	ands	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	430b      	orrs	r3, r1
 800636e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a80      	ldr	r2, [pc, #512]	; (80065b0 <UART_SetConfig+0x278>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d120      	bne.n	80063f6 <UART_SetConfig+0xbe>
 80063b4:	4b7f      	ldr	r3, [pc, #508]	; (80065b4 <UART_SetConfig+0x27c>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d817      	bhi.n	80063f0 <UART_SetConfig+0xb8>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x90>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063e5 	.word	0x080063e5
 80063d0:	080063eb 	.word	0x080063eb
 80063d4:	080063df 	.word	0x080063df
 80063d8:	2301      	movs	r3, #1
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e0b5      	b.n	800654a <UART_SetConfig+0x212>
 80063de:	2302      	movs	r3, #2
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e0b2      	b.n	800654a <UART_SetConfig+0x212>
 80063e4:	2304      	movs	r3, #4
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e0af      	b.n	800654a <UART_SetConfig+0x212>
 80063ea:	2308      	movs	r3, #8
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e0ac      	b.n	800654a <UART_SetConfig+0x212>
 80063f0:	2310      	movs	r3, #16
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e0a9      	b.n	800654a <UART_SetConfig+0x212>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6f      	ldr	r2, [pc, #444]	; (80065b8 <UART_SetConfig+0x280>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d124      	bne.n	800644a <UART_SetConfig+0x112>
 8006400:	4b6c      	ldr	r3, [pc, #432]	; (80065b4 <UART_SetConfig+0x27c>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006408:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800640c:	d011      	beq.n	8006432 <UART_SetConfig+0xfa>
 800640e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006412:	d817      	bhi.n	8006444 <UART_SetConfig+0x10c>
 8006414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006418:	d011      	beq.n	800643e <UART_SetConfig+0x106>
 800641a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641e:	d811      	bhi.n	8006444 <UART_SetConfig+0x10c>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <UART_SetConfig+0xf4>
 8006424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006428:	d006      	beq.n	8006438 <UART_SetConfig+0x100>
 800642a:	e00b      	b.n	8006444 <UART_SetConfig+0x10c>
 800642c:	2300      	movs	r3, #0
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e08b      	b.n	800654a <UART_SetConfig+0x212>
 8006432:	2302      	movs	r3, #2
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e088      	b.n	800654a <UART_SetConfig+0x212>
 8006438:	2304      	movs	r3, #4
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e085      	b.n	800654a <UART_SetConfig+0x212>
 800643e:	2308      	movs	r3, #8
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e082      	b.n	800654a <UART_SetConfig+0x212>
 8006444:	2310      	movs	r3, #16
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e07f      	b.n	800654a <UART_SetConfig+0x212>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a5b      	ldr	r2, [pc, #364]	; (80065bc <UART_SetConfig+0x284>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d124      	bne.n	800649e <UART_SetConfig+0x166>
 8006454:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <UART_SetConfig+0x27c>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800645c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006460:	d011      	beq.n	8006486 <UART_SetConfig+0x14e>
 8006462:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006466:	d817      	bhi.n	8006498 <UART_SetConfig+0x160>
 8006468:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800646c:	d011      	beq.n	8006492 <UART_SetConfig+0x15a>
 800646e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006472:	d811      	bhi.n	8006498 <UART_SetConfig+0x160>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <UART_SetConfig+0x148>
 8006478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800647c:	d006      	beq.n	800648c <UART_SetConfig+0x154>
 800647e:	e00b      	b.n	8006498 <UART_SetConfig+0x160>
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e061      	b.n	800654a <UART_SetConfig+0x212>
 8006486:	2302      	movs	r3, #2
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e05e      	b.n	800654a <UART_SetConfig+0x212>
 800648c:	2304      	movs	r3, #4
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e05b      	b.n	800654a <UART_SetConfig+0x212>
 8006492:	2308      	movs	r3, #8
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e058      	b.n	800654a <UART_SetConfig+0x212>
 8006498:	2310      	movs	r3, #16
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e055      	b.n	800654a <UART_SetConfig+0x212>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a47      	ldr	r2, [pc, #284]	; (80065c0 <UART_SetConfig+0x288>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d124      	bne.n	80064f2 <UART_SetConfig+0x1ba>
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <UART_SetConfig+0x27c>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80064b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064b4:	d011      	beq.n	80064da <UART_SetConfig+0x1a2>
 80064b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ba:	d817      	bhi.n	80064ec <UART_SetConfig+0x1b4>
 80064bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c0:	d011      	beq.n	80064e6 <UART_SetConfig+0x1ae>
 80064c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c6:	d811      	bhi.n	80064ec <UART_SetConfig+0x1b4>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <UART_SetConfig+0x19c>
 80064cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d0:	d006      	beq.n	80064e0 <UART_SetConfig+0x1a8>
 80064d2:	e00b      	b.n	80064ec <UART_SetConfig+0x1b4>
 80064d4:	2300      	movs	r3, #0
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e037      	b.n	800654a <UART_SetConfig+0x212>
 80064da:	2302      	movs	r3, #2
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e034      	b.n	800654a <UART_SetConfig+0x212>
 80064e0:	2304      	movs	r3, #4
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e031      	b.n	800654a <UART_SetConfig+0x212>
 80064e6:	2308      	movs	r3, #8
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e02e      	b.n	800654a <UART_SetConfig+0x212>
 80064ec:	2310      	movs	r3, #16
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e02b      	b.n	800654a <UART_SetConfig+0x212>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <UART_SetConfig+0x28c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d124      	bne.n	8006546 <UART_SetConfig+0x20e>
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <UART_SetConfig+0x27c>)
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006508:	d011      	beq.n	800652e <UART_SetConfig+0x1f6>
 800650a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800650e:	d817      	bhi.n	8006540 <UART_SetConfig+0x208>
 8006510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006514:	d011      	beq.n	800653a <UART_SetConfig+0x202>
 8006516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800651a:	d811      	bhi.n	8006540 <UART_SetConfig+0x208>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <UART_SetConfig+0x1f0>
 8006520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006524:	d006      	beq.n	8006534 <UART_SetConfig+0x1fc>
 8006526:	e00b      	b.n	8006540 <UART_SetConfig+0x208>
 8006528:	2300      	movs	r3, #0
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e00d      	b.n	800654a <UART_SetConfig+0x212>
 800652e:	2302      	movs	r3, #2
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e00a      	b.n	800654a <UART_SetConfig+0x212>
 8006534:	2304      	movs	r3, #4
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e007      	b.n	800654a <UART_SetConfig+0x212>
 800653a:	2308      	movs	r3, #8
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e004      	b.n	800654a <UART_SetConfig+0x212>
 8006540:	2310      	movs	r3, #16
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e001      	b.n	800654a <UART_SetConfig+0x212>
 8006546:	2310      	movs	r3, #16
 8006548:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d16b      	bne.n	800662c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006554:	7ffb      	ldrb	r3, [r7, #31]
 8006556:	2b08      	cmp	r3, #8
 8006558:	d838      	bhi.n	80065cc <UART_SetConfig+0x294>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x228>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006585 	.word	0x08006585
 8006564:	0800658d 	.word	0x0800658d
 8006568:	08006595 	.word	0x08006595
 800656c:	080065cd 	.word	0x080065cd
 8006570:	0800659b 	.word	0x0800659b
 8006574:	080065cd 	.word	0x080065cd
 8006578:	080065cd 	.word	0x080065cd
 800657c:	080065cd 	.word	0x080065cd
 8006580:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fc ff02 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8006588:	61b8      	str	r0, [r7, #24]
        break;
 800658a:	e024      	b.n	80065d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fc ff20 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8006590:	61b8      	str	r0, [r7, #24]
        break;
 8006592:	e020      	b.n	80065d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <UART_SetConfig+0x290>)
 8006596:	61bb      	str	r3, [r7, #24]
        break;
 8006598:	e01d      	b.n	80065d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fc fe81 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800659e:	61b8      	str	r0, [r7, #24]
        break;
 80065a0:	e019      	b.n	80065d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	61bb      	str	r3, [r7, #24]
        break;
 80065a8:	e015      	b.n	80065d6 <UART_SetConfig+0x29e>
 80065aa:	bf00      	nop
 80065ac:	efff69f3 	.word	0xefff69f3
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	40004800 	.word	0x40004800
 80065c0:	40004c00 	.word	0x40004c00
 80065c4:	40005000 	.word	0x40005000
 80065c8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77bb      	strb	r3, [r7, #30]
        break;
 80065d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d073      	beq.n	80066c4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	005a      	lsls	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b0f      	cmp	r3, #15
 80065f6:	d916      	bls.n	8006626 <UART_SetConfig+0x2ee>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d212      	bcs.n	8006626 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f023 030f 	bic.w	r3, r3, #15
 8006608:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	b29b      	uxth	r3, r3
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	b29a      	uxth	r2, r3
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	4313      	orrs	r3, r2
 800661a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	89fa      	ldrh	r2, [r7, #14]
 8006622:	60da      	str	r2, [r3, #12]
 8006624:	e04e      	b.n	80066c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	77bb      	strb	r3, [r7, #30]
 800662a:	e04b      	b.n	80066c4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	2b08      	cmp	r3, #8
 8006630:	d827      	bhi.n	8006682 <UART_SetConfig+0x34a>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x300>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800665d 	.word	0x0800665d
 800663c:	08006665 	.word	0x08006665
 8006640:	0800666d 	.word	0x0800666d
 8006644:	08006683 	.word	0x08006683
 8006648:	08006673 	.word	0x08006673
 800664c:	08006683 	.word	0x08006683
 8006650:	08006683 	.word	0x08006683
 8006654:	08006683 	.word	0x08006683
 8006658:	0800667b 	.word	0x0800667b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665c:	f7fc fe96 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8006660:	61b8      	str	r0, [r7, #24]
        break;
 8006662:	e013      	b.n	800668c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006664:	f7fc feb4 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8006668:	61b8      	str	r0, [r7, #24]
        break;
 800666a:	e00f      	b.n	800668c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <UART_SetConfig+0x3a4>)
 800666e:	61bb      	str	r3, [r7, #24]
        break;
 8006670:	e00c      	b.n	800668c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006672:	f7fc fe15 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8006676:	61b8      	str	r0, [r7, #24]
        break;
 8006678:	e008      	b.n	800668c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	61bb      	str	r3, [r7, #24]
        break;
 8006680:	e004      	b.n	800668c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	77bb      	strb	r3, [r7, #30]
        break;
 800668a:	bf00      	nop
    }

    if (pclk != 0U)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085a      	lsrs	r2, r3, #1
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	441a      	add	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d909      	bls.n	80066c0 <UART_SetConfig+0x388>
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b2:	d205      	bcs.n	80066c0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	e001      	b.n	80066c4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	007a1200 	.word	0x007a1200

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b098      	sub	sp, #96	; 0x60
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fa fe7a 	bl	800152c <HAL_GetTick>
 8006838:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d12e      	bne.n	80068a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f88c 	bl	8006974 <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d021      	beq.n	80068a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006876:	653b      	str	r3, [r7, #80]	; 0x50
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006880:	647b      	str	r3, [r7, #68]	; 0x44
 8006882:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800688e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e062      	b.n	800696c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d149      	bne.n	8006948 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f856 	bl	8006974 <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d03c      	beq.n	8006948 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	623b      	str	r3, [r7, #32]
   return(result);
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30
 80068ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e6      	bne.n	80068ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	64bb      	str	r3, [r7, #72]	; 0x48
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006920:	61fa      	str	r2, [r7, #28]
 8006922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	69b9      	ldr	r1, [r7, #24]
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	617b      	str	r3, [r7, #20]
   return(result);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e5      	bne.n	8006900 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e011      	b.n	800696c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3758      	adds	r7, #88	; 0x58
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006984:	e049      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d045      	beq.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fa fdcd 	bl	800152c <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e048      	b.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d031      	beq.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d110      	bne.n	80069e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2208      	movs	r2, #8
 80069ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f8ff 	bl	8006bd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2208      	movs	r2, #8
 80069d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e029      	b.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f4:	d111      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f8e5 	bl	8006bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e00f      	b.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d0a6      	beq.n	8006986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b097      	sub	sp, #92	; 0x5c
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	88fa      	ldrh	r2, [r7, #6]
 8006a64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a76:	d10e      	bne.n	8006a96 <UART_Start_Receive_IT+0x52>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <UART_Start_Receive_IT+0x48>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a8a:	e02d      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	22ff      	movs	r2, #255	; 0xff
 8006a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a94:	e028      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <UART_Start_Receive_IT+0x76>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d104      	bne.n	8006ab0 <UART_Start_Receive_IT+0x6c>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aae:	e01b      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	227f      	movs	r2, #127	; 0x7f
 8006ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab8:	e016      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac2:	d10d      	bne.n	8006ae0 <UART_Start_Receive_IT+0x9c>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <UART_Start_Receive_IT+0x92>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	227f      	movs	r2, #127	; 0x7f
 8006ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad4:	e008      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	223f      	movs	r2, #63	; 0x3f
 8006ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ade:	e003      	b.n	8006ae8 <UART_Start_Receive_IT+0xa4>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2222      	movs	r2, #34	; 0x22
 8006af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b18:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b34:	d107      	bne.n	8006b46 <UART_Start_Receive_IT+0x102>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a21      	ldr	r2, [pc, #132]	; (8006bc8 <UART_Start_Receive_IT+0x184>)
 8006b42:	669a      	str	r2, [r3, #104]	; 0x68
 8006b44:	e002      	b.n	8006b4c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <UART_Start_Receive_IT+0x188>)
 8006b4a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d019      	beq.n	8006b88 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
 8006b74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_Start_Receive_IT+0x110>
 8006b86:	e018      	b.n	8006bba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	613b      	str	r3, [r7, #16]
   return(result);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f043 0320 	orr.w	r3, r3, #32
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	69f9      	ldr	r1, [r7, #28]
 8006bac:	6a3a      	ldr	r2, [r7, #32]
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e6      	bne.n	8006b88 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	375c      	adds	r7, #92	; 0x5c
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	08007039 	.word	0x08007039
 8006bcc:	08006e91 	.word	0x08006e91

08006bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b095      	sub	sp, #84	; 0x54
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e6      	bne.n	8006bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e5      	bne.n	8006c0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d118      	bne.n	8006c78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0310 	bic.w	r3, r3, #16
 8006c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6979      	ldr	r1, [r7, #20]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	613b      	str	r3, [r7, #16]
   return(result);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c8c:	bf00      	nop
 8006c8e:	3754      	adds	r7, #84	; 0x54
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff fb28 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b08f      	sub	sp, #60	; 0x3c
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd0:	2b21      	cmp	r3, #33	; 0x21
 8006cd2:	d14d      	bne.n	8006d70 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d132      	bne.n	8006d46 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e6      	bne.n	8006d12 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d44:	e014      	b.n	8006d70 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	b292      	uxth	r2, r2
 8006d52:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d70:	bf00      	nop
 8006d72:	373c      	adds	r7, #60	; 0x3c
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b091      	sub	sp, #68	; 0x44
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d88:	2b21      	cmp	r3, #33	; 0x21
 8006d8a:	d151      	bne.n	8006e30 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d132      	bne.n	8006dfe <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	623b      	str	r3, [r7, #32]
   return(result);
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
 8006db8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	69b9      	ldr	r1, [r7, #24]
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	617b      	str	r3, [r7, #20]
   return(result);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e6      	bne.n	8006dca <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006dfc:	e018      	b.n	8006e30 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e10:	b292      	uxth	r2, r2
 8006e12:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e18:	1c9a      	adds	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e30:	bf00      	nop
 8006e32:	3744      	adds	r7, #68	; 0x44
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6979      	ldr	r1, [r7, #20]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7f9 fdc2 	bl	8000a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e88:	bf00      	nop
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b09c      	sub	sp, #112	; 0x70
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea8:	2b22      	cmp	r3, #34	; 0x22
 8006eaa:	f040 80b9 	bne.w	8007020 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006eb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ebc:	b2d9      	uxtb	r1, r3
 8006ebe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	400a      	ands	r2, r1
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 809c 	bne.w	8007030 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	667b      	str	r3, [r7, #100]	; 0x64
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f4a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d018      	beq.n	8006fb2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f94:	663b      	str	r3, [r7, #96]	; 0x60
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e6      	bne.n	8006f80 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d12e      	bne.n	8007018 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f023 0310 	bic.w	r3, r3, #16
 8006fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	69b9      	ldr	r1, [r7, #24]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	617b      	str	r3, [r7, #20]
   return(result);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d103      	bne.n	8007008 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2210      	movs	r2, #16
 8007006:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff f985 	bl	8006320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007016:	e00b      	b.n	8007030 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7f9 fd2b 	bl	8000a74 <HAL_UART_RxCpltCallback>
}
 800701e:	e007      	b.n	8007030 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0208 	orr.w	r2, r2, #8
 800702e:	619a      	str	r2, [r3, #24]
}
 8007030:	bf00      	nop
 8007032:	3770      	adds	r7, #112	; 0x70
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b09c      	sub	sp, #112	; 0x70
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007046:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007050:	2b22      	cmp	r3, #34	; 0x22
 8007052:	f040 80b9 	bne.w	80071c8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800705c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007064:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007066:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800706a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800706e:	4013      	ands	r3, r2
 8007070:	b29a      	uxth	r2, r3
 8007072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007074:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	1c9a      	adds	r2, r3, #2
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 809c 	bne.w	80071d8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b4:	667b      	str	r3, [r7, #100]	; 0x64
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070be:	657b      	str	r3, [r7, #84]	; 0x54
 80070c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	663b      	str	r3, [r7, #96]	; 0x60
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070f2:	643a      	str	r2, [r7, #64]	; 0x40
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d018      	beq.n	800715a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	61fb      	str	r3, [r7, #28]
   return(result);
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800713c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007148:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800714c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e6      	bne.n	8007128 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	2b01      	cmp	r3, #1
 8007160:	d12e      	bne.n	80071c0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	60bb      	str	r3, [r7, #8]
   return(result);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f023 0310 	bic.w	r3, r3, #16
 800717c:	65bb      	str	r3, [r7, #88]	; 0x58
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6979      	ldr	r1, [r7, #20]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	613b      	str	r3, [r7, #16]
   return(result);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e6      	bne.n	8007168 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d103      	bne.n	80071b0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2210      	movs	r2, #16
 80071ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff f8b1 	bl	8006320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071be:	e00b      	b.n	80071d8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7f9 fc57 	bl	8000a74 <HAL_UART_RxCpltCallback>
}
 80071c6:	e007      	b.n	80071d8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	619a      	str	r2, [r3, #24]
}
 80071d8:	bf00      	nop
 80071da:	3770      	adds	r7, #112	; 0x70
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <atoi>:
 80071f4:	220a      	movs	r2, #10
 80071f6:	2100      	movs	r1, #0
 80071f8:	f000 b882 	b.w	8007300 <strtol>

080071fc <_strtol_l.constprop.0>:
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007202:	d001      	beq.n	8007208 <_strtol_l.constprop.0+0xc>
 8007204:	2b24      	cmp	r3, #36	; 0x24
 8007206:	d906      	bls.n	8007216 <_strtol_l.constprop.0+0x1a>
 8007208:	f000 f8de 	bl	80073c8 <__errno>
 800720c:	2316      	movs	r3, #22
 800720e:	6003      	str	r3, [r0, #0]
 8007210:	2000      	movs	r0, #0
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072fc <_strtol_l.constprop.0+0x100>
 800721a:	460d      	mov	r5, r1
 800721c:	462e      	mov	r6, r5
 800721e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007222:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007226:	f017 0708 	ands.w	r7, r7, #8
 800722a:	d1f7      	bne.n	800721c <_strtol_l.constprop.0+0x20>
 800722c:	2c2d      	cmp	r4, #45	; 0x2d
 800722e:	d132      	bne.n	8007296 <_strtol_l.constprop.0+0x9a>
 8007230:	782c      	ldrb	r4, [r5, #0]
 8007232:	2701      	movs	r7, #1
 8007234:	1cb5      	adds	r5, r6, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d05b      	beq.n	80072f2 <_strtol_l.constprop.0+0xf6>
 800723a:	2b10      	cmp	r3, #16
 800723c:	d109      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 800723e:	2c30      	cmp	r4, #48	; 0x30
 8007240:	d107      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 8007242:	782c      	ldrb	r4, [r5, #0]
 8007244:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007248:	2c58      	cmp	r4, #88	; 0x58
 800724a:	d14d      	bne.n	80072e8 <_strtol_l.constprop.0+0xec>
 800724c:	786c      	ldrb	r4, [r5, #1]
 800724e:	2310      	movs	r3, #16
 8007250:	3502      	adds	r5, #2
 8007252:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007256:	f108 38ff 	add.w	r8, r8, #4294967295
 800725a:	f04f 0e00 	mov.w	lr, #0
 800725e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007262:	4676      	mov	r6, lr
 8007264:	fb03 8a19 	mls	sl, r3, r9, r8
 8007268:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800726c:	f1bc 0f09 	cmp.w	ip, #9
 8007270:	d816      	bhi.n	80072a0 <_strtol_l.constprop.0+0xa4>
 8007272:	4664      	mov	r4, ip
 8007274:	42a3      	cmp	r3, r4
 8007276:	dd24      	ble.n	80072c2 <_strtol_l.constprop.0+0xc6>
 8007278:	f1be 3fff 	cmp.w	lr, #4294967295
 800727c:	d008      	beq.n	8007290 <_strtol_l.constprop.0+0x94>
 800727e:	45b1      	cmp	r9, r6
 8007280:	d31c      	bcc.n	80072bc <_strtol_l.constprop.0+0xc0>
 8007282:	d101      	bne.n	8007288 <_strtol_l.constprop.0+0x8c>
 8007284:	45a2      	cmp	sl, r4
 8007286:	db19      	blt.n	80072bc <_strtol_l.constprop.0+0xc0>
 8007288:	fb06 4603 	mla	r6, r6, r3, r4
 800728c:	f04f 0e01 	mov.w	lr, #1
 8007290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007294:	e7e8      	b.n	8007268 <_strtol_l.constprop.0+0x6c>
 8007296:	2c2b      	cmp	r4, #43	; 0x2b
 8007298:	bf04      	itt	eq
 800729a:	782c      	ldrbeq	r4, [r5, #0]
 800729c:	1cb5      	addeq	r5, r6, #2
 800729e:	e7ca      	b.n	8007236 <_strtol_l.constprop.0+0x3a>
 80072a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80072a4:	f1bc 0f19 	cmp.w	ip, #25
 80072a8:	d801      	bhi.n	80072ae <_strtol_l.constprop.0+0xb2>
 80072aa:	3c37      	subs	r4, #55	; 0x37
 80072ac:	e7e2      	b.n	8007274 <_strtol_l.constprop.0+0x78>
 80072ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80072b2:	f1bc 0f19 	cmp.w	ip, #25
 80072b6:	d804      	bhi.n	80072c2 <_strtol_l.constprop.0+0xc6>
 80072b8:	3c57      	subs	r4, #87	; 0x57
 80072ba:	e7db      	b.n	8007274 <_strtol_l.constprop.0+0x78>
 80072bc:	f04f 3eff 	mov.w	lr, #4294967295
 80072c0:	e7e6      	b.n	8007290 <_strtol_l.constprop.0+0x94>
 80072c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80072c6:	d105      	bne.n	80072d4 <_strtol_l.constprop.0+0xd8>
 80072c8:	2322      	movs	r3, #34	; 0x22
 80072ca:	6003      	str	r3, [r0, #0]
 80072cc:	4646      	mov	r6, r8
 80072ce:	b942      	cbnz	r2, 80072e2 <_strtol_l.constprop.0+0xe6>
 80072d0:	4630      	mov	r0, r6
 80072d2:	e79e      	b.n	8007212 <_strtol_l.constprop.0+0x16>
 80072d4:	b107      	cbz	r7, 80072d8 <_strtol_l.constprop.0+0xdc>
 80072d6:	4276      	negs	r6, r6
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d0f9      	beq.n	80072d0 <_strtol_l.constprop.0+0xd4>
 80072dc:	f1be 0f00 	cmp.w	lr, #0
 80072e0:	d000      	beq.n	80072e4 <_strtol_l.constprop.0+0xe8>
 80072e2:	1e69      	subs	r1, r5, #1
 80072e4:	6011      	str	r1, [r2, #0]
 80072e6:	e7f3      	b.n	80072d0 <_strtol_l.constprop.0+0xd4>
 80072e8:	2430      	movs	r4, #48	; 0x30
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1b1      	bne.n	8007252 <_strtol_l.constprop.0+0x56>
 80072ee:	2308      	movs	r3, #8
 80072f0:	e7af      	b.n	8007252 <_strtol_l.constprop.0+0x56>
 80072f2:	2c30      	cmp	r4, #48	; 0x30
 80072f4:	d0a5      	beq.n	8007242 <_strtol_l.constprop.0+0x46>
 80072f6:	230a      	movs	r3, #10
 80072f8:	e7ab      	b.n	8007252 <_strtol_l.constprop.0+0x56>
 80072fa:	bf00      	nop
 80072fc:	08007d41 	.word	0x08007d41

08007300 <strtol>:
 8007300:	4613      	mov	r3, r2
 8007302:	460a      	mov	r2, r1
 8007304:	4601      	mov	r1, r0
 8007306:	4802      	ldr	r0, [pc, #8]	; (8007310 <strtol+0x10>)
 8007308:	6800      	ldr	r0, [r0, #0]
 800730a:	f7ff bf77 	b.w	80071fc <_strtol_l.constprop.0>
 800730e:	bf00      	nop
 8007310:	20000080 	.word	0x20000080

08007314 <siprintf>:
 8007314:	b40e      	push	{r1, r2, r3}
 8007316:	b500      	push	{lr}
 8007318:	b09c      	sub	sp, #112	; 0x70
 800731a:	ab1d      	add	r3, sp, #116	; 0x74
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	9006      	str	r0, [sp, #24]
 8007320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007324:	4809      	ldr	r0, [pc, #36]	; (800734c <siprintf+0x38>)
 8007326:	9107      	str	r1, [sp, #28]
 8007328:	9104      	str	r1, [sp, #16]
 800732a:	4909      	ldr	r1, [pc, #36]	; (8007350 <siprintf+0x3c>)
 800732c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007330:	9105      	str	r1, [sp, #20]
 8007332:	6800      	ldr	r0, [r0, #0]
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	a902      	add	r1, sp, #8
 8007338:	f000 f9d2 	bl	80076e0 <_svfiprintf_r>
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	b01c      	add	sp, #112	; 0x70
 8007344:	f85d eb04 	ldr.w	lr, [sp], #4
 8007348:	b003      	add	sp, #12
 800734a:	4770      	bx	lr
 800734c:	20000080 	.word	0x20000080
 8007350:	ffff0208 	.word	0xffff0208

08007354 <_vsiprintf_r>:
 8007354:	b500      	push	{lr}
 8007356:	b09b      	sub	sp, #108	; 0x6c
 8007358:	9100      	str	r1, [sp, #0]
 800735a:	9104      	str	r1, [sp, #16]
 800735c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007360:	9105      	str	r1, [sp, #20]
 8007362:	9102      	str	r1, [sp, #8]
 8007364:	4905      	ldr	r1, [pc, #20]	; (800737c <_vsiprintf_r+0x28>)
 8007366:	9103      	str	r1, [sp, #12]
 8007368:	4669      	mov	r1, sp
 800736a:	f000 f9b9 	bl	80076e0 <_svfiprintf_r>
 800736e:	9b00      	ldr	r3, [sp, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	b01b      	add	sp, #108	; 0x6c
 8007376:	f85d fb04 	ldr.w	pc, [sp], #4
 800737a:	bf00      	nop
 800737c:	ffff0208 	.word	0xffff0208

08007380 <vsiprintf>:
 8007380:	4613      	mov	r3, r2
 8007382:	460a      	mov	r2, r1
 8007384:	4601      	mov	r1, r0
 8007386:	4802      	ldr	r0, [pc, #8]	; (8007390 <vsiprintf+0x10>)
 8007388:	6800      	ldr	r0, [r0, #0]
 800738a:	f7ff bfe3 	b.w	8007354 <_vsiprintf_r>
 800738e:	bf00      	nop
 8007390:	20000080 	.word	0x20000080

08007394 <memset>:
 8007394:	4402      	add	r2, r0
 8007396:	4603      	mov	r3, r0
 8007398:	4293      	cmp	r3, r2
 800739a:	d100      	bne.n	800739e <memset+0xa>
 800739c:	4770      	bx	lr
 800739e:	f803 1b01 	strb.w	r1, [r3], #1
 80073a2:	e7f9      	b.n	8007398 <memset+0x4>

080073a4 <strncmp>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	b16a      	cbz	r2, 80073c4 <strncmp+0x20>
 80073a8:	3901      	subs	r1, #1
 80073aa:	1884      	adds	r4, r0, r2
 80073ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d103      	bne.n	80073c0 <strncmp+0x1c>
 80073b8:	42a0      	cmp	r0, r4
 80073ba:	d001      	beq.n	80073c0 <strncmp+0x1c>
 80073bc:	2a00      	cmp	r2, #0
 80073be:	d1f5      	bne.n	80073ac <strncmp+0x8>
 80073c0:	1ad0      	subs	r0, r2, r3
 80073c2:	bd10      	pop	{r4, pc}
 80073c4:	4610      	mov	r0, r2
 80073c6:	e7fc      	b.n	80073c2 <strncmp+0x1e>

080073c8 <__errno>:
 80073c8:	4b01      	ldr	r3, [pc, #4]	; (80073d0 <__errno+0x8>)
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000080 	.word	0x20000080

080073d4 <__libc_init_array>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4d0d      	ldr	r5, [pc, #52]	; (800740c <__libc_init_array+0x38>)
 80073d8:	4c0d      	ldr	r4, [pc, #52]	; (8007410 <__libc_init_array+0x3c>)
 80073da:	1b64      	subs	r4, r4, r5
 80073dc:	10a4      	asrs	r4, r4, #2
 80073de:	2600      	movs	r6, #0
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	d109      	bne.n	80073f8 <__libc_init_array+0x24>
 80073e4:	4d0b      	ldr	r5, [pc, #44]	; (8007414 <__libc_init_array+0x40>)
 80073e6:	4c0c      	ldr	r4, [pc, #48]	; (8007418 <__libc_init_array+0x44>)
 80073e8:	f000 fc6a 	bl	8007cc0 <_init>
 80073ec:	1b64      	subs	r4, r4, r5
 80073ee:	10a4      	asrs	r4, r4, #2
 80073f0:	2600      	movs	r6, #0
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	d105      	bne.n	8007402 <__libc_init_array+0x2e>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fc:	4798      	blx	r3
 80073fe:	3601      	adds	r6, #1
 8007400:	e7ee      	b.n	80073e0 <__libc_init_array+0xc>
 8007402:	f855 3b04 	ldr.w	r3, [r5], #4
 8007406:	4798      	blx	r3
 8007408:	3601      	adds	r6, #1
 800740a:	e7f2      	b.n	80073f2 <__libc_init_array+0x1e>
 800740c:	08007e74 	.word	0x08007e74
 8007410:	08007e74 	.word	0x08007e74
 8007414:	08007e74 	.word	0x08007e74
 8007418:	08007e78 	.word	0x08007e78

0800741c <__retarget_lock_acquire_recursive>:
 800741c:	4770      	bx	lr

0800741e <__retarget_lock_release_recursive>:
 800741e:	4770      	bx	lr

08007420 <memcpy>:
 8007420:	440a      	add	r2, r1
 8007422:	4291      	cmp	r1, r2
 8007424:	f100 33ff 	add.w	r3, r0, #4294967295
 8007428:	d100      	bne.n	800742c <memcpy+0xc>
 800742a:	4770      	bx	lr
 800742c:	b510      	push	{r4, lr}
 800742e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007436:	4291      	cmp	r1, r2
 8007438:	d1f9      	bne.n	800742e <memcpy+0xe>
 800743a:	bd10      	pop	{r4, pc}

0800743c <_free_r>:
 800743c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800743e:	2900      	cmp	r1, #0
 8007440:	d044      	beq.n	80074cc <_free_r+0x90>
 8007442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007446:	9001      	str	r0, [sp, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f1a1 0404 	sub.w	r4, r1, #4
 800744e:	bfb8      	it	lt
 8007450:	18e4      	addlt	r4, r4, r3
 8007452:	f000 f8df 	bl	8007614 <__malloc_lock>
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <_free_r+0x94>)
 8007458:	9801      	ldr	r0, [sp, #4]
 800745a:	6813      	ldr	r3, [r2, #0]
 800745c:	b933      	cbnz	r3, 800746c <_free_r+0x30>
 800745e:	6063      	str	r3, [r4, #4]
 8007460:	6014      	str	r4, [r2, #0]
 8007462:	b003      	add	sp, #12
 8007464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007468:	f000 b8da 	b.w	8007620 <__malloc_unlock>
 800746c:	42a3      	cmp	r3, r4
 800746e:	d908      	bls.n	8007482 <_free_r+0x46>
 8007470:	6825      	ldr	r5, [r4, #0]
 8007472:	1961      	adds	r1, r4, r5
 8007474:	428b      	cmp	r3, r1
 8007476:	bf01      	itttt	eq
 8007478:	6819      	ldreq	r1, [r3, #0]
 800747a:	685b      	ldreq	r3, [r3, #4]
 800747c:	1949      	addeq	r1, r1, r5
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	e7ed      	b.n	800745e <_free_r+0x22>
 8007482:	461a      	mov	r2, r3
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b10b      	cbz	r3, 800748c <_free_r+0x50>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d9fa      	bls.n	8007482 <_free_r+0x46>
 800748c:	6811      	ldr	r1, [r2, #0]
 800748e:	1855      	adds	r5, r2, r1
 8007490:	42a5      	cmp	r5, r4
 8007492:	d10b      	bne.n	80074ac <_free_r+0x70>
 8007494:	6824      	ldr	r4, [r4, #0]
 8007496:	4421      	add	r1, r4
 8007498:	1854      	adds	r4, r2, r1
 800749a:	42a3      	cmp	r3, r4
 800749c:	6011      	str	r1, [r2, #0]
 800749e:	d1e0      	bne.n	8007462 <_free_r+0x26>
 80074a0:	681c      	ldr	r4, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	6053      	str	r3, [r2, #4]
 80074a6:	440c      	add	r4, r1
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	e7da      	b.n	8007462 <_free_r+0x26>
 80074ac:	d902      	bls.n	80074b4 <_free_r+0x78>
 80074ae:	230c      	movs	r3, #12
 80074b0:	6003      	str	r3, [r0, #0]
 80074b2:	e7d6      	b.n	8007462 <_free_r+0x26>
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1961      	adds	r1, r4, r5
 80074b8:	428b      	cmp	r3, r1
 80074ba:	bf04      	itt	eq
 80074bc:	6819      	ldreq	r1, [r3, #0]
 80074be:	685b      	ldreq	r3, [r3, #4]
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	bf04      	itt	eq
 80074c4:	1949      	addeq	r1, r1, r5
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	6054      	str	r4, [r2, #4]
 80074ca:	e7ca      	b.n	8007462 <_free_r+0x26>
 80074cc:	b003      	add	sp, #12
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	200008c4 	.word	0x200008c4

080074d4 <sbrk_aligned>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4e0e      	ldr	r6, [pc, #56]	; (8007510 <sbrk_aligned+0x3c>)
 80074d8:	460c      	mov	r4, r1
 80074da:	6831      	ldr	r1, [r6, #0]
 80074dc:	4605      	mov	r5, r0
 80074de:	b911      	cbnz	r1, 80074e6 <sbrk_aligned+0x12>
 80074e0:	f000 fba6 	bl	8007c30 <_sbrk_r>
 80074e4:	6030      	str	r0, [r6, #0]
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 fba1 	bl	8007c30 <_sbrk_r>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d00a      	beq.n	8007508 <sbrk_aligned+0x34>
 80074f2:	1cc4      	adds	r4, r0, #3
 80074f4:	f024 0403 	bic.w	r4, r4, #3
 80074f8:	42a0      	cmp	r0, r4
 80074fa:	d007      	beq.n	800750c <sbrk_aligned+0x38>
 80074fc:	1a21      	subs	r1, r4, r0
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fb96 	bl	8007c30 <_sbrk_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d101      	bne.n	800750c <sbrk_aligned+0x38>
 8007508:	f04f 34ff 	mov.w	r4, #4294967295
 800750c:	4620      	mov	r0, r4
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	200008c8 	.word	0x200008c8

08007514 <_malloc_r>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	1ccd      	adds	r5, r1, #3
 800751a:	f025 0503 	bic.w	r5, r5, #3
 800751e:	3508      	adds	r5, #8
 8007520:	2d0c      	cmp	r5, #12
 8007522:	bf38      	it	cc
 8007524:	250c      	movcc	r5, #12
 8007526:	2d00      	cmp	r5, #0
 8007528:	4607      	mov	r7, r0
 800752a:	db01      	blt.n	8007530 <_malloc_r+0x1c>
 800752c:	42a9      	cmp	r1, r5
 800752e:	d905      	bls.n	800753c <_malloc_r+0x28>
 8007530:	230c      	movs	r3, #12
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	2600      	movs	r6, #0
 8007536:	4630      	mov	r0, r6
 8007538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007610 <_malloc_r+0xfc>
 8007540:	f000 f868 	bl	8007614 <__malloc_lock>
 8007544:	f8d8 3000 	ldr.w	r3, [r8]
 8007548:	461c      	mov	r4, r3
 800754a:	bb5c      	cbnz	r4, 80075a4 <_malloc_r+0x90>
 800754c:	4629      	mov	r1, r5
 800754e:	4638      	mov	r0, r7
 8007550:	f7ff ffc0 	bl	80074d4 <sbrk_aligned>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	4604      	mov	r4, r0
 8007558:	d155      	bne.n	8007606 <_malloc_r+0xf2>
 800755a:	f8d8 4000 	ldr.w	r4, [r8]
 800755e:	4626      	mov	r6, r4
 8007560:	2e00      	cmp	r6, #0
 8007562:	d145      	bne.n	80075f0 <_malloc_r+0xdc>
 8007564:	2c00      	cmp	r4, #0
 8007566:	d048      	beq.n	80075fa <_malloc_r+0xe6>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	4631      	mov	r1, r6
 800756c:	4638      	mov	r0, r7
 800756e:	eb04 0903 	add.w	r9, r4, r3
 8007572:	f000 fb5d 	bl	8007c30 <_sbrk_r>
 8007576:	4581      	cmp	r9, r0
 8007578:	d13f      	bne.n	80075fa <_malloc_r+0xe6>
 800757a:	6821      	ldr	r1, [r4, #0]
 800757c:	1a6d      	subs	r5, r5, r1
 800757e:	4629      	mov	r1, r5
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ffa7 	bl	80074d4 <sbrk_aligned>
 8007586:	3001      	adds	r0, #1
 8007588:	d037      	beq.n	80075fa <_malloc_r+0xe6>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	442b      	add	r3, r5
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	f8d8 3000 	ldr.w	r3, [r8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d038      	beq.n	800760a <_malloc_r+0xf6>
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	42a2      	cmp	r2, r4
 800759c:	d12b      	bne.n	80075f6 <_malloc_r+0xe2>
 800759e:	2200      	movs	r2, #0
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	e00f      	b.n	80075c4 <_malloc_r+0xb0>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	1b52      	subs	r2, r2, r5
 80075a8:	d41f      	bmi.n	80075ea <_malloc_r+0xd6>
 80075aa:	2a0b      	cmp	r2, #11
 80075ac:	d917      	bls.n	80075de <_malloc_r+0xca>
 80075ae:	1961      	adds	r1, r4, r5
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	6025      	str	r5, [r4, #0]
 80075b4:	bf18      	it	ne
 80075b6:	6059      	strne	r1, [r3, #4]
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	bf08      	it	eq
 80075bc:	f8c8 1000 	streq.w	r1, [r8]
 80075c0:	5162      	str	r2, [r4, r5]
 80075c2:	604b      	str	r3, [r1, #4]
 80075c4:	4638      	mov	r0, r7
 80075c6:	f104 060b 	add.w	r6, r4, #11
 80075ca:	f000 f829 	bl	8007620 <__malloc_unlock>
 80075ce:	f026 0607 	bic.w	r6, r6, #7
 80075d2:	1d23      	adds	r3, r4, #4
 80075d4:	1af2      	subs	r2, r6, r3
 80075d6:	d0ae      	beq.n	8007536 <_malloc_r+0x22>
 80075d8:	1b9b      	subs	r3, r3, r6
 80075da:	50a3      	str	r3, [r4, r2]
 80075dc:	e7ab      	b.n	8007536 <_malloc_r+0x22>
 80075de:	42a3      	cmp	r3, r4
 80075e0:	6862      	ldr	r2, [r4, #4]
 80075e2:	d1dd      	bne.n	80075a0 <_malloc_r+0x8c>
 80075e4:	f8c8 2000 	str.w	r2, [r8]
 80075e8:	e7ec      	b.n	80075c4 <_malloc_r+0xb0>
 80075ea:	4623      	mov	r3, r4
 80075ec:	6864      	ldr	r4, [r4, #4]
 80075ee:	e7ac      	b.n	800754a <_malloc_r+0x36>
 80075f0:	4634      	mov	r4, r6
 80075f2:	6876      	ldr	r6, [r6, #4]
 80075f4:	e7b4      	b.n	8007560 <_malloc_r+0x4c>
 80075f6:	4613      	mov	r3, r2
 80075f8:	e7cc      	b.n	8007594 <_malloc_r+0x80>
 80075fa:	230c      	movs	r3, #12
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4638      	mov	r0, r7
 8007600:	f000 f80e 	bl	8007620 <__malloc_unlock>
 8007604:	e797      	b.n	8007536 <_malloc_r+0x22>
 8007606:	6025      	str	r5, [r4, #0]
 8007608:	e7dc      	b.n	80075c4 <_malloc_r+0xb0>
 800760a:	605b      	str	r3, [r3, #4]
 800760c:	deff      	udf	#255	; 0xff
 800760e:	bf00      	nop
 8007610:	200008c4 	.word	0x200008c4

08007614 <__malloc_lock>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__malloc_lock+0x8>)
 8007616:	f7ff bf01 	b.w	800741c <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	200008c0 	.word	0x200008c0

08007620 <__malloc_unlock>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__malloc_unlock+0x8>)
 8007622:	f7ff befc 	b.w	800741e <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	200008c0 	.word	0x200008c0

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	461f      	mov	r7, r3
 8007634:	42be      	cmp	r6, r7
 8007636:	680b      	ldr	r3, [r1, #0]
 8007638:	4682      	mov	sl, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4690      	mov	r8, r2
 800763e:	d82c      	bhi.n	800769a <__ssputs_r+0x6e>
 8007640:	898a      	ldrh	r2, [r1, #12]
 8007642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007646:	d026      	beq.n	8007696 <__ssputs_r+0x6a>
 8007648:	6965      	ldr	r5, [r4, #20]
 800764a:	6909      	ldr	r1, [r1, #16]
 800764c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007650:	eba3 0901 	sub.w	r9, r3, r1
 8007654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007658:	1c7b      	adds	r3, r7, #1
 800765a:	444b      	add	r3, r9
 800765c:	106d      	asrs	r5, r5, #1
 800765e:	429d      	cmp	r5, r3
 8007660:	bf38      	it	cc
 8007662:	461d      	movcc	r5, r3
 8007664:	0553      	lsls	r3, r2, #21
 8007666:	d527      	bpl.n	80076b8 <__ssputs_r+0x8c>
 8007668:	4629      	mov	r1, r5
 800766a:	f7ff ff53 	bl	8007514 <_malloc_r>
 800766e:	4606      	mov	r6, r0
 8007670:	b360      	cbz	r0, 80076cc <__ssputs_r+0xa0>
 8007672:	6921      	ldr	r1, [r4, #16]
 8007674:	464a      	mov	r2, r9
 8007676:	f7ff fed3 	bl	8007420 <memcpy>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6126      	str	r6, [r4, #16]
 8007688:	6165      	str	r5, [r4, #20]
 800768a:	444e      	add	r6, r9
 800768c:	eba5 0509 	sub.w	r5, r5, r9
 8007690:	6026      	str	r6, [r4, #0]
 8007692:	60a5      	str	r5, [r4, #8]
 8007694:	463e      	mov	r6, r7
 8007696:	42be      	cmp	r6, r7
 8007698:	d900      	bls.n	800769c <__ssputs_r+0x70>
 800769a:	463e      	mov	r6, r7
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	4632      	mov	r2, r6
 80076a0:	4641      	mov	r1, r8
 80076a2:	f000 faab 	bl	8007bfc <memmove>
 80076a6:	68a3      	ldr	r3, [r4, #8]
 80076a8:	1b9b      	subs	r3, r3, r6
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	4433      	add	r3, r6
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	2000      	movs	r0, #0
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	462a      	mov	r2, r5
 80076ba:	f000 fac9 	bl	8007c50 <_realloc_r>
 80076be:	4606      	mov	r6, r0
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1e0      	bne.n	8007686 <__ssputs_r+0x5a>
 80076c4:	6921      	ldr	r1, [r4, #16]
 80076c6:	4650      	mov	r0, sl
 80076c8:	f7ff feb8 	bl	800743c <_free_r>
 80076cc:	230c      	movs	r3, #12
 80076ce:	f8ca 3000 	str.w	r3, [sl]
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d8:	81a3      	strh	r3, [r4, #12]
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	e7e9      	b.n	80076b4 <__ssputs_r+0x88>

080076e0 <_svfiprintf_r>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	4698      	mov	r8, r3
 80076e6:	898b      	ldrh	r3, [r1, #12]
 80076e8:	061b      	lsls	r3, r3, #24
 80076ea:	b09d      	sub	sp, #116	; 0x74
 80076ec:	4607      	mov	r7, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	d50e      	bpl.n	8007712 <_svfiprintf_r+0x32>
 80076f4:	690b      	ldr	r3, [r1, #16]
 80076f6:	b963      	cbnz	r3, 8007712 <_svfiprintf_r+0x32>
 80076f8:	2140      	movs	r1, #64	; 0x40
 80076fa:	f7ff ff0b 	bl	8007514 <_malloc_r>
 80076fe:	6028      	str	r0, [r5, #0]
 8007700:	6128      	str	r0, [r5, #16]
 8007702:	b920      	cbnz	r0, 800770e <_svfiprintf_r+0x2e>
 8007704:	230c      	movs	r3, #12
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e0d0      	b.n	80078b0 <_svfiprintf_r+0x1d0>
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	616b      	str	r3, [r5, #20]
 8007712:	2300      	movs	r3, #0
 8007714:	9309      	str	r3, [sp, #36]	; 0x24
 8007716:	2320      	movs	r3, #32
 8007718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800771c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007720:	2330      	movs	r3, #48	; 0x30
 8007722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078c8 <_svfiprintf_r+0x1e8>
 8007726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772a:	f04f 0901 	mov.w	r9, #1
 800772e:	4623      	mov	r3, r4
 8007730:	469a      	mov	sl, r3
 8007732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007736:	b10a      	cbz	r2, 800773c <_svfiprintf_r+0x5c>
 8007738:	2a25      	cmp	r2, #37	; 0x25
 800773a:	d1f9      	bne.n	8007730 <_svfiprintf_r+0x50>
 800773c:	ebba 0b04 	subs.w	fp, sl, r4
 8007740:	d00b      	beq.n	800775a <_svfiprintf_r+0x7a>
 8007742:	465b      	mov	r3, fp
 8007744:	4622      	mov	r2, r4
 8007746:	4629      	mov	r1, r5
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ff6f 	bl	800762c <__ssputs_r>
 800774e:	3001      	adds	r0, #1
 8007750:	f000 80a9 	beq.w	80078a6 <_svfiprintf_r+0x1c6>
 8007754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007756:	445a      	add	r2, fp
 8007758:	9209      	str	r2, [sp, #36]	; 0x24
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80a1 	beq.w	80078a6 <_svfiprintf_r+0x1c6>
 8007764:	2300      	movs	r3, #0
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776e:	f10a 0a01 	add.w	sl, sl, #1
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	9307      	str	r3, [sp, #28]
 8007776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800777a:	931a      	str	r3, [sp, #104]	; 0x68
 800777c:	4654      	mov	r4, sl
 800777e:	2205      	movs	r2, #5
 8007780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007784:	4850      	ldr	r0, [pc, #320]	; (80078c8 <_svfiprintf_r+0x1e8>)
 8007786:	f7f8 fd33 	bl	80001f0 <memchr>
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	b9d8      	cbnz	r0, 80077c6 <_svfiprintf_r+0xe6>
 800778e:	06d0      	lsls	r0, r2, #27
 8007790:	bf44      	itt	mi
 8007792:	2320      	movmi	r3, #32
 8007794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007798:	0711      	lsls	r1, r2, #28
 800779a:	bf44      	itt	mi
 800779c:	232b      	movmi	r3, #43	; 0x2b
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a2:	f89a 3000 	ldrb.w	r3, [sl]
 80077a6:	2b2a      	cmp	r3, #42	; 0x2a
 80077a8:	d015      	beq.n	80077d6 <_svfiprintf_r+0xf6>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	4654      	mov	r4, sl
 80077ae:	2000      	movs	r0, #0
 80077b0:	f04f 0c0a 	mov.w	ip, #10
 80077b4:	4621      	mov	r1, r4
 80077b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ba:	3b30      	subs	r3, #48	; 0x30
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d94d      	bls.n	800785c <_svfiprintf_r+0x17c>
 80077c0:	b1b0      	cbz	r0, 80077f0 <_svfiprintf_r+0x110>
 80077c2:	9207      	str	r2, [sp, #28]
 80077c4:	e014      	b.n	80077f0 <_svfiprintf_r+0x110>
 80077c6:	eba0 0308 	sub.w	r3, r0, r8
 80077ca:	fa09 f303 	lsl.w	r3, r9, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	46a2      	mov	sl, r4
 80077d4:	e7d2      	b.n	800777c <_svfiprintf_r+0x9c>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	1d19      	adds	r1, r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	9103      	str	r1, [sp, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbb      	ittet	lt
 80077e2:	425b      	neglt	r3, r3
 80077e4:	f042 0202 	orrlt.w	r2, r2, #2
 80077e8:	9307      	strge	r3, [sp, #28]
 80077ea:	9307      	strlt	r3, [sp, #28]
 80077ec:	bfb8      	it	lt
 80077ee:	9204      	strlt	r2, [sp, #16]
 80077f0:	7823      	ldrb	r3, [r4, #0]
 80077f2:	2b2e      	cmp	r3, #46	; 0x2e
 80077f4:	d10c      	bne.n	8007810 <_svfiprintf_r+0x130>
 80077f6:	7863      	ldrb	r3, [r4, #1]
 80077f8:	2b2a      	cmp	r3, #42	; 0x2a
 80077fa:	d134      	bne.n	8007866 <_svfiprintf_r+0x186>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9203      	str	r2, [sp, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfb8      	it	lt
 8007808:	f04f 33ff 	movlt.w	r3, #4294967295
 800780c:	3402      	adds	r4, #2
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078d8 <_svfiprintf_r+0x1f8>
 8007814:	7821      	ldrb	r1, [r4, #0]
 8007816:	2203      	movs	r2, #3
 8007818:	4650      	mov	r0, sl
 800781a:	f7f8 fce9 	bl	80001f0 <memchr>
 800781e:	b138      	cbz	r0, 8007830 <_svfiprintf_r+0x150>
 8007820:	9b04      	ldr	r3, [sp, #16]
 8007822:	eba0 000a 	sub.w	r0, r0, sl
 8007826:	2240      	movs	r2, #64	; 0x40
 8007828:	4082      	lsls	r2, r0
 800782a:	4313      	orrs	r3, r2
 800782c:	3401      	adds	r4, #1
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007834:	4825      	ldr	r0, [pc, #148]	; (80078cc <_svfiprintf_r+0x1ec>)
 8007836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800783a:	2206      	movs	r2, #6
 800783c:	f7f8 fcd8 	bl	80001f0 <memchr>
 8007840:	2800      	cmp	r0, #0
 8007842:	d038      	beq.n	80078b6 <_svfiprintf_r+0x1d6>
 8007844:	4b22      	ldr	r3, [pc, #136]	; (80078d0 <_svfiprintf_r+0x1f0>)
 8007846:	bb1b      	cbnz	r3, 8007890 <_svfiprintf_r+0x1b0>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	3307      	adds	r3, #7
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	3308      	adds	r3, #8
 8007852:	9303      	str	r3, [sp, #12]
 8007854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007856:	4433      	add	r3, r6
 8007858:	9309      	str	r3, [sp, #36]	; 0x24
 800785a:	e768      	b.n	800772e <_svfiprintf_r+0x4e>
 800785c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007860:	460c      	mov	r4, r1
 8007862:	2001      	movs	r0, #1
 8007864:	e7a6      	b.n	80077b4 <_svfiprintf_r+0xd4>
 8007866:	2300      	movs	r3, #0
 8007868:	3401      	adds	r4, #1
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	4619      	mov	r1, r3
 800786e:	f04f 0c0a 	mov.w	ip, #10
 8007872:	4620      	mov	r0, r4
 8007874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007878:	3a30      	subs	r2, #48	; 0x30
 800787a:	2a09      	cmp	r2, #9
 800787c:	d903      	bls.n	8007886 <_svfiprintf_r+0x1a6>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0c6      	beq.n	8007810 <_svfiprintf_r+0x130>
 8007882:	9105      	str	r1, [sp, #20]
 8007884:	e7c4      	b.n	8007810 <_svfiprintf_r+0x130>
 8007886:	fb0c 2101 	mla	r1, ip, r1, r2
 800788a:	4604      	mov	r4, r0
 800788c:	2301      	movs	r3, #1
 800788e:	e7f0      	b.n	8007872 <_svfiprintf_r+0x192>
 8007890:	ab03      	add	r3, sp, #12
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	462a      	mov	r2, r5
 8007896:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <_svfiprintf_r+0x1f4>)
 8007898:	a904      	add	r1, sp, #16
 800789a:	4638      	mov	r0, r7
 800789c:	f3af 8000 	nop.w
 80078a0:	1c42      	adds	r2, r0, #1
 80078a2:	4606      	mov	r6, r0
 80078a4:	d1d6      	bne.n	8007854 <_svfiprintf_r+0x174>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	065b      	lsls	r3, r3, #25
 80078aa:	f53f af2d 	bmi.w	8007708 <_svfiprintf_r+0x28>
 80078ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b0:	b01d      	add	sp, #116	; 0x74
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <_svfiprintf_r+0x1f4>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4638      	mov	r0, r7
 80078c2:	f000 f879 	bl	80079b8 <_printf_i>
 80078c6:	e7eb      	b.n	80078a0 <_svfiprintf_r+0x1c0>
 80078c8:	08007e41 	.word	0x08007e41
 80078cc:	08007e4b 	.word	0x08007e4b
 80078d0:	00000000 	.word	0x00000000
 80078d4:	0800762d 	.word	0x0800762d
 80078d8:	08007e47 	.word	0x08007e47

080078dc <_printf_common>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4616      	mov	r6, r2
 80078e2:	4699      	mov	r9, r3
 80078e4:	688a      	ldr	r2, [r1, #8]
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfb8      	it	lt
 80078f0:	4613      	movlt	r3, r2
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f8:	4607      	mov	r7, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	b10a      	cbz	r2, 8007902 <_printf_common+0x26>
 80078fe:	3301      	adds	r3, #1
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	0699      	lsls	r1, r3, #26
 8007906:	bf42      	ittt	mi
 8007908:	6833      	ldrmi	r3, [r6, #0]
 800790a:	3302      	addmi	r3, #2
 800790c:	6033      	strmi	r3, [r6, #0]
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	f015 0506 	ands.w	r5, r5, #6
 8007914:	d106      	bne.n	8007924 <_printf_common+0x48>
 8007916:	f104 0a19 	add.w	sl, r4, #25
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	6832      	ldr	r2, [r6, #0]
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc26      	bgt.n	8007972 <_printf_common+0x96>
 8007924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007928:	1e13      	subs	r3, r2, #0
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	2301      	movne	r3, #1
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d42b      	bmi.n	800798c <_printf_common+0xb0>
 8007934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007938:	4649      	mov	r1, r9
 800793a:	4638      	mov	r0, r7
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d01e      	beq.n	8007980 <_printf_common+0xa4>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	f003 0306 	and.w	r3, r3, #6
 800794a:	2b04      	cmp	r3, #4
 800794c:	bf02      	ittt	eq
 800794e:	68e5      	ldreq	r5, [r4, #12]
 8007950:	6833      	ldreq	r3, [r6, #0]
 8007952:	1aed      	subeq	r5, r5, r3
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	bf0c      	ite	eq
 8007958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800795c:	2500      	movne	r5, #0
 800795e:	4293      	cmp	r3, r2
 8007960:	bfc4      	itt	gt
 8007962:	1a9b      	subgt	r3, r3, r2
 8007964:	18ed      	addgt	r5, r5, r3
 8007966:	2600      	movs	r6, #0
 8007968:	341a      	adds	r4, #26
 800796a:	42b5      	cmp	r5, r6
 800796c:	d11a      	bne.n	80079a4 <_printf_common+0xc8>
 800796e:	2000      	movs	r0, #0
 8007970:	e008      	b.n	8007984 <_printf_common+0xa8>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4649      	mov	r1, r9
 8007978:	4638      	mov	r0, r7
 800797a:	47c0      	blx	r8
 800797c:	3001      	adds	r0, #1
 800797e:	d103      	bne.n	8007988 <_printf_common+0xac>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007988:	3501      	adds	r5, #1
 800798a:	e7c6      	b.n	800791a <_printf_common+0x3e>
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	2030      	movs	r0, #48	; 0x30
 8007992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007996:	4422      	add	r2, r4
 8007998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a0:	3302      	adds	r3, #2
 80079a2:	e7c7      	b.n	8007934 <_printf_common+0x58>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4622      	mov	r2, r4
 80079a8:	4649      	mov	r1, r9
 80079aa:	4638      	mov	r0, r7
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0e6      	beq.n	8007980 <_printf_common+0xa4>
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7d9      	b.n	800796a <_printf_common+0x8e>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	7e0f      	ldrb	r7, [r1, #24]
 80079be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079c0:	2f78      	cmp	r7, #120	; 0x78
 80079c2:	4691      	mov	r9, r2
 80079c4:	4680      	mov	r8, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	469a      	mov	sl, r3
 80079ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ce:	d807      	bhi.n	80079e0 <_printf_i+0x28>
 80079d0:	2f62      	cmp	r7, #98	; 0x62
 80079d2:	d80a      	bhi.n	80079ea <_printf_i+0x32>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f000 80d4 	beq.w	8007b82 <_printf_i+0x1ca>
 80079da:	2f58      	cmp	r7, #88	; 0x58
 80079dc:	f000 80c0 	beq.w	8007b60 <_printf_i+0x1a8>
 80079e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e8:	e03a      	b.n	8007a60 <_printf_i+0xa8>
 80079ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ee:	2b15      	cmp	r3, #21
 80079f0:	d8f6      	bhi.n	80079e0 <_printf_i+0x28>
 80079f2:	a101      	add	r1, pc, #4	; (adr r1, 80079f8 <_printf_i+0x40>)
 80079f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	080079e1 	.word	0x080079e1
 8007a04:	080079e1 	.word	0x080079e1
 8007a08:	080079e1 	.word	0x080079e1
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079e1 	.word	0x080079e1
 8007a18:	080079e1 	.word	0x080079e1
 8007a1c:	080079e1 	.word	0x080079e1
 8007a20:	080079e1 	.word	0x080079e1
 8007a24:	08007b69 	.word	0x08007b69
 8007a28:	08007a91 	.word	0x08007a91
 8007a2c:	08007b23 	.word	0x08007b23
 8007a30:	080079e1 	.word	0x080079e1
 8007a34:	080079e1 	.word	0x080079e1
 8007a38:	08007b8b 	.word	0x08007b8b
 8007a3c:	080079e1 	.word	0x080079e1
 8007a40:	08007a91 	.word	0x08007a91
 8007a44:	080079e1 	.word	0x080079e1
 8007a48:	080079e1 	.word	0x080079e1
 8007a4c:	08007b2b 	.word	0x08007b2b
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	602a      	str	r2, [r5, #0]
 8007a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a60:	2301      	movs	r3, #1
 8007a62:	e09f      	b.n	8007ba4 <_printf_i+0x1ec>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	682b      	ldr	r3, [r5, #0]
 8007a68:	0607      	lsls	r7, r0, #24
 8007a6a:	f103 0104 	add.w	r1, r3, #4
 8007a6e:	6029      	str	r1, [r5, #0]
 8007a70:	d501      	bpl.n	8007a76 <_printf_i+0xbe>
 8007a72:	681e      	ldr	r6, [r3, #0]
 8007a74:	e003      	b.n	8007a7e <_printf_i+0xc6>
 8007a76:	0646      	lsls	r6, r0, #25
 8007a78:	d5fb      	bpl.n	8007a72 <_printf_i+0xba>
 8007a7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	da03      	bge.n	8007a8a <_printf_i+0xd2>
 8007a82:	232d      	movs	r3, #45	; 0x2d
 8007a84:	4276      	negs	r6, r6
 8007a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a8a:	485a      	ldr	r0, [pc, #360]	; (8007bf4 <_printf_i+0x23c>)
 8007a8c:	230a      	movs	r3, #10
 8007a8e:	e012      	b.n	8007ab6 <_printf_i+0xfe>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	6820      	ldr	r0, [r4, #0]
 8007a94:	1d19      	adds	r1, r3, #4
 8007a96:	6029      	str	r1, [r5, #0]
 8007a98:	0605      	lsls	r5, r0, #24
 8007a9a:	d501      	bpl.n	8007aa0 <_printf_i+0xe8>
 8007a9c:	681e      	ldr	r6, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <_printf_i+0xee>
 8007aa0:	0641      	lsls	r1, r0, #25
 8007aa2:	d5fb      	bpl.n	8007a9c <_printf_i+0xe4>
 8007aa4:	881e      	ldrh	r6, [r3, #0]
 8007aa6:	4853      	ldr	r0, [pc, #332]	; (8007bf4 <_printf_i+0x23c>)
 8007aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aaa:	bf0c      	ite	eq
 8007aac:	2308      	moveq	r3, #8
 8007aae:	230a      	movne	r3, #10
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ab6:	6865      	ldr	r5, [r4, #4]
 8007ab8:	60a5      	str	r5, [r4, #8]
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	bfa2      	ittt	ge
 8007abe:	6821      	ldrge	r1, [r4, #0]
 8007ac0:	f021 0104 	bicge.w	r1, r1, #4
 8007ac4:	6021      	strge	r1, [r4, #0]
 8007ac6:	b90e      	cbnz	r6, 8007acc <_printf_i+0x114>
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	d04b      	beq.n	8007b64 <_printf_i+0x1ac>
 8007acc:	4615      	mov	r5, r2
 8007ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ad6:	5dc7      	ldrb	r7, [r0, r7]
 8007ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007adc:	4637      	mov	r7, r6
 8007ade:	42bb      	cmp	r3, r7
 8007ae0:	460e      	mov	r6, r1
 8007ae2:	d9f4      	bls.n	8007ace <_printf_i+0x116>
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d10b      	bne.n	8007b00 <_printf_i+0x148>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	07de      	lsls	r6, r3, #31
 8007aec:	d508      	bpl.n	8007b00 <_printf_i+0x148>
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	6861      	ldr	r1, [r4, #4]
 8007af2:	4299      	cmp	r1, r3
 8007af4:	bfde      	ittt	le
 8007af6:	2330      	movle	r3, #48	; 0x30
 8007af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b00:	1b52      	subs	r2, r2, r5
 8007b02:	6122      	str	r2, [r4, #16]
 8007b04:	f8cd a000 	str.w	sl, [sp]
 8007b08:	464b      	mov	r3, r9
 8007b0a:	aa03      	add	r2, sp, #12
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4640      	mov	r0, r8
 8007b10:	f7ff fee4 	bl	80078dc <_printf_common>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d14a      	bne.n	8007bae <_printf_i+0x1f6>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	b004      	add	sp, #16
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	f043 0320 	orr.w	r3, r3, #32
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	4833      	ldr	r0, [pc, #204]	; (8007bf8 <_printf_i+0x240>)
 8007b2c:	2778      	movs	r7, #120	; 0x78
 8007b2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	6829      	ldr	r1, [r5, #0]
 8007b36:	061f      	lsls	r7, r3, #24
 8007b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b3c:	d402      	bmi.n	8007b44 <_printf_i+0x18c>
 8007b3e:	065f      	lsls	r7, r3, #25
 8007b40:	bf48      	it	mi
 8007b42:	b2b6      	uxthmi	r6, r6
 8007b44:	07df      	lsls	r7, r3, #31
 8007b46:	bf48      	it	mi
 8007b48:	f043 0320 	orrmi.w	r3, r3, #32
 8007b4c:	6029      	str	r1, [r5, #0]
 8007b4e:	bf48      	it	mi
 8007b50:	6023      	strmi	r3, [r4, #0]
 8007b52:	b91e      	cbnz	r6, 8007b5c <_printf_i+0x1a4>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	f023 0320 	bic.w	r3, r3, #32
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	e7a7      	b.n	8007ab0 <_printf_i+0xf8>
 8007b60:	4824      	ldr	r0, [pc, #144]	; (8007bf4 <_printf_i+0x23c>)
 8007b62:	e7e4      	b.n	8007b2e <_printf_i+0x176>
 8007b64:	4615      	mov	r5, r2
 8007b66:	e7bd      	b.n	8007ae4 <_printf_i+0x12c>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	6826      	ldr	r6, [r4, #0]
 8007b6c:	6961      	ldr	r1, [r4, #20]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6028      	str	r0, [r5, #0]
 8007b72:	0635      	lsls	r5, r6, #24
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0x1c4>
 8007b78:	6019      	str	r1, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0x1ca>
 8007b7c:	0670      	lsls	r0, r6, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0x1c0>
 8007b80:	8019      	strh	r1, [r3, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	4615      	mov	r5, r2
 8007b88:	e7bc      	b.n	8007b04 <_printf_i+0x14c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	681d      	ldr	r5, [r3, #0]
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7f8 fb2a 	bl	80001f0 <memchr>
 8007b9c:	b108      	cbz	r0, 8007ba2 <_printf_i+0x1ea>
 8007b9e:	1b40      	subs	r0, r0, r5
 8007ba0:	6060      	str	r0, [r4, #4]
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	e7aa      	b.n	8007b04 <_printf_i+0x14c>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	47d0      	blx	sl
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d0ad      	beq.n	8007b18 <_printf_i+0x160>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	079b      	lsls	r3, r3, #30
 8007bc0:	d413      	bmi.n	8007bea <_printf_i+0x232>
 8007bc2:	68e0      	ldr	r0, [r4, #12]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	bfb8      	it	lt
 8007bca:	4618      	movlt	r0, r3
 8007bcc:	e7a6      	b.n	8007b1c <_printf_i+0x164>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	47d0      	blx	sl
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d09d      	beq.n	8007b18 <_printf_i+0x160>
 8007bdc:	3501      	adds	r5, #1
 8007bde:	68e3      	ldr	r3, [r4, #12]
 8007be0:	9903      	ldr	r1, [sp, #12]
 8007be2:	1a5b      	subs	r3, r3, r1
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	dcf2      	bgt.n	8007bce <_printf_i+0x216>
 8007be8:	e7eb      	b.n	8007bc2 <_printf_i+0x20a>
 8007bea:	2500      	movs	r5, #0
 8007bec:	f104 0619 	add.w	r6, r4, #25
 8007bf0:	e7f5      	b.n	8007bde <_printf_i+0x226>
 8007bf2:	bf00      	nop
 8007bf4:	08007e52 	.word	0x08007e52
 8007bf8:	08007e63 	.word	0x08007e63

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0402 	add.w	r4, r1, r2
 8007c04:	d902      	bls.n	8007c0c <memmove+0x10>
 8007c06:	4284      	cmp	r4, r0
 8007c08:	4623      	mov	r3, r4
 8007c0a:	d807      	bhi.n	8007c1c <memmove+0x20>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	42a1      	cmp	r1, r4
 8007c10:	d008      	beq.n	8007c24 <memmove+0x28>
 8007c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c1a:	e7f8      	b.n	8007c0e <memmove+0x12>
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4601      	mov	r1, r0
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d100      	bne.n	8007c26 <memmove+0x2a>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2e:	e7f7      	b.n	8007c20 <memmove+0x24>

08007c30 <_sbrk_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_sbrk_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7f9 fbaa 	bl	8001394 <_sbrk>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_sbrk_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_sbrk_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	200008bc 	.word	0x200008bc

08007c50 <_realloc_r>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	4680      	mov	r8, r0
 8007c56:	4614      	mov	r4, r2
 8007c58:	460e      	mov	r6, r1
 8007c5a:	b921      	cbnz	r1, 8007c66 <_realloc_r+0x16>
 8007c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	4611      	mov	r1, r2
 8007c62:	f7ff bc57 	b.w	8007514 <_malloc_r>
 8007c66:	b92a      	cbnz	r2, 8007c74 <_realloc_r+0x24>
 8007c68:	f7ff fbe8 	bl	800743c <_free_r>
 8007c6c:	4625      	mov	r5, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	f000 f81b 	bl	8007cae <_malloc_usable_size_r>
 8007c78:	4284      	cmp	r4, r0
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	d802      	bhi.n	8007c84 <_realloc_r+0x34>
 8007c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c82:	d812      	bhi.n	8007caa <_realloc_r+0x5a>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fc44 	bl	8007514 <_malloc_r>
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d0ed      	beq.n	8007c6e <_realloc_r+0x1e>
 8007c92:	42bc      	cmp	r4, r7
 8007c94:	4622      	mov	r2, r4
 8007c96:	4631      	mov	r1, r6
 8007c98:	bf28      	it	cs
 8007c9a:	463a      	movcs	r2, r7
 8007c9c:	f7ff fbc0 	bl	8007420 <memcpy>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fbca 	bl	800743c <_free_r>
 8007ca8:	e7e1      	b.n	8007c6e <_realloc_r+0x1e>
 8007caa:	4635      	mov	r5, r6
 8007cac:	e7df      	b.n	8007c6e <_realloc_r+0x1e>

08007cae <_malloc_usable_size_r>:
 8007cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb2:	1f18      	subs	r0, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bfbc      	itt	lt
 8007cb8:	580b      	ldrlt	r3, [r1, r0]
 8007cba:	18c0      	addlt	r0, r0, r3
 8007cbc:	4770      	bx	lr
	...

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
