
proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e4c  08007e4c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08007e4c  08007e4c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e4c  08007e4c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000844  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010b93  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002496  00000000  00000000  00030c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da8  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ab2  00000000  00000000  00033ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020630  00000000  00000000  0003497a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011e4d  00000000  00000000  00054faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8b5c  00000000  00000000  00066df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f10  00000000  00000000  0012f954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00133864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c98 	.word	0x08007c98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08007c98 	.word	0x08007c98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <hc_sr_04_init>:

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr_04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo,
		TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 ff00 	bl	80040bc <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f003 fb66 	bl	8003998 <HAL_TIM_PWM_Start>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <hc_sr_04_convert_us_to_cm>:

uint32_t hc_sr_04_convert_us_to_cm(uint32_t distance_us)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <hc_sr_04_convert_us_to_cm+0x20>)
 80002e0:	fba2 2303 	umull	r2, r3, r2, r3
 80002e4:	095b      	lsrs	r3, r3, #5
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	8d3dcb09 	.word	0x8d3dcb09

080002f8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d10a      	bne.n	8000320 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		pwmInResult;
		uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 800030a:	2104      	movs	r1, #4
 800030c:	4807      	ldr	r0, [pc, #28]	; (800032c <HAL_TIM_IC_CaptureCallback+0x34>)
 800030e:	f004 fbfb 	bl	8004b08 <HAL_TIM_ReadCapturedValue>
 8000312:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
 8000314:	68f8      	ldr	r0, [r7, #12]
 8000316:	f7ff ffdd 	bl	80002d4 <hc_sr_04_convert_us_to_cm>
 800031a:	4603      	mov	r3, r0
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_TIM_IC_CaptureCallback+0x38>)
 800031e:	60d3      	str	r3, [r2, #12]
	}
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40012c00 	.word	0x40012c00
 800032c:	200000a0 	.word	0x200000a0
 8000330:	2000065c 	.word	0x2000065c

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b0ce      	sub	sp, #312	; 0x138
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033a:	f001 f889 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033e:	f000 f859 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000342:	f000 fa2b 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 8000346:	f000 fa03 	bl	8000750 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800034a:	f000 f9d1 	bl	80006f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800034e:	f000 f8b5 	bl	80004bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000352:	f000 f957 	bl	8000604 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buffer_R.tab[buffer_R.empty], 1);
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <main+0xa4>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a1f      	ldr	r2, [pc, #124]	; (80003d8 <main+0xa4>)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	4413      	add	r3, r2
 8000360:	2201      	movs	r2, #1
 8000362:	4619      	mov	r1, r3
 8000364:	481d      	ldr	r0, [pc, #116]	; (80003dc <main+0xa8>)
 8000366:	f005 fc93 	bl	8005c90 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)pulse, 1);
 800036a:	2301      	movs	r3, #1
 800036c:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <main+0xac>)
 800036e:	2108      	movs	r1, #8
 8000370:	481c      	ldr	r0, [pc, #112]	; (80003e4 <main+0xb0>)
 8000372:	f003 fc1d 	bl	8003bb0 <HAL_TIM_PWM_Start_DMA>
  hc_sr_04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);  // Enable PWM input capture with interrupts
 8000376:	2308      	movs	r3, #8
 8000378:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <main+0xb0>)
 800037a:	491b      	ldr	r1, [pc, #108]	; (80003e8 <main+0xb4>)
 800037c:	481b      	ldr	r0, [pc, #108]	; (80003ec <main+0xb8>)
 800037e:	f7ff ff87 	bl	8000290 <hc_sr_04_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USART_fSend("START\n\r");
 8000382:	481b      	ldr	r0, [pc, #108]	; (80003f0 <main+0xbc>)
 8000384:	f000 faac 	bl	80008e0 <USART_fSend>
  int16_t length = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
  char bFrame[300];
  char senderAddress[4];
  while (1)
  {
	  if ((length = getFrame(bFrame)) != -1) {
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fb84 	bl	8000aa0 <getFrame>
 8000398:	4603      	mov	r3, r0
 800039a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800039e:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80003a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003a6:	d0f2      	beq.n	800038e <main+0x5a>
		 if ((length = analizeFrame(bFrame,length,senderAddress)) != 0) {
 80003a8:	1d3a      	adds	r2, r7, #4
 80003aa:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc1a 	bl	8000bec <analizeFrame>
 80003b8:	4603      	mov	r3, r0
 80003ba:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80003be:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0e3      	beq.n	800038e <main+0x5a>
			 analizeCommend(bFrame, length, senderAddress);
 80003c6:	f9b7 1136 	ldrsh.w	r1, [r7, #310]	; 0x136
 80003ca:	1d3a      	adds	r2, r7, #4
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fdd7 	bl	8000f84 <analizeCommend>
	  if ((length = getFrame(bFrame)) != -1) {
 80003d6:	e7da      	b.n	800038e <main+0x5a>
 80003d8:	20000010 	.word	0x20000010
 80003dc:	200001c0 	.word	0x200001c0
 80003e0:	20000020 	.word	0x20000020
 80003e4:	200000ec 	.word	0x200000ec
 80003e8:	200000a0 	.word	0x200000a0
 80003ec:	2000065c 	.word	0x2000065c
 80003f0:	08007cb0 	.word	0x08007cb0

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b0a6      	sub	sp, #152	; 0x98
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003fe:	2228      	movs	r2, #40	; 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f006 ffb2 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2258      	movs	r2, #88	; 0x58
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f006 ffa4 	bl	800736c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000424:	2302      	movs	r3, #2
 8000426:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2310      	movs	r3, #16
 800042e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	2302      	movs	r3, #2
 8000434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800043c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000440:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fd40 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800045e:	f000 fdd1 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000478:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800047c:	2102      	movs	r1, #2
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fd7e 	bl	8002f80 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800048a:	f000 fdbb 	bl	8001004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SystemClock_Config+0xc4>)
 8000490:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000496:	2300      	movs	r3, #0
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800049a:	2300      	movs	r3, #0
 800049c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 ffa3 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004ac:	f000 fdaa 	bl	8001004 <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3798      	adds	r7, #152	; 0x98
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	00101002 	.word	0x00101002

080004bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b090      	sub	sp, #64	; 0x40
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f8:	4b40      	ldr	r3, [pc, #256]	; (80005fc <MX_TIM1_Init+0x140>)
 80004fa:	4a41      	ldr	r2, [pc, #260]	; (8000600 <MX_TIM1_Init+0x144>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004fe:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <MX_TIM1_Init+0x140>)
 8000500:	2247      	movs	r2, #71	; 0x47
 8000502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <MX_TIM1_Init+0x140>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800050a:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <MX_TIM1_Init+0x140>)
 800050c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <MX_TIM1_Init+0x140>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000518:	4b38      	ldr	r3, [pc, #224]	; (80005fc <MX_TIM1_Init+0x140>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <MX_TIM1_Init+0x140>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000524:	4835      	ldr	r0, [pc, #212]	; (80005fc <MX_TIM1_Init+0x140>)
 8000526:	f003 f97f 	bl	8003828 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000530:	f000 fd68 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053e:	4619      	mov	r1, r3
 8000540:	482e      	ldr	r0, [pc, #184]	; (80005fc <MX_TIM1_Init+0x140>)
 8000542:	f004 f9d5 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800054c:	f000 fd5a 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000550:	482a      	ldr	r0, [pc, #168]	; (80005fc <MX_TIM1_Init+0x140>)
 8000552:	f003 fd51 	bl	8003ff8 <HAL_TIM_IC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800055c:	f000 fd52 	bl	8001004 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000560:	2304      	movs	r3, #4
 8000562:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000564:	2350      	movs	r3, #80	; 0x50
 8000566:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	4619      	mov	r1, r3
 800057a:	4820      	ldr	r0, [pc, #128]	; (80005fc <MX_TIM1_Init+0x140>)
 800057c:	f004 fa81 	bl	8004a82 <HAL_TIM_SlaveConfigSynchro>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000586:	f000 fd3d 	bl	8001004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800058e:	2301      	movs	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	4816      	ldr	r0, [pc, #88]	; (80005fc <MX_TIM1_Init+0x140>)
 80005a4:	f003 fff3 	bl	800458e <HAL_TIM_IC_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80005ae:	f000 fd29 	bl	8001004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80005b2:	2302      	movs	r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2204      	movs	r2, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <MX_TIM1_Init+0x140>)
 80005c4:	f003 ffe3 	bl	800458e <HAL_TIM_IC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80005ce:	f000 fd19 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <MX_TIM1_Init+0x140>)
 80005e4:	f005 f9fe 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80005ee:	f000 fd09 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	3740      	adds	r7, #64	; 0x40
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	40012c00 	.word	0x40012c00

08000604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	; 0x38
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_TIM2_Init+0xe8>)
 8000638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800063c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800063e:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <MX_TIM2_Init+0xe8>)
 8000640:	2247      	movs	r2, #71	; 0x47
 8000642:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_TIM2_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 800064a:	4b28      	ldr	r3, [pc, #160]	; (80006ec <MX_TIM2_Init+0xe8>)
 800064c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_TIM2_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_TIM2_Init+0xe8>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065e:	4823      	ldr	r0, [pc, #140]	; (80006ec <MX_TIM2_Init+0xe8>)
 8000660:	f003 f8e2 	bl	8003828 <HAL_TIM_Base_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800066a:	f000 fccb 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	4619      	mov	r1, r3
 800067a:	481c      	ldr	r0, [pc, #112]	; (80006ec <MX_TIM2_Init+0xe8>)
 800067c:	f004 f938 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000686:	f000 fcbd 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <MX_TIM2_Init+0xe8>)
 800068c:	f003 f923 	bl	80038d6 <HAL_TIM_PWM_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000696:	f000 fcb5 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <MX_TIM2_Init+0xe8>)
 80006aa:	f005 f99b 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006b4:	f000 fca6 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2208      	movs	r2, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <MX_TIM2_Init+0xe8>)
 80006d0:	f003 fffa 	bl	80046c8 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80006da:	f000 fc93 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <MX_TIM2_Init+0xe8>)
 80006e0:	f000 fd72 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 80006e4:	bf00      	nop
 80006e6:	3738      	adds	r7, #56	; 0x38
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000ec 	.word	0x200000ec

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	f005 fa00 	bl	8005b38 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 fc61 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001c0 	.word	0x200001c0
 800074c:	40004400 	.word	0x40004400

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_DMA_Init+0x48>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_DMA_Init+0x48>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DMA_Init+0x48>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200b      	movs	r0, #11
 8000774:	f000 ffad 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000778:	200b      	movs	r0, #11
 800077a:	f000 ffc6 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200c      	movs	r0, #12
 8000784:	f000 ffa5 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000788:	200c      	movs	r0, #12
 800078a:	f000 ffbe 	bl	800170a <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_GPIO_Init+0xc4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_GPIO_Init+0xc4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f001 fb45 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0xc8>)
 8000836:	f001 f9ad 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083a:	2320      	movs	r3, #32
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f001 f99e 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <USART_keyboardhit>:
{
	uint32_t echo_us = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
	distance_sensor.distance_cm = hc_sr_04_convert_us_to_cm(echo_us);
}

uint8_t USART_keyboardhit(){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	if(buffer_R.empty == buffer_R.busy){
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <USART_keyboardhit+0x20>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <USART_keyboardhit+0x20>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	d101      	bne.n	800087c <USART_keyboardhit+0x14>
		return 0;
 8000878:	2300      	movs	r3, #0
 800087a:	e000      	b.n	800087e <USART_keyboardhit+0x16>
	}
	return 1;
 800087c:	2301      	movs	r3, #1
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000010 	.word	0x20000010

0800088c <USART_getchar>:

int8_t USART_getchar(){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	int16_t character;
	if(USART_keyboardhit()){
 8000892:	f7ff ffe9 	bl	8000868 <USART_keyboardhit>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d019      	beq.n	80008d0 <USART_getchar+0x44>
		character = buffer_R.tab[buffer_R.busy];
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <USART_getchar+0x50>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <USART_getchar+0x50>)
 80008a2:	6852      	ldr	r2, [r2, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
		buffer_R.busy++;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <USART_getchar+0x50>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <USART_getchar+0x50>)
 80008b2:	6053      	str	r3, [r2, #4]
		buffer_R.busy %= buffer_R.len;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <USART_getchar+0x50>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a08      	ldr	r2, [pc, #32]	; (80008dc <USART_getchar+0x50>)
 80008ba:	6892      	ldr	r2, [r2, #8]
 80008bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80008c0:	fb01 f202 	mul.w	r2, r1, r2
 80008c4:	1a9b      	subs	r3, r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <USART_getchar+0x50>)
 80008c8:	6053      	str	r3, [r2, #4]
		return character;
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	e001      	b.n	80008d4 <USART_getchar+0x48>
	}
	else{
		return -1;
 80008d0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000010 	.word	0x20000010

080008e0 <USART_fSend>:

void USART_fSend(char *msg, ...){
 80008e0:	b40f      	push	{r0, r1, r2, r3}
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b0a4      	sub	sp, #144	; 0x90
 80008e6:	af00      	add	r7, sp, #0
	char tempDataToSend[128];
	int idx;
	va_list arglist;
	va_start(arglist, msg);
 80008e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ec:	607b      	str	r3, [r7, #4]
	vsprintf(tempDataToSend, msg, arglist);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 fd2d 	bl	8007358 <vsiprintf>
	va_end(arglist);
	idx = buffer_T.empty;
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <USART_fSend+0xfc>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800090c:	e020      	b.n	8000950 <USART_fSend+0x70>
		buffer_T.tab[idx] = tempDataToSend[i];
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <USART_fSend+0xfc>)
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000916:	4413      	add	r3, r2
 8000918:	f107 0108 	add.w	r1, r7, #8
 800091c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000920:	440a      	add	r2, r1
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	701a      	strb	r2, [r3, #0]
		idx++;
 8000926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800092a:	3301      	adds	r3, #1
 800092c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		idx %= buffer_T.len;
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <USART_fSend+0xfc>)
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000938:	fb93 f1f2 	sdiv	r1, r3, r2
 800093c:	fb01 f202 	mul.w	r2, r1, r2
 8000940:	1a9b      	subs	r3, r3, r2
 8000942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < strlen(tempDataToSend); i++){
 8000946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800094a:	3301      	adds	r3, #1
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fc43 	bl	80001e0 <strlen>
 800095a:	4602      	mov	r2, r0
 800095c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000960:	429a      	cmp	r2, r3
 8000962:	d8d4      	bhi.n	800090e <USART_fSend+0x2e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
	}
	__disable_irq();
	//Sprawdzamy czy nie trwa w tym momencie transmisja, jeśli nie to przestawiamy index i ją uruchamiamy
	if((buffer_T.busy == buffer_T.empty) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) == SET)){
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <USART_fSend+0xfc>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <USART_fSend+0xfc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d125      	bne.n	80009c0 <USART_fSend+0xe0>
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <USART_fSend+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	2b80      	cmp	r3, #128	; 0x80
 8000980:	d11e      	bne.n	80009c0 <USART_fSend+0xe0>
		buffer_T.empty = idx;
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <USART_fSend+0xfc>)
 8000984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000988:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart2,&buffer_T.tab[buffer_T.busy],1);
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <USART_fSend+0xfc>)
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <USART_fSend+0xfc>)
 8000990:	6852      	ldr	r2, [r2, #4]
 8000992:	4413      	add	r3, r2
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <USART_fSend+0x100>)
 800099a:	f005 f91b 	bl	8005bd4 <HAL_UART_Transmit_IT>
		buffer_T.busy++;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <USART_fSend+0xfc>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <USART_fSend+0xfc>)
 80009a6:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <USART_fSend+0xfc>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <USART_fSend+0xfc>)
 80009ae:	6892      	ldr	r2, [r2, #8]
 80009b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009b4:	fb01 f202 	mul.w	r2, r1, r2
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <USART_fSend+0xfc>)
 80009bc:	6053      	str	r3, [r2, #4]
 80009be:	e003      	b.n	80009c8 <USART_fSend+0xe8>
	}
	else{
		buffer_T.empty = idx;
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <USART_fSend+0xfc>)
 80009c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009c6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009c8:	b662      	cpsie	i
}
 80009ca:	bf00      	nop
	}
	__enable_irq();
}
 80009cc:	bf00      	nop
 80009ce:	3790      	adds	r7, #144	; 0x90
 80009d0:	46bd      	mov	sp, r7
 80009d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009d6:	b004      	add	sp, #16
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000000 	.word	0x20000000
 80009e0:	200001c0 	.word	0x200001c0

080009e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 && buffer_T.busy != buffer_T.empty){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <HAL_UART_TxCpltCallback+0x60>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d123      	bne.n	8000a3c <HAL_UART_TxCpltCallback+0x58>
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d01d      	beq.n	8000a3c <HAL_UART_TxCpltCallback+0x58>
		uint8_t character = buffer_T.tab[buffer_T.busy];
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a06:	6852      	ldr	r2, [r2, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	73fb      	strb	r3, [r7, #15]
		buffer_T.busy++;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a16:	6053      	str	r3, [r2, #4]
		buffer_T.busy %= buffer_T.len;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a1e:	6892      	ldr	r2, [r2, #8]
 8000a20:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a24:	fb01 f202 	mul.w	r2, r1, r2
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_UART_TxCpltCallback+0x64>)
 8000a2c:	6053      	str	r3, [r2, #4]
		HAL_UART_Transmit_IT(&huart2,&character,1);
 8000a2e:	f107 030f 	add.w	r3, r7, #15
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <HAL_UART_TxCpltCallback+0x60>)
 8000a38:	f005 f8cc 	bl	8005bd4 <HAL_UART_Transmit_IT>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001c0 	.word	0x200001c0
 8000a48:	20000000 	.word	0x20000000

08000a4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_UART_RxCpltCallback+0x4c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d119      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x44>
			buffer_R.empty++;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a64:	6013      	str	r3, [r2, #0]
			buffer_R.empty %= buffer_R.len;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a6c:	6892      	ldr	r2, [r2, #8]
 8000a6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a72:	fb01 f202 	mul.w	r2, r1, r2
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a7a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,&buffer_R.tab[buffer_R.empty],1);
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_UART_RxCpltCallback+0x50>)
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <HAL_UART_RxCpltCallback+0x4c>)
 8000a8c:	f005 f900 	bl	8005c90 <HAL_UART_Receive_IT>
		}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001c0 	.word	0x200001c0
 8000a9c:	20000010 	.word	0x20000010

08000aa0 <getFrame>:

int16_t getFrame(char *bufferedFrame) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	static int16_t numberOfChars = -1;
	static char frameBuf[frameMaxSize - 2];
	int16_t charFromFrame;
    int16_t ret;
	static uint8_t tildeOccured = 0;
	if ((charFromFrame = USART_getchar()) != -1) {
 8000aa8:	f7ff fef0 	bl	800088c <USART_getchar>
 8000aac:	4603      	mov	r3, r0
 8000aae:	81fb      	strh	r3, [r7, #14]
 8000ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	f000 808c 	beq.w	8000bd4 <getFrame+0x134>
		if (charFromFrame == startFrame) {
 8000abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac0:	2b7b      	cmp	r3, #123	; 0x7b
 8000ac2:	d106      	bne.n	8000ad2 <getFrame+0x32>
			numberOfChars = 0;
 8000ac4:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <getFrame+0x140>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	801a      	strh	r2, [r3, #0]
			tildeOccured = 0;
 8000aca:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <getFrame+0x144>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e080      	b.n	8000bd4 <getFrame+0x134>
		}
		else if (numberOfChars >= 0) {
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <getFrame+0x140>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db7b      	blt.n	8000bd4 <getFrame+0x134>
			if (tildeOccured == 1) {
 8000adc:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <getFrame+0x144>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d13a      	bne.n	8000b5a <getFrame+0xba>
				switch (charFromFrame) {
 8000ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ae8:	2b60      	cmp	r3, #96	; 0x60
 8000aea:	d006      	beq.n	8000afa <getFrame+0x5a>
 8000aec:	2b60      	cmp	r3, #96	; 0x60
 8000aee:	dc2b      	bgt.n	8000b48 <getFrame+0xa8>
 8000af0:	2b5b      	cmp	r3, #91	; 0x5b
 8000af2:	d00f      	beq.n	8000b14 <getFrame+0x74>
 8000af4:	2b5d      	cmp	r3, #93	; 0x5d
 8000af6:	d01a      	beq.n	8000b2e <getFrame+0x8e>
 8000af8:	e026      	b.n	8000b48 <getFrame+0xa8>
					case codingChar:
						frameBuf[numberOfChars++] = codingChar;
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <getFrame+0x140>)
 8000afc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b00:	b293      	uxth	r3, r2
 8000b02:	3301      	adds	r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b219      	sxth	r1, r3
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <getFrame+0x140>)
 8000b0a:	8019      	strh	r1, [r3, #0]
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <getFrame+0x148>)
 8000b0e:	2160      	movs	r1, #96	; 0x60
 8000b10:	5499      	strb	r1, [r3, r2]
						break;
 8000b12:	e01e      	b.n	8000b52 <getFrame+0xb2>
					case codeStartcharFromFrame:
						frameBuf[numberOfChars++] = startFrame;
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <getFrame+0x140>)
 8000b16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b1a:	b293      	uxth	r3, r2
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b219      	sxth	r1, r3
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <getFrame+0x140>)
 8000b24:	8019      	strh	r1, [r3, #0]
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <getFrame+0x148>)
 8000b28:	217b      	movs	r1, #123	; 0x7b
 8000b2a:	5499      	strb	r1, [r3, r2]
						break;
 8000b2c:	e011      	b.n	8000b52 <getFrame+0xb2>
					case codeEndcharFromFrame:
						frameBuf[numberOfChars++] = endFrame;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <getFrame+0x140>)
 8000b30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b34:	b293      	uxth	r3, r2
 8000b36:	3301      	adds	r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b219      	sxth	r1, r3
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <getFrame+0x140>)
 8000b3e:	8019      	strh	r1, [r3, #0]
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <getFrame+0x148>)
 8000b42:	217d      	movs	r1, #125	; 0x7d
 8000b44:	5499      	strb	r1, [r3, r2]
						break;
 8000b46:	e004      	b.n	8000b52 <getFrame+0xb2>
					default:
						numberOfChars = -1;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <getFrame+0x140>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	801a      	strh	r2, [r3, #0]
						break;
 8000b50:	bf00      	nop
				}
				tildeOccured = 0;
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <getFrame+0x144>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e032      	b.n	8000bc0 <getFrame+0x120>
			}
			else {
				if (charFromFrame == codingChar) {
 8000b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b5e:	2b60      	cmp	r3, #96	; 0x60
 8000b60:	d103      	bne.n	8000b6a <getFrame+0xca>
					tildeOccured = 1;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <getFrame+0x144>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e02a      	b.n	8000bc0 <getFrame+0x120>
				}
				else if (charFromFrame == endFrame) {
 8000b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6e:	2b7d      	cmp	r3, #125	; 0x7d
 8000b70:	d115      	bne.n	8000b9e <getFrame+0xfe>
					ret = numberOfChars;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <getFrame+0x140>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	81bb      	strh	r3, [r7, #12]
					numberOfChars = -1;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <getFrame+0x140>)
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	801a      	strh	r2, [r3, #0]
					if (ret >= (frameMinSize-2)) {
 8000b80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	dd1b      	ble.n	8000bc0 <getFrame+0x120>
						memcpy(bufferedFrame, frameBuf, ret + 1);
 8000b88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <getFrame+0x148>)
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f006 fc30 	bl	80073f8 <memcpy>
						return ret;
 8000b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b9c:	e01c      	b.n	8000bd8 <getFrame+0x138>
					}
				}
				else {
					frameBuf[numberOfChars] = charFromFrame;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <getFrame+0x140>)
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	b2d9      	uxtb	r1, r3
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <getFrame+0x148>)
 8000bac:	5499      	strb	r1, [r3, r2]
					numberOfChars++;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <getFrame+0x140>)
 8000bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <getFrame+0x140>)
 8000bbe:	801a      	strh	r2, [r3, #0]
				}
			}
			if (numberOfChars >= (frameMaxSize - 2)) {
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <getFrame+0x140>)
 8000bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000bca:	dd03      	ble.n	8000bd4 <getFrame+0x134>
				numberOfChars = -1;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <getFrame+0x140>)
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000024 	.word	0x20000024
 8000be4:	2000066c 	.word	0x2000066c
 8000be8:	20000670 	.word	0x20000670

08000bec <analizeFrame>:


uint8_t analizeFrame(char *bufferedFrame, int16_t len, char *sender_add) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	817b      	strh	r3, [r7, #10]
	uint8_t intCRC;
	uint16_t commandLength;
	uint8_t i;
	uint8_t crc_temp;

	if (strncmp(bufferedFrame, device_address, 3) == 0) {
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4947      	ldr	r1, [pc, #284]	; (8000d1c <analizeFrame+0x130>)
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f006 fbbc 	bl	800737c <strncmp>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8082 	bne.w	8000d10 <analizeFrame+0x124>
		//Pobranie i sprawdzenie nadawcy
		memcpy(sender_add, bufferedFrame + 3, 3);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3303      	adds	r3, #3
 8000c10:	2203      	movs	r2, #3
 8000c12:	4619      	mov	r1, r3
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f006 fbef 	bl	80073f8 <memcpy>
		for (i = 0; i < 3; ++i) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	77fb      	strb	r3, [r7, #31]
 8000c1e:	e01c      	b.n	8000c5a <analizeFrame+0x6e>
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b40      	cmp	r3, #64	; 0x40
 8000c2a:	d905      	bls.n	8000c38 <analizeFrame+0x4c>
 8000c2c:	7ffb      	ldrb	r3, [r7, #31]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b5a      	cmp	r3, #90	; 0x5a
 8000c36:	d90d      	bls.n	8000c54 <analizeFrame+0x68>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c38:	7ffb      	ldrb	r3, [r7, #31]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
			if (!((sender_add[i] >= 0x41 && sender_add[i] <= 0x5A)
 8000c40:	2b60      	cmp	r3, #96	; 0x60
 8000c42:	d905      	bls.n	8000c50 <analizeFrame+0x64>
					|| (sender_add[i] >= 0x61 && sender_add[i] <= 0x7A))) {
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b7a      	cmp	r3, #122	; 0x7a
 8000c4e:	d901      	bls.n	8000c54 <analizeFrame+0x68>
				return 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e05e      	b.n	8000d12 <analizeFrame+0x126>
		for (i = 0; i < 3; ++i) {
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	3301      	adds	r3, #1
 8000c58:	77fb      	strb	r3, [r7, #31]
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d9df      	bls.n	8000c20 <analizeFrame+0x34>
			}
		}
		//Pobranie i sprawdzenie zakresu znaków (dla crc)
		//string crc - wartość crc zapisana w postaci znakowej np."25"
		memcpy(stringCRC, bufferedFrame + len - 2, 2);
 8000c60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c64:	3b02      	subs	r3, #2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4413      	add	r3, r2
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	82bb      	strh	r3, [r7, #20]
		stringCRC[2] = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < 2; ++i) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	77fb      	strb	r3, [r7, #31]
 8000c78:	e012      	b.n	8000ca0 <analizeFrame+0xb4>
			if (!(stringCRC[i] >= 0x30 && stringCRC[i] <= 0x39)) {
 8000c7a:	7ffb      	ldrb	r3, [r7, #31]
 8000c7c:	3320      	adds	r3, #32
 8000c7e:	443b      	add	r3, r7
 8000c80:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c84:	2b2f      	cmp	r3, #47	; 0x2f
 8000c86:	d906      	bls.n	8000c96 <analizeFrame+0xaa>
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	3320      	adds	r3, #32
 8000c8c:	443b      	add	r3, r7
 8000c8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000c92:	2b39      	cmp	r3, #57	; 0x39
 8000c94:	d901      	bls.n	8000c9a <analizeFrame+0xae>
				return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e03b      	b.n	8000d12 <analizeFrame+0x126>
		for (i = 0; i < 2; ++i) {
 8000c9a:	7ffb      	ldrb	r3, [r7, #31]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	77fb      	strb	r3, [r7, #31]
 8000ca0:	7ffb      	ldrb	r3, [r7, #31]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d9e9      	bls.n	8000c7a <analizeFrame+0x8e>
			}
		}
		//Pobranie danych
		//Pobieranie długości danych (długość ramki - stałe elementy)
		commandLength = len - 8;
 8000ca6:	897b      	ldrh	r3, [r7, #10]
 8000ca8:	3b08      	subs	r3, #8
 8000caa:	83bb      	strh	r3, [r7, #28]
		memcpy(bufferedFrame, bufferedFrame + 6, commandLength);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3306      	adds	r3, #6
 8000cb0:	8bba      	ldrh	r2, [r7, #28]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f006 fb9f 	bl	80073f8 <memcpy>
		//string null-terminated na końcu
		bufferedFrame[commandLength] = 0;
 8000cba:	8bbb      	ldrh	r3, [r7, #28]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

		//Sprawdzenie konkretnych wartości CRC
		intCRC = atoi(stringCRC);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 fa7f 	bl	80071cc <atoi>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	76fb      	strb	r3, [r7, #27]
		if ((crc_temp = CRC_100(bufferedFrame, commandLength)) != intCRC) {
 8000cd2:	8bbb      	ldrh	r3, [r7, #28]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f000 f925 	bl	8000f28 <CRC_100>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	76bb      	strb	r3, [r7, #26]
 8000ce2:	7eba      	ldrb	r2, [r7, #26]
 8000ce4:	7efb      	ldrb	r3, [r7, #27]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d010      	beq.n	8000d0c <analizeFrame+0x120>
			sprintf(wrong, "WRONG_CRC_%02d;", crc_temp);
 8000cea:	7ebb      	ldrb	r3, [r7, #26]
 8000cec:	461a      	mov	r2, r3
 8000cee:	490c      	ldr	r1, [pc, #48]	; (8000d20 <analizeFrame+0x134>)
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <analizeFrame+0x138>)
 8000cf2:	f006 fafb 	bl	80072ec <siprintf>
			sendFrame(sender_add, wrong, strlen(wrong));
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <analizeFrame+0x138>)
 8000cf8:	f7ff fa72 	bl	80001e0 <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4908      	ldr	r1, [pc, #32]	; (8000d24 <analizeFrame+0x138>)
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f810 	bl	8000d28 <sendFrame>
			return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e002      	b.n	8000d12 <analizeFrame+0x126>
		}
		return 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <analizeFrame+0x126>
	}
	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08007cdc 	.word	0x08007cdc
 8000d20:	08007cb8 	.word	0x08007cb8
 8000d24:	20000648 	.word	0x20000648

08000d28 <sendFrame>:

void sendFrame(char dst[4], char *com, uint8_t com_len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d34:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000d38:	6018      	str	r0, [r3, #0]
 8000d3a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d42:	6019      	str	r1, [r3, #0]
 8000d44:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d48:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d4c:	701a      	strb	r2, [r3, #0]
	char frameToSend[frameMin + 510 + 1];
	uint16_t codeCommandLength;
	uint8_t crc;
	char codeCommand[510];

	codeCommandLength = code_Command(com, codeCommand, com_len);
 8000d4e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d52:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	f107 0114 	add.w	r1, r7, #20
 8000d5c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	f000 f87f 	bl	8000e68 <code_Command>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

	frameToSend[0] = startFrame;
 8000d70:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d74:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000d78:	227b      	movs	r2, #123	; 0x7b
 8000d7a:	701a      	strb	r2, [r3, #0]
	memcpy(frameToSend + 1, dst, 3);
 8000d7c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d80:	3301      	adds	r3, #1
 8000d82:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000d86:	f2a2 4114 	subw	r1, r2, #1044	; 0x414
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	6809      	ldr	r1, [r1, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 fb32 	bl	80073f8 <memcpy>
	memcpy(frameToSend + 1 + 3, device_address, 3);
 8000d94:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4930      	ldr	r1, [pc, #192]	; (8000e60 <sendFrame+0x138>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fb2a 	bl	80073f8 <memcpy>

	memcpy(frameToSend + 1 + 3 + 3, codeCommand, codeCommandLength);
 8000da4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000da8:	3307      	adds	r3, #7
 8000daa:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000dae:	f107 0114 	add.w	r1, r7, #20
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fb20 	bl	80073f8 <memcpy>

	//długość przed zakodowaniem zakodowaniem znaków
	crc = CRC_100(com, com_len);
 8000db8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000dbc:	f2a3 4319 	subw	r3, r3, #1049	; 0x419
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000dc6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000dca:	4611      	mov	r1, r2
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	f000 f8ab 	bl	8000f28 <CRC_100>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	// 78/10 =7
	// 7+48 = 55
	// "7"
	frameToSend[1 + 3 + 3 + codeCommandLength] = crc / 10 + 48;
 8000dd8:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <sendFrame+0x13c>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dea:	3307      	adds	r3, #7
 8000dec:	3230      	adds	r2, #48	; 0x30
 8000dee:	b2d1      	uxtb	r1, r2
 8000df0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000df4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000df8:	54d1      	strb	r1, [r2, r3]
	// 78 % 10 = 8
	// 8 + 48 = 56
	// "8"
	frameToSend[1 + 3 + 3  + codeCommandLength + 1] = crc % 10 + 48;
 8000dfa:	f897 241d 	ldrb.w	r2, [r7, #1053]	; 0x41d
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <sendFrame+0x13c>)
 8000e00:	fba3 1302 	umull	r1, r3, r3, r2
 8000e04:	08d9      	lsrs	r1, r3, #3
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e16:	3308      	adds	r3, #8
 8000e18:	3230      	adds	r2, #48	; 0x30
 8000e1a:	b2d1      	uxtb	r1, r2
 8000e1c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e20:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e24:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 2] = endFrame;
 8000e26:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e2a:	3309      	adds	r3, #9
 8000e2c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e30:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e34:	217d      	movs	r1, #125	; 0x7d
 8000e36:	54d1      	strb	r1, [r2, r3]
	frameToSend[1 + 3 + 3  + codeCommandLength + 3] = 0;
 8000e38:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000e3c:	330a      	adds	r3, #10
 8000e3e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8000e42:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8000e46:	2100      	movs	r1, #0
 8000e48:	54d1      	strb	r1, [r2, r3]

	USART_fSend(frameToSend);
 8000e4a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fd46 	bl	80008e0 <USART_fSend>
}
 8000e54:	bf00      	nop
 8000e56:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08007cdc 	.word	0x08007cdc
 8000e64:	cccccccd 	.word	0xcccccccd

08000e68 <code_Command>:

//Przerobienie znaków początku, końca i znaku kodującego na nadające się do przesyłania w ramce
int16_t code_Command(char *src, char *dst, uint8_t com_len) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4613      	mov	r3, r2
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint16_t i;
	uint16_t j;
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	82fb      	strh	r3, [r7, #22]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	82bb      	strh	r3, [r7, #20]
 8000e7e:	e045      	b.n	8000f0c <code_Command+0xa4>

		switch (src[i]) {
 8000e80:	8afb      	ldrh	r3, [r7, #22]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b7d      	cmp	r3, #125	; 0x7d
 8000e8a:	d022      	beq.n	8000ed2 <code_Command+0x6a>
 8000e8c:	2b7d      	cmp	r3, #125	; 0x7d
 8000e8e:	dc2e      	bgt.n	8000eee <code_Command+0x86>
 8000e90:	2b60      	cmp	r3, #96	; 0x60
 8000e92:	d002      	beq.n	8000e9a <code_Command+0x32>
 8000e94:	2b7b      	cmp	r3, #123	; 0x7b
 8000e96:	d00e      	beq.n	8000eb6 <code_Command+0x4e>
 8000e98:	e029      	b.n	8000eee <code_Command+0x86>
		case codingChar:
			dst[j++] = codingChar;
 8000e9a:	8abb      	ldrh	r3, [r7, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	82ba      	strh	r2, [r7, #20]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2260      	movs	r2, #96	; 0x60
 8000ea8:	701a      	strb	r2, [r3, #0]
			dst[j] = codingChar;
 8000eaa:	8abb      	ldrh	r3, [r7, #20]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2260      	movs	r2, #96	; 0x60
 8000eb2:	701a      	strb	r2, [r3, #0]
			break;
 8000eb4:	e024      	b.n	8000f00 <code_Command+0x98>
		case startFrame:
			dst[j++] = codingChar;
 8000eb6:	8abb      	ldrh	r3, [r7, #20]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	82ba      	strh	r2, [r7, #20]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2260      	movs	r2, #96	; 0x60
 8000ec4:	701a      	strb	r2, [r3, #0]
			dst[j] = '[';
 8000ec6:	8abb      	ldrh	r3, [r7, #20]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	4413      	add	r3, r2
 8000ecc:	225b      	movs	r2, #91	; 0x5b
 8000ece:	701a      	strb	r2, [r3, #0]
			break;
 8000ed0:	e016      	b.n	8000f00 <code_Command+0x98>
		case endFrame:
			dst[j++] = codingChar;
 8000ed2:	8abb      	ldrh	r3, [r7, #20]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	82ba      	strh	r2, [r7, #20]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	2260      	movs	r2, #96	; 0x60
 8000ee0:	701a      	strb	r2, [r3, #0]
			dst[j] = ']';
 8000ee2:	8abb      	ldrh	r3, [r7, #20]
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	225d      	movs	r2, #93	; 0x5d
 8000eea:	701a      	strb	r2, [r3, #0]
			break;
 8000eec:	e008      	b.n	8000f00 <code_Command+0x98>
		default:
			dst[j] = src[i];
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	8abb      	ldrh	r3, [r7, #20]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	440b      	add	r3, r1
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	701a      	strb	r2, [r3, #0]
			break;
 8000efe:	bf00      	nop
	for (i = 0, j = 0; i < com_len; ++i, ++j) {
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	3301      	adds	r3, #1
 8000f04:	82fb      	strh	r3, [r7, #22]
 8000f06:	8abb      	ldrh	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	82bb      	strh	r3, [r7, #20]
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	8afa      	ldrh	r2, [r7, #22]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3b4      	bcc.n	8000e80 <code_Command+0x18>
		}
	}
	return j;
 8000f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <CRC_100>:

uint8_t CRC_100(char *src, uint8_t len) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t temp = src[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e009      	b.n	8000f54 <CRC_100+0x2c>
		//xor, ponieważ or da nam same 1, and same 0
		temp ^= src[i];
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	4053      	eors	r3, r2
 8000f4c:	73bb      	strb	r3, [r7, #14]
	for (i = 1; i < len; ++i) {
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3f1      	bcc.n	8000f40 <CRC_100+0x18>
	}
	temp %= 100;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <CRC_100+0x58>)
 8000f60:	fba2 1203 	umull	r1, r2, r2, r3
 8000f64:	0952      	lsrs	r2, r2, #5
 8000f66:	2164      	movs	r1, #100	; 0x64
 8000f68:	fb01 f202 	mul.w	r2, r1, r2
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	73bb      	strb	r3, [r7, #14]
	return temp;
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	51eb851f 	.word	0x51eb851f

08000f84 <analizeCommend>:

void analizeCommend(char* com, uint8_t len, char* sender_add) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	72fb      	strb	r3, [r7, #11]
	if (strncmp(com, "GetSurvey()", (unsigned)11) == 0) {
 8000f92:	220b      	movs	r2, #11
 8000f94:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <analizeCommend+0x70>)
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f006 f9f0 	bl	800737c <strncmp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d123      	bne.n	8000fea <analizeCommend+0x66>
		//GetSurvey();
		char stringDistance[20];
		sprintf(stringDistance, "%lu", (unsigned long)distance_sensor.distance_cm);
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <analizeCommend+0x74>)
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4914      	ldr	r1, [pc, #80]	; (8000ffc <analizeCommend+0x78>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 f99d 	bl	80072ec <siprintf>
		strcat(stringDistance, "cm");
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f912 	bl	80001e0 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <analizeCommend+0x7c>)
 8000fc8:	8811      	ldrh	r1, [r2, #0]
 8000fca:	7892      	ldrb	r2, [r2, #2]
 8000fcc:	8019      	strh	r1, [r3, #0]
 8000fce:	709a      	strb	r2, [r3, #2]
		sendFrame(sender_add, stringDistance, strlen(stringDistance));
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f903 	bl	80001e0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fe9f 	bl	8000d28 <sendFrame>
	}
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	08007cc8 	.word	0x08007cc8
 8000ff8:	2000065c 	.word	0x2000065c
 8000ffc:	08007cd4 	.word	0x08007cd4
 8001000:	08007cd8 	.word	0x08007cd8

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x44>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x44>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x44>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001046:	2007      	movs	r0, #7
 8001048:	f000 fb38 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_TIM_Base_MspInit+0x158>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d15b      	bne.n	8001132 <HAL_TIM_Base_MspInit+0xda>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010bc:	2306      	movs	r3, #6
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 fd63 	bl	8001b94 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010d0:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <HAL_TIM_Base_MspInit+0x164>)
 80010d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010da:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010f8:	2220      	movs	r2, #32
 80010fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 8001106:	f000 fb1a 	bl	800173e <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_TIM_Base_MspInit+0xbc>
    {
      Error_Handler();
 8001110:	f7ff ff78 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_TIM_Base_MspInit+0x160>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	201b      	movs	r0, #27
 8001126:	f000 fad4 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800112a:	201b      	movs	r0, #27
 800112c:	f000 faed 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001130:	e039      	b.n	80011a6 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113a:	d134      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	61d3      	str	r3, [r2, #28]
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_TIM_Base_MspInit+0x15c>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_TIM_Base_MspInit+0x16c>)
 8001158:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 800115c:	2210      	movs	r2, #16
 800115e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 800116e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001172:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 8001176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 800117e:	2220      	movs	r2, #32
 8001180:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 8001184:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001188:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 800118c:	f000 fad7 	bl	800173e <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 8001196:	f7ff ff35 	bl	8001004 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_TIM_Base_MspInit+0x168>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012c00 	.word	0x40012c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	20000138 	.word	0x20000138
 80011bc:	4002001c 	.word	0x4002001c
 80011c0:	2000017c 	.word	0x2000017c
 80011c4:	40020008 	.word	0x40020008

080011c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d11d      	bne.n	8001226 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_TIM_MspPostInit+0x68>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_TIM_MspPostInit+0x68>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	6153      	str	r3, [r2, #20]
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_TIM_MspPostInit+0x68>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA9     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 8001202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001214:	230a      	movs	r3, #10
 8001216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fcb7 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_UART_MspInit+0x8c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d130      	bne.n	80012b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_UART_MspInit+0x90>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_UART_MspInit+0x90>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_UART_MspInit+0x90>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f000 fc76 	bl	8001b94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2026      	movs	r0, #38	; 0x26
 80012ae:	f000 fa10 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b2:	2026      	movs	r0, #38	; 0x26
 80012b4:	f000 fa29 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40004400 	.word	0x40004400
 80012c4:	40021000 	.word	0x40021000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8e2 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Channel1_IRQHandler+0x10>)
 8001322:	f000 fb29 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000017c 	.word	0x2000017c

08001330 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Channel2_IRQHandler+0x10>)
 8001336:	f000 fb1f 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000138 	.word	0x20000138

08001344 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM1_CC_IRQHandler+0x10>)
 800134a:	f003 f801 	bl	8004350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000a0 	.word	0x200000a0

08001358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <USART2_IRQHandler+0x10>)
 800135e:	f004 fcdb 	bl	8005d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001c0 	.word	0x200001c0

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f006 f800 	bl	80073a0 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20010000 	.word	0x20010000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000778 	.word	0x20000778
 80013d4:	200008c8 	.word	0x200008c8

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001400:	f7ff ffea 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <LoopForever+0x6>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	; (800143c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <LoopForever+0xe>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	; (8001448 <LoopForever+0x16>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f005 ffbf 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142e:	f7fe ff81 	bl	8000334 <main>

08001432 <LoopForever>:

LoopForever:
    b LoopForever
 8001432:	e7fe      	b.n	8001432 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001434:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001440:	08007e54 	.word	0x08007e54
  ldr r2, =_sbss
 8001444:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001448:	200008c8 	.word	0x200008c8

0800144c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_2_IRQHandler>
	...

08001450 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x28>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x28>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f92b 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fdd0 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40022000 	.word	0x40022000

0800147c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f943 	bl	8001726 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f90b 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000028 	.word	0x20000028
 80014d4:	20000030 	.word	0x20000030
 80014d8:	2000002c 	.word	0x2000002c

080014dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000030 	.word	0x20000030
 8001500:	2000077c 	.word	0x2000077c

08001504 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;  
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000077c 	.word	0x2000077c

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e037      	b.n	80017c4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800176a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800176e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f9b8 	bl	8001b1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}  
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_DMA_Start_IT+0x20>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e04a      	b.n	8001882 <HAL_DMA_Start_IT+0xb6>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d13a      	bne.n	8001874 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2202      	movs	r2, #2
 8001802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f94b 	bl	8001abe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 020e 	orr.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e00f      	b.n	8001862 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 020a 	orr.w	r2, r2, #10
 8001850:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0204 	bic.w	r2, r2, #4
 8001860:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e005      	b.n	8001880 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800187c:	2302      	movs	r3, #2
 800187e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001880:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001898:	2b02      	cmp	r3, #2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e020      	b.n	80018f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 020e 	bic.w	r2, r2, #14
 80018bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190e:	2b02      	cmp	r3, #2
 8001910:	d005      	beq.n	800191e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e027      	b.n	800196e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 020e 	bic.w	r2, r2, #14
 800192c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
    } 
  }
  return status;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2204      	movs	r2, #4
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d024      	beq.n	80019ea <HAL_DMA_IRQHandler+0x72>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01f      	beq.n	80019ea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	2104      	movs	r1, #4
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06a      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80019e8:	e065      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2202      	movs	r2, #2
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d02c      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xdc>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d027      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10b      	bne.n	8001a2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 020a 	bic.w	r2, r2, #10
 8001a20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a32:	2102      	movs	r1, #2
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d035      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a52:	e030      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2208      	movs	r2, #8
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d028      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d023      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 020e 	bic.w	r2, r2, #14
 8001a7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
    }
  }
}  
 8001ab4:	e7ff      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x13e>
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d108      	bne.n	8001afe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001afc:	e007      	b.n	8001b0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	60da      	str	r2, [r3, #12]
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <DMA_CalcBaseAndBitshift+0x60>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d80f      	bhi.n	8001b50 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <DMA_CalcBaseAndBitshift+0x64>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <DMA_CalcBaseAndBitshift+0x68>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b4e:	e00e      	b.n	8001b6e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <DMA_CalcBaseAndBitshift+0x70>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <DMA_CalcBaseAndBitshift+0x68>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	009a      	lsls	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <DMA_CalcBaseAndBitshift+0x74>)
 8001b6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40020407 	.word	0x40020407
 8001b80:	bffdfff8 	.word	0xbffdfff8
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	bffdfbf8 	.word	0xbffdfbf8
 8001b90:	40020400 	.word	0x40020400

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e160      	b.n	8001e66 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8152 	beq.w	8001e60 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d005      	beq.n	8001bd4 <HAL_GPIO_Init+0x40>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d130      	bne.n	8001c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 0201 	and.w	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d017      	beq.n	8001c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d123      	bne.n	8001cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	6939      	ldr	r1, [r7, #16]
 8001cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0203 	and.w	r2, r3, #3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80ac 	beq.w	8001e60 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d20:	4a59      	ldr	r2, [pc, #356]	; (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4a:	d025      	beq.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a4f      	ldr	r2, [pc, #316]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d01f      	beq.n	8001d94 <HAL_GPIO_Init+0x200>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_GPIO_Init+0x2fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d019      	beq.n	8001d90 <HAL_GPIO_Init+0x1fc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_GPIO_Init+0x300>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1f8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1f4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x308>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1f0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x30c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	e00c      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d80:	2307      	movs	r3, #7
 8001d82:	e00a      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d84:	2305      	movs	r3, #5
 8001d86:	e008      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e006      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e004      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e002      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_GPIO_Init+0x206>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001daa:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e06:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f ae97 	bne.w	8001ba4 <HAL_GPIO_Init+0x10>
  }
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	48001800 	.word	0x48001800
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f001 b83a 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 816f 	beq.w	80021f2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f14:	4bb5      	ldr	r3, [pc, #724]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4bb2      	ldr	r3, [pc, #712]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d15c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x10e>
 8001f2c:	4baf      	ldr	r3, [pc, #700]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d155      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x10e>
 8001f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0x94>
 8001f66:	4ba1      	ldr	r3, [pc, #644]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f88:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f94:	4b95      	ldr	r3, [pc, #596]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001fa0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fa4:	fa92 f2a2 	rbit	r2, r2
 8001fa8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001fac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f042 0220 	orr.w	r2, r2, #32
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f002 021f 	and.w	r2, r2, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8111 	beq.w	80021f0 <HAL_RCC_OscConfig+0x318>
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 8108 	bne.w	80021f0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f000 bfc6 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x12e>
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7b      	ldr	r2, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e036      	b.n	8002074 <HAL_RCC_OscConfig+0x19c>
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x158>
 8002016:	4b75      	ldr	r3, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a74      	ldr	r2, [pc, #464]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b72      	ldr	r3, [pc, #456]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a71      	ldr	r2, [pc, #452]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e021      	b.n	8002074 <HAL_RCC_OscConfig+0x19c>
 8002030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x184>
 8002042:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a66      	ldr	r2, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x19c>
 800205c:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a62      	ldr	r2, [pc, #392]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b60      	ldr	r3, [pc, #384]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5f      	ldr	r2, [pc, #380]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002072:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d059      	beq.n	8002138 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fa3e 	bl	8001504 <HAL_GetTick>
 8002088:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff fa39 	bl	8001504 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d902      	bls.n	80020a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	f000 bf67 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80020b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x22a>
 80020d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80020ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002106:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800210a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002116:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f042 0220 	orr.w	r2, r2, #32
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 021f 	and.w	r2, r2, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ab      	beq.n	800208e <HAL_RCC_OscConfig+0x1b6>
 8002136:	e05c      	b.n	80021f2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f9e4 	bl	8001504 <HAL_GetTick>
 800213c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002142:	f7ff f9df 	bl	8001504 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d902      	bls.n	8002158 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	f000 bf0d 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800216c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0x2b2>
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x2de>
 800218a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800219e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_RCC_OscConfig+0x314>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80021be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80021ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ab      	bne.n	8002142 <HAL_RCC_OscConfig+0x26a>
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_OscConfig+0x31a>
 80021ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 817f 	beq.w	8002506 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002208:	4ba7      	ldr	r3, [pc, #668]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002214:	4ba4      	ldr	r3, [pc, #656]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d173      	bne.n	8002308 <HAL_RCC_OscConfig+0x430>
 8002220:	4ba1      	ldr	r3, [pc, #644]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800222c:	d16c      	bne.n	8002308 <HAL_RCC_OscConfig+0x430>
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002240:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0x386>
 8002258:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	e013      	b.n	8002286 <HAL_RCC_OscConfig+0x3ae>
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002276:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002282:	4b89      	ldr	r3, [pc, #548]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2202      	movs	r2, #2
 8002288:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800228c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002298:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f002 021f 	and.w	r2, r2, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCC_OscConfig+0x3f6>
 80022b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d002      	beq.n	80022ce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f000 be52 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	21f8      	movs	r1, #248	; 0xf8
 80022e4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80022ec:	fa91 f1a1 	rbit	r1, r1
 80022f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80022f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022f8:	fab1 f181 	clz	r1, r1
 80022fc:	b2c9      	uxtb	r1, r1
 80022fe:	408b      	lsls	r3, r1
 8002300:	4969      	ldr	r1, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e0fe      	b.n	8002506 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8088 	beq.w	800242a <HAL_RCC_OscConfig+0x552>
 800231a:	2301      	movs	r3, #1
 800231c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800232c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff f8dd 	bl	8001504 <HAL_GetTick>
 800234a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff f8d8 	bl	8001504 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d902      	bls.n	8002366 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	f000 be06 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002378:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0x4be>
 8002390:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e013      	b.n	80023be <HAL_RCC_OscConfig+0x4e6>
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2202      	movs	r2, #2
 80023c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80023c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80023d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0af      	beq.n	8002350 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	21f8      	movs	r1, #248	; 0xf8
 8002406:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800240e:	fa91 f1a1 	rbit	r1, r1
 8002412:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002416:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800241a:	fab1 f181 	clz	r1, r1
 800241e:	b2c9      	uxtb	r1, r1
 8002420:	408b      	lsls	r3, r1
 8002422:	4921      	ldr	r1, [pc, #132]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	e06d      	b.n	8002506 <HAL_RCC_OscConfig+0x62e>
 800242a:	2301      	movs	r3, #1
 800242c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800243c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	461a      	mov	r2, r3
 8002452:	2300      	movs	r3, #0
 8002454:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff f855 	bl	8001504 <HAL_GetTick>
 800245a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002460:	f7ff f850 	bl	8001504 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d902      	bls.n	8002476 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	f000 bd7e 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002488:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x5d4>
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <HAL_RCC_OscConfig+0x5d0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e016      	b.n	80024d4 <HAL_RCC_OscConfig+0x5fc>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024d0:	4bbf      	ldr	r3, [pc, #764]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2202      	movs	r2, #2
 80024d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80024e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ac      	bne.n	8002460 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8113 	beq.w	8002742 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d07c      	beq.n	8002626 <HAL_RCC_OscConfig+0x74e>
 800252c:	2301      	movs	r3, #1
 800252e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800253e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4ba2      	ldr	r3, [pc, #648]	; (80027d4 <HAL_RCC_OscConfig+0x8fc>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	2301      	movs	r3, #1
 8002554:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe ffd5 	bl	8001504 <HAL_GetTick>
 800255a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe ffd0 	bl	8001504 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bcfe 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002580:	fa93 f2a3 	rbit	r2, r3
 8002584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002588:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002596:	2202      	movs	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ba:	2202      	movs	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 80025d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025e2:	2102      	movs	r1, #2
 80025e4:	6019      	str	r1, [r3, #0]
 80025e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f1a3 	rbit	r1, r3
 80025f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025fc:	6019      	str	r1, [r3, #0]
  return result;
 80025fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002602:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d09d      	beq.n	8002560 <HAL_RCC_OscConfig+0x688>
 8002624:	e08d      	b.n	8002742 <HAL_RCC_OscConfig+0x86a>
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002644:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002652:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x8fc>)
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002668:	f7fe ff4c 	bl	8001504 <HAL_GetTick>
 800266c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002672:	f7fe ff47 	bl	8001504 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f000 bc75 	b.w	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002690:	2202      	movs	r2, #2
 8002692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026b4:	2202      	movs	r2, #2
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026d8:	2202      	movs	r2, #2
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 80026f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002700:	2102      	movs	r1, #2
 8002702:	6019      	str	r1, [r3, #0]
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f1a3 	rbit	r1, r3
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800271a:	6019      	str	r1, [r3, #0]
  return result;
 800271c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002720:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d197      	bne.n	8002672 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81a5 	beq.w	8002aa2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_RCC_OscConfig+0x8f8>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002790:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_RCC_OscConfig+0x900>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d121      	bne.n	80027e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCC_OscConfig+0x900>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x900>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b0:	f7fe fea8 	bl	8001504 <HAL_GetTick>
 80027b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e010      	b.n	80027dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fea3 	bl	8001504 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e3d1      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	10908120 	.word	0x10908120
 80027d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_RCC_OscConfig+0xb3c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0e8      	beq.n	80027ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x92e>
 80027f8:	4b87      	ldr	r3, [pc, #540]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a86      	ldr	r2, [pc, #536]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	e035      	b.n	8002872 <HAL_RCC_OscConfig+0x99a>
 8002806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800280a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x958>
 8002816:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a7f      	ldr	r2, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a7c      	ldr	r2, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	e020      	b.n	8002872 <HAL_RCC_OscConfig+0x99a>
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x982>
 8002840:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a74      	ldr	r2, [pc, #464]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x99a>
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a6b      	ldr	r2, [pc, #428]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002876:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8081 	beq.w	8002986 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe fe3e 	bl	8001504 <HAL_GetTick>
 8002888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	e00b      	b.n	80028a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fe39 	bl	8001504 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e365      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 80028a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028ae:	2202      	movs	r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028d2:	2202      	movs	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fa93 f2a3 	rbit	r2, r3
 80028e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028ec:	601a      	str	r2, [r3, #0]
  return result;
 80028ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d102      	bne.n	8002912 <HAL_RCC_OscConfig+0xa3a>
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	e013      	b.n	800293a <HAL_RCC_OscConfig+0xa62>
 8002912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002916:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800291a:	2202      	movs	r2, #2
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002922:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002930:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800293e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002942:	2102      	movs	r1, #2
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800294a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fa92 f1a2 	rbit	r1, r2
 8002954:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002958:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800295c:	6011      	str	r1, [r2, #0]
  return result;
 800295e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002962:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f002 021f 	and.w	r2, r2, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d084      	beq.n	800288e <HAL_RCC_OscConfig+0x9b6>
 8002984:	e083      	b.n	8002a8e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe fdbd 	bl	8001504 <HAL_GetTick>
 800298a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe fdb8 	bl	8001504 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e2e4      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029b0:	2202      	movs	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029ee:	601a      	str	r2, [r3, #0]
  return result;
 80029f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0xb44>
 8002a0e:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_RCC_OscConfig+0xb40>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	e017      	b.n	8002a44 <HAL_RCC_OscConfig+0xb6c>
 8002a14:	40007000 	.word	0x40007000
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	4bb3      	ldr	r3, [pc, #716]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	6011      	str	r1, [r2, #0]
 8002a50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	fa92 f1a2 	rbit	r1, r2
 8002a5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a62:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a66:	6011      	str	r1, [r2, #0]
  return result;
 8002a68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a6c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d180      	bne.n	8002990 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a8e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a96:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a9d      	ldr	r2, [pc, #628]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 825e 	beq.w	8002f70 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	4b96      	ldr	r3, [pc, #600]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	f000 821f 	beq.w	8002f00 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	f040 8170 	bne.w	8002db4 <HAL_RCC_OscConfig+0xedc>
 8002ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002af8:	601a      	str	r2, [r3, #0]
  return result;
 8002afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b02:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	461a      	mov	r2, r3
 8002b16:	2300      	movs	r3, #0
 8002b18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fcf3 	bl	8001504 <HAL_GetTick>
 8002b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b22:	e009      	b.n	8002b38 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fcee 	bl	8001504 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e21c      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	fa93 f2a3 	rbit	r2, r3
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b5c:	601a      	str	r2, [r3, #0]
  return result;
 8002b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b62:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_OscConfig+0xcaa>
 8002b7c:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e027      	b.n	8002bd2 <HAL_RCC_OscConfig+0xcfa>
 8002b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b86:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b94:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fa93 f2a3 	rbit	r2, r3
 8002b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bd6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bda:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bde:	6011      	str	r1, [r2, #0]
 8002be0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002be4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	fa92 f1a2 	rbit	r1, r2
 8002bee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bf2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002bf6:	6011      	str	r1, [r2, #0]
  return result;
 8002bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bfc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d182      	bne.n	8002b24 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1e:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	4937      	ldr	r1, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a19      	ldr	r1, [r3, #32]
 8002c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c84:	601a      	str	r2, [r3, #0]
  return result;
 8002c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c8e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fc2d 	bl	8001504 <HAL_GetTick>
 8002caa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cae:	e009      	b.n	8002cc4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fc28 	bl	8001504 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e156      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ce8:	601a      	str	r2, [r3, #0]
  return result;
 8002cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cf2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0xe3c>
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <HAL_RCC_OscConfig+0xe38>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e02a      	b.n	8002d64 <HAL_RCC_OscConfig+0xe8c>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b86      	ldr	r3, [pc, #536]	; (8002f7c <HAL_RCC_OscConfig+0x10a4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d70:	6011      	str	r1, [r2, #0]
 8002d72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	fa92 f1a2 	rbit	r1, r2
 8002d80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d84:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d88:	6011      	str	r1, [r2, #0]
  return result;
 8002d8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d8e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f43f af7f 	beq.w	8002cb0 <HAL_RCC_OscConfig+0xdd8>
 8002db2:	e0dd      	b.n	8002f70 <HAL_RCC_OscConfig+0x1098>
 8002db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dd8:	601a      	str	r2, [r3, #0]
  return result;
 8002dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dde:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002de2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fb83 	bl	8001504 <HAL_GetTick>
 8002dfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	e009      	b.n	8002e18 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fb7e 	bl	8001504 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0ac      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
 8002e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e3c:	601a      	str	r2, [r3, #0]
  return result;
 8002e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0xf8a>
 8002e5c:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_OscConfig+0x10a4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e027      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfda>
 8002e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_RCC_OscConfig+0x10a4>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ebe:	6011      	str	r1, [r2, #0]
 8002ec0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ec4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	fa92 f1a2 	rbit	r1, r2
 8002ece:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ed2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002ed6:	6011      	str	r1, [r2, #0]
  return result;
 8002ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002edc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d182      	bne.n	8002e04 <HAL_RCC_OscConfig+0xf2c>
 8002efe:	e037      	b.n	8002f70 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02e      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_OscConfig+0x10a4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_RCC_OscConfig+0x10a4>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d117      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002f40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000

08002f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b09e      	sub	sp, #120	; 0x78
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e162      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b90      	ldr	r3, [pc, #576]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 0207 	bic.w	r2, r3, #7
 8002fae:	498b      	ldr	r1, [pc, #556]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e14a      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	497f      	ldr	r1, [pc, #508]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80dc 	beq.w	80031ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d13c      	bne.n	8003076 <HAL_RCC_ClockConfig+0xf6>
 8002ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_RCC_ClockConfig+0xa6>
 8003020:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	e00f      	b.n	8003046 <HAL_RCC_ClockConfig+0xc6>
 8003026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800302a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	667b      	str	r3, [r7, #100]	; 0x64
 8003034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003038:	663b      	str	r3, [r7, #96]	; 0x60
 800303a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800304a:	65ba      	str	r2, [r7, #88]	; 0x58
 800304c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800304e:	fa92 f2a2 	rbit	r2, r2
 8003052:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003056:	fab2 f282 	clz	r2, r2
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f042 0220 	orr.w	r2, r2, #32
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f002 021f 	and.w	r2, r2, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d17b      	bne.n	800316a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0f3      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d13c      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x178>
 800307e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003082:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x128>
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_ClockConfig+0x148>
 80030a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ba:	643b      	str	r3, [r7, #64]	; 0x40
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c4:	4b46      	ldr	r3, [pc, #280]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80030ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d0:	fa92 f2a2 	rbit	r2, r2
 80030d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13a      	bne.n	800316a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0b2      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
 80030f8:	2302      	movs	r3, #2
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_RCC_ClockConfig+0x1a0>
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e00d      	b.n	800313c <HAL_RCC_ClockConfig+0x1bc>
 8003120:	2302      	movs	r3, #2
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2202      	movs	r2, #2
 800313e:	61ba      	str	r2, [r7, #24]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	fa92 f2a2 	rbit	r2, r2
 8003146:	617a      	str	r2, [r7, #20]
  return result;
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	fab2 f282 	clz	r2, r2
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f042 0220 	orr.w	r2, r2, #32
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f002 021f 	and.w	r2, r2, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e079      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	491a      	ldr	r1, [pc, #104]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe f9c2 	bl	8001504 <HAL_GetTick>
 8003180:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe f9be 	bl	8001504 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e061      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_ClockConfig+0x260>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d214      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e040      	b.n	800325e <HAL_RCC_ClockConfig+0x2de>
 80031dc:	40022000 	.word	0x40022000
 80031e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_ClockConfig+0x2e8>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	491a      	ldr	r1, [pc, #104]	; (8003268 <HAL_RCC_ClockConfig+0x2e8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x2e8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4912      	ldr	r1, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x2e8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003222:	f000 f829 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003226:	4601      	mov	r1, r0
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_RCC_ClockConfig+0x2e8>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003230:	22f0      	movs	r2, #240	; 0xf0
 8003232:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	fa92 f2a2 	rbit	r2, r2
 800323a:	60fa      	str	r2, [r7, #12]
  return result;
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	40d3      	lsrs	r3, r2
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x2ec>)
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	fa21 f303 	lsr.w	r3, r1, r3
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HAL_RCC_ClockConfig+0x2f0>)
 8003250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_ClockConfig+0x2f4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f910 	bl	800147c <HAL_InitTick>
  
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3778      	adds	r7, #120	; 0x78
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	08007ce0 	.word	0x08007ce0
 8003270:	20000028 	.word	0x20000028
 8003274:	2000002c 	.word	0x2000002c

08003278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b08b      	sub	sp, #44	; 0x2c
 800327c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x30>
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x36>
 80032a6:	e03f      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	e03f      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	607a      	str	r2, [r7, #4]
  return result;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	40d3      	lsrs	r3, r2
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	220f      	movs	r2, #15
 80032dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	fa92 f2a2 	rbit	r2, r2
 80032e4:	60fa      	str	r2, [r7, #12]
  return result;
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	fab2 f282 	clz	r2, r2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	40d3      	lsrs	r3, r2
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003300:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fbb2 f2f3 	udiv	r2, r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	e007      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fbb2 f2f3 	udiv	r2, r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	623b      	str	r3, [r7, #32]
      break;
 8003326:	e002      	b.n	800332e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc8>)
 800332a:	623b      	str	r3, [r7, #32]
      break;
 800332c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332e:	6a3b      	ldr	r3, [r7, #32]
}
 8003330:	4618      	mov	r0, r3
 8003332:	372c      	adds	r7, #44	; 0x2c
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000
 8003340:	007a1200 	.word	0x007a1200
 8003344:	08007cf8 	.word	0x08007cf8
 8003348:	08007d08 	.word	0x08007d08

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_RCC_GetHCLKFreq+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000028 	.word	0x20000028

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800336a:	f7ff ffef 	bl	800334c <HAL_RCC_GetHCLKFreq>
 800336e:	4601      	mov	r1, r0
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003378:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800337c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	fa92 f2a2 	rbit	r2, r2
 8003384:	603a      	str	r2, [r7, #0]
  return result;
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	fab2 f282 	clz	r2, r2
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	40d3      	lsrs	r3, r2
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08007cf0 	.word	0x08007cf0

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033ae:	f7ff ffcd 	bl	800334c <HAL_RCC_GetHCLKFreq>
 80033b2:	4601      	mov	r1, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	603a      	str	r2, [r7, #0]
  return result;
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08007cf0 	.word	0x08007cf0

080033ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b092      	sub	sp, #72	; 0x48
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80d4 	beq.w	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003410:	4b4e      	ldr	r3, [pc, #312]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10e      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	4a4a      	ldr	r2, [pc, #296]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	61d3      	str	r3, [r2, #28]
 8003428:	4b48      	ldr	r3, [pc, #288]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe f857 	bl	8001504 <HAL_GetTick>
 8003456:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe f853 	bl	8001504 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1d6      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8084 	beq.w	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003494:	429a      	cmp	r2, r3
 8003496:	d07c      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	461a      	mov	r2, r3
 80034c2:	2301      	movs	r3, #1
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	2300      	movs	r3, #0
 80034e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d04b      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe f803 	bl	8001504 <HAL_GetTick>
 80034fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fd ffff 	bl	8001504 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e180      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003518:	2302      	movs	r3, #2
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	2302      	movs	r3, #2
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	61fb      	str	r3, [r7, #28]
  return result;
 8003530:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d108      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003546:	4b01      	ldr	r3, [pc, #4]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	e00d      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	10908100 	.word	0x10908100
 8003558:	2302      	movs	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	4b9a      	ldr	r3, [pc, #616]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2202      	movs	r2, #2
 800356a:	613a      	str	r2, [r7, #16]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	fa92 f2a2 	rbit	r2, r2
 8003572:	60fa      	str	r2, [r7, #12]
  return result;
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	fab2 f282 	clz	r2, r2
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f002 021f 	and.w	r2, r2, #31
 8003586:	2101      	movs	r1, #1
 8003588:	fa01 f202 	lsl.w	r2, r1, r2
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0b7      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003592:	4b8f      	ldr	r3, [pc, #572]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	498c      	ldr	r1, [pc, #560]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ac:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a87      	ldr	r2, [pc, #540]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c4:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f023 0203 	bic.w	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	497f      	ldr	r1, [pc, #508]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035e2:	4b7b      	ldr	r3, [pc, #492]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4978      	ldr	r1, [pc, #480]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003600:	4b73      	ldr	r3, [pc, #460]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4970      	ldr	r1, [pc, #448]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361e:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f023 0210 	bic.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4969      	ldr	r1, [pc, #420]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800363c:	4b64      	ldr	r3, [pc, #400]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	4961      	ldr	r1, [pc, #388]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f023 0220 	bic.w	r2, r3, #32
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	495a      	ldr	r1, [pc, #360]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003678:	4b55      	ldr	r3, [pc, #340]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	4952      	ldr	r1, [pc, #328]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003696:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	494b      	ldr	r1, [pc, #300]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4943      	ldr	r1, [pc, #268]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	493c      	ldr	r1, [pc, #240]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036f0:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	4934      	ldr	r1, [pc, #208]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	492d      	ldr	r1, [pc, #180]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	4925      	ldr	r1, [pc, #148]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	491e      	ldr	r1, [pc, #120]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	490f      	ldr	r1, [pc, #60]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	4907      	ldr	r1, [pc, #28]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80037c2:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d6:	4913      	ldr	r1, [pc, #76]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	490b      	ldr	r1, [pc, #44]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003814:	4313      	orrs	r3, r2
 8003816:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3748      	adds	r7, #72	; 0x48
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000

08003828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e049      	b.n	80038ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fc02 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f001 faa0 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e049      	b.n	800397c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f841 	bl	8003984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f001 fa49 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_TIM_PWM_Start+0x24>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e03c      	b.n	8003a36 <HAL_TIM_PWM_Start+0x9e>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d109      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x3e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e02f      	b.n	8003a36 <HAL_TIM_PWM_Start+0x9e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d109      	bne.n	80039f0 <HAL_TIM_PWM_Start+0x58>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e022      	b.n	8003a36 <HAL_TIM_PWM_Start+0x9e>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d109      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x72>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e015      	b.n	8003a36 <HAL_TIM_PWM_Start+0x9e>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d109      	bne.n	8003a24 <HAL_TIM_PWM_Start+0x8c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e008      	b.n	8003a36 <HAL_TIM_PWM_Start+0x9e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0a1      	b.n	8003b82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Start+0xb6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	e023      	b.n	8003a96 <HAL_TIM_PWM_Start+0xfe>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0xc6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	e01b      	b.n	8003a96 <HAL_TIM_PWM_Start+0xfe>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xd6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_PWM_Start+0xfe>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xe6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_PWM_Start+0xfe>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xf6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_PWM_Start+0xfe>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 ff7a 	bl	8005998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <HAL_TIM_PWM_Start+0x1f4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x148>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <HAL_TIM_PWM_Start+0x1f8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x148>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a35      	ldr	r2, [pc, #212]	; (8003b94 <HAL_TIM_PWM_Start+0x1fc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x148>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <HAL_TIM_PWM_Start+0x200>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x148>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a32      	ldr	r2, [pc, #200]	; (8003b9c <HAL_TIM_PWM_Start+0x204>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_PWM_Start+0x148>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <HAL_TIM_PWM_Start+0x208>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_PWM_Start+0x14c>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_PWM_Start+0x14e>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_TIM_PWM_Start+0x1f4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d018      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <HAL_TIM_PWM_Start+0x20c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_TIM_PWM_Start+0x210>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_TIM_PWM_Start+0x1f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_TIM_PWM_Start+0x1fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_TIM_PWM_Start+0x1a8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_TIM_PWM_Start+0x208>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d115      	bne.n	8003b6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_TIM_PWM_Start+0x214>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d015      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x1e6>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d011      	beq.n	8003b7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6a:	e008      	b.n	8003b7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e000      	b.n	8003b80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	40015000 	.word	0x40015000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	00010007 	.word	0x00010007

08003bb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_TIM_PWM_Start_DMA+0x2c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e03c      	b.n	8003c56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d109      	bne.n	8003bf6 <HAL_TIM_PWM_Start_DMA+0x46>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e02f      	b.n	8003c56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d109      	bne.n	8003c10 <HAL_TIM_PWM_Start_DMA+0x60>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e022      	b.n	8003c56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d109      	bne.n	8003c2a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e015      	b.n	8003c56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d109      	bne.n	8003c44 <HAL_TIM_PWM_Start_DMA+0x94>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e008      	b.n	8003c56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e1b0      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e03c      	b.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d109      	bne.n	8003c92 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e02f      	b.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d109      	bne.n	8003cac <HAL_TIM_PWM_Start_DMA+0xfc>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e022      	b.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d109      	bne.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x116>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e015      	b.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start_DMA+0x130>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e008      	b.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d034      	beq.n	8003d60 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_TIM_PWM_Start_DMA+0x152>
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e15c      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x166>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d14:	e026      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start_DMA+0x176>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	e01e      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x186>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	e016      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start_DMA+0x196>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d44:	e00e      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b10      	cmp	r3, #16
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d54:	e006      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d5e:	e001      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e12d      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f200 80ae 	bhi.w	8003ec8 <HAL_TIM_PWM_Start_DMA+0x318>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003ec9 	.word	0x08003ec9
 8003d7c:	08003ec9 	.word	0x08003ec9
 8003d80:	08003ec9 	.word	0x08003ec9
 8003d84:	08003df1 	.word	0x08003df1
 8003d88:	08003ec9 	.word	0x08003ec9
 8003d8c:	08003ec9 	.word	0x08003ec9
 8003d90:	08003ec9 	.word	0x08003ec9
 8003d94:	08003e39 	.word	0x08003e39
 8003d98:	08003ec9 	.word	0x08003ec9
 8003d9c:	08003ec9 	.word	0x08003ec9
 8003da0:	08003ec9 	.word	0x08003ec9
 8003da4:	08003e81 	.word	0x08003e81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4a86      	ldr	r2, [pc, #536]	; (8003fc8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	4a85      	ldr	r2, [pc, #532]	; (8003fcc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	4a84      	ldr	r2, [pc, #528]	; (8003fd0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3334      	adds	r3, #52	; 0x34
 8003dcc:	461a      	mov	r2, r3
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	f7fd fcfc 	bl	80017cc <HAL_DMA_Start_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0f0      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	60da      	str	r2, [r3, #12]
      break;
 8003dee:	e06e      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	4a74      	ldr	r2, [pc, #464]	; (8003fc8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	4a72      	ldr	r2, [pc, #456]	; (8003fd0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3338      	adds	r3, #56	; 0x38
 8003e14:	461a      	mov	r2, r3
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	f7fd fcd8 	bl	80017cc <HAL_DMA_Start_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0cc      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	60da      	str	r2, [r3, #12]
      break;
 8003e36:	e04a      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a62      	ldr	r2, [pc, #392]	; (8003fc8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a60      	ldr	r2, [pc, #384]	; (8003fd0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	333c      	adds	r3, #60	; 0x3c
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	f7fd fcb4 	bl	80017cc <HAL_DMA_Start_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0a8      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	60da      	str	r2, [r3, #12]
      break;
 8003e7e:	e026      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a50      	ldr	r2, [pc, #320]	; (8003fc8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3340      	adds	r3, #64	; 0x40
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	f7fd fc90 	bl	80017cc <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e084      	b.n	8003fc0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec4:	60da      	str	r2, [r3, #12]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d174      	bne.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fd5b 	bl	8005998 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	; (8003fd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x36e>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x36e>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a36      	ldr	r2, [pc, #216]	; (8003fe0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x36e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a33      	ldr	r2, [pc, #204]	; (8003fe8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_PWM_Start_DMA+0x372>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x374>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d115      	bne.n	8003faa <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d015      	beq.n	8003fbc <HAL_TIM_PWM_Start_DMA+0x40c>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f96:	d011      	beq.n	8003fbc <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	e008      	b.n	8003fbc <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e000      	b.n	8003fbe <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08004c9b 	.word	0x08004c9b
 8003fcc:	08004d43 	.word	0x08004d43
 8003fd0:	08004c09 	.word	0x08004c09
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	40013400 	.word	0x40013400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	40015000 	.word	0x40015000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	00010007 	.word	0x00010007

08003ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e049      	b.n	800409e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f841 	bl	80040a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 feb8 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_TIM_IC_Start_IT+0x1e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	e023      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d104      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0x2e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e01b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d104      	bne.n	80040fa <HAL_TIM_IC_Start_IT+0x3e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e013      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d104      	bne.n	800410a <HAL_TIM_IC_Start_IT+0x4e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e00b      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d104      	bne.n	800411a <HAL_TIM_IC_Start_IT+0x5e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e003      	b.n	8004122 <HAL_TIM_IC_Start_IT+0x66>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004120:	b2db      	uxtb	r3, r3
 8004122:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <HAL_TIM_IC_Start_IT+0x78>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e013      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d104      	bne.n	8004144 <HAL_TIM_IC_Start_IT+0x88>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e00b      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d104      	bne.n	8004154 <HAL_TIM_IC_Start_IT+0x98>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e003      	b.n	800415c <HAL_TIM_IC_Start_IT+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800415a:	b2db      	uxtb	r3, r3
 800415c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004164:	7b7b      	ldrb	r3, [r7, #13]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0dd      	b.n	800432a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_IC_Start_IT+0xc2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417c:	e023      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_IC_Start_IT+0xd2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	e01b      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_IC_Start_IT+0xe2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	e013      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_IC_Start_IT+0xf2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ac:	e00b      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d104      	bne.n	80041be <HAL_TIM_IC_Start_IT+0x102>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041bc:	e003      	b.n	80041c6 <HAL_TIM_IC_Start_IT+0x10a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x11a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d4:	e013      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x12a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e4:	e00b      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0x13a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f4:	e003      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x142>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d841      	bhi.n	8004288 <HAL_TIM_IC_Start_IT+0x1cc>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_TIM_IC_Start_IT+0x150>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004241 	.word	0x08004241
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004289 	.word	0x08004289
 800421c:	08004253 	.word	0x08004253
 8004220:	08004289 	.word	0x08004289
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004265 	.word	0x08004265
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004289 	.word	0x08004289
 800423c:	08004277 	.word	0x08004277
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0202 	orr.w	r2, r2, #2
 800424e:	60da      	str	r2, [r3, #12]
      break;
 8004250:	e01d      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0204 	orr.w	r2, r2, #4
 8004260:	60da      	str	r2, [r3, #12]
      break;
 8004262:	e014      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	60da      	str	r2, [r3, #12]
      break;
 8004274:	e00b      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0210 	orr.w	r2, r2, #16
 8004284:	60da      	str	r2, [r3, #12]
      break;
 8004286:	e002      	b.n	800428e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	bf00      	nop
  }

  if (status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d149      	bne.n	8004328 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fb7b 	bl	8005998 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_TIM_IC_Start_IT+0x278>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_IC_Start_IT+0x27c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_TIM_IC_Start_IT+0x280>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_IC_Start_IT+0x284>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_TIM_IC_Start_IT+0x288>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_IC_Start_IT+0x22c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_TIM_IC_Start_IT+0x28c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_TIM_IC_Start_IT+0x290>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIM_IC_Start_IT+0x26a>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40013400 	.word	0x40013400
 8004344:	40014000 	.word	0x40014000
 8004348:	40015000 	.word	0x40015000
 800434c:	00010007 	.word	0x00010007

08004350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0202 	mvn.w	r2, #2
 800437c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fb ffb0 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fc02 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fc09 	bl	8004bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0204 	mvn.w	r2, #4
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fb ff86 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fbd8 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fbdf 	bl	8004bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b08      	cmp	r3, #8
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0208 	mvn.w	r2, #8
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fb ff5c 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fbae 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fbb5 	bl	8004bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b10      	cmp	r3, #16
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b10      	cmp	r3, #16
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0210 	mvn.w	r2, #16
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2208      	movs	r2, #8
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fb ff32 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fb84 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb8b 	bl	8004bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0201 	mvn.w	r2, #1
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb5e 	bl	8004b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b80      	cmp	r3, #128	; 0x80
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fb08 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d10e      	bne.n	800452e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d107      	bne.n	800452e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f001 fafb 	bl	8005b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d10e      	bne.n	800455a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d107      	bne.n	800455a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb43 	bl	8004be0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d10e      	bne.n	8004586 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d107      	bne.n	8004586 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0220 	mvn.w	r2, #32
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 fabb 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e088      	b.n	80046be <HAL_TIM_IC_ConfigChannel+0x130>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11b      	bne.n	80045f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045ca:	f001 f827 	bl	800561c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 020c 	bic.w	r2, r2, #12
 80045dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6999      	ldr	r1, [r3, #24]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	619a      	str	r2, [r3, #24]
 80045f0:	e060      	b.n	80046b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11c      	bne.n	8004632 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004608:	f001 f8a5 	bl	8005756 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800461a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	619a      	str	r2, [r3, #24]
 8004630:	e040      	b.n	80046b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004648:	f001 f8f2 	bl	8005830 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 020c 	bic.w	r2, r2, #12
 800465a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69d9      	ldr	r1, [r3, #28]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	e021      	b.n	80046b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d11c      	bne.n	80046b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004686:	f001 f90f 	bl	80058a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004698:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	021a      	lsls	r2, r3, #8
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	61da      	str	r2, [r3, #28]
 80046ae:	e001      	b.n	80046b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0ff      	b.n	80048e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b14      	cmp	r3, #20
 80046f2:	f200 80f0 	bhi.w	80048d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004751 	.word	0x08004751
 8004700:	080048d7 	.word	0x080048d7
 8004704:	080048d7 	.word	0x080048d7
 8004708:	080048d7 	.word	0x080048d7
 800470c:	08004791 	.word	0x08004791
 8004710:	080048d7 	.word	0x080048d7
 8004714:	080048d7 	.word	0x080048d7
 8004718:	080048d7 	.word	0x080048d7
 800471c:	080047d3 	.word	0x080047d3
 8004720:	080048d7 	.word	0x080048d7
 8004724:	080048d7 	.word	0x080048d7
 8004728:	080048d7 	.word	0x080048d7
 800472c:	08004813 	.word	0x08004813
 8004730:	080048d7 	.word	0x080048d7
 8004734:	080048d7 	.word	0x080048d7
 8004738:	080048d7 	.word	0x080048d7
 800473c:	08004855 	.word	0x08004855
 8004740:	080048d7 	.word	0x080048d7
 8004744:	080048d7 	.word	0x080048d7
 8004748:	080048d7 	.word	0x080048d7
 800474c:	08004895 	.word	0x08004895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fbc6 	bl	8004ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6999      	ldr	r1, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	619a      	str	r2, [r3, #24]
      break;
 800478e:	e0a5      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc40 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      break;
 80047d0:	e084      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fcb3 	bl	8005144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0208 	orr.w	r2, r2, #8
 80047ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0204 	bic.w	r2, r2, #4
 80047fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69d9      	ldr	r1, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
      break;
 8004810:	e064      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fd25 	bl	8005268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69d9      	ldr	r1, [r3, #28]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	61da      	str	r2, [r3, #28]
      break;
 8004852:	e043      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fd74 	bl	8005348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004892:	e023      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fdbe 	bl	800541c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048d4:	e002      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e0b6      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x18a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004948:	d03e      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xd8>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	f200 8087 	bhi.w	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	f000 8086 	beq.w	8004a66 <HAL_TIM_ConfigClockSource+0x176>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d87f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d01a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0xaa>
 8004964:	2b70      	cmp	r3, #112	; 0x70
 8004966:	d87b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d050      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x11e>
 800496c:	2b60      	cmp	r3, #96	; 0x60
 800496e:	d877      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004970:	2b50      	cmp	r3, #80	; 0x50
 8004972:	d03c      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0xfe>
 8004974:	2b50      	cmp	r3, #80	; 0x50
 8004976:	d873      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d058      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x13e>
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d86f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004980:	2b30      	cmp	r3, #48	; 0x30
 8004982:	d064      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d86b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d060      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d867      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05c      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004994:	2b10      	cmp	r3, #16
 8004996:	d05a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004998:	e062      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	f000 ffd5 	bl	8005958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	609a      	str	r2, [r3, #8]
      break;
 80049c6:	e04f      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	f000 ffbe 	bl	8005958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ea:	609a      	str	r2, [r3, #8]
      break;
 80049ec:	e03c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 fe7c 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2150      	movs	r1, #80	; 0x50
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff8b 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e02c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f000 fed8 	bl	80057d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2160      	movs	r1, #96	; 0x60
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 ff7b 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 8004a2c:	e01c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f000 fe5c 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ff6b 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 8004a4c:	e00c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 ff62 	bl	8005922 <TIM_ITRx_SetConfig>
      break;
 8004a5e:	e003      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e000      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e031      	b.n	8004afe <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fd21 	bl	80054f4 <TIM_SlaveTimer_SetConfig>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e018      	b.n	8004afe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d831      	bhi.n	8004b80 <HAL_TIM_ReadCapturedValue+0x78>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b63 	.word	0x08004b63
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b81 	.word	0x08004b81
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b77 	.word	0x08004b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	60fb      	str	r3, [r7, #12]

      break;
 8004b60:	e00f      	b.n	8004b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	60fb      	str	r3, [r7, #12]

      break;
 8004b6a:	e00a      	b.n	8004b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	60fb      	str	r3, [r7, #12]

      break;
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	60fb      	str	r3, [r7, #12]

      break;
 8004b7e:	e000      	b.n	8004b82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004b80:	bf00      	nop
  }

  return tmpreg;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d107      	bne.n	8004c30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2e:	e02a      	b.n	8004c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d107      	bne.n	8004c4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c48:	e01d      	b.n	8004c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d107      	bne.n	8004c64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2204      	movs	r2, #4
 8004c58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c62:	e010      	b.n	8004c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d107      	bne.n	8004c7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2208      	movs	r2, #8
 8004c72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7c:	e003      	b.n	8004c86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff ffb4 	bl	8004bf4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d10b      	bne.n	8004cca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d136      	bne.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	e031      	b.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d10b      	bne.n	8004cec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d125      	bne.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cea:	e020      	b.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d10b      	bne.n	8004d0e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d0c:	e00f      	b.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d10a      	bne.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7ff ff42 	bl	8004bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	771a      	strb	r2, [r3, #28]
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d103      	bne.n	8004d62 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	771a      	strb	r2, [r3, #28]
 8004d60:	e019      	b.n	8004d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d103      	bne.n	8004d74 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	771a      	strb	r2, [r3, #28]
 8004d72:	e010      	b.n	8004d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d103      	bne.n	8004d86 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2204      	movs	r2, #4
 8004d82:	771a      	strb	r2, [r3, #28]
 8004d84:	e007      	b.n	8004d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d102      	bne.n	8004d96 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2208      	movs	r2, #8
 8004d94:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff18 	bl	8004bcc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	771a      	strb	r2, [r3, #28]
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a42      	ldr	r2, [pc, #264]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3f      	ldr	r2, [pc, #252]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3e      	ldr	r2, [pc, #248]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d01b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2e      	ldr	r2, [pc, #184]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d017      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_Base_SetConfig+0x100>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00f      	beq.n	8004eac <TIM_Base_SetConfig+0x100>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_Base_SetConfig+0x100>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_Base_SetConfig+0x100>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_Base_SetConfig+0x100>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d103      	bne.n	8004eb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	615a      	str	r2, [r3, #20]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	40015000 	.word	0x40015000
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0302 	bic.w	r3, r3, #2
 8004f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a30      	ldr	r2, [pc, #192]	; (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <TIM_OC1_SetConfig+0x88>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <TIM_OC1_SetConfig+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00f      	beq.n	8004f70 <TIM_OC1_SetConfig+0x88>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a2e      	ldr	r2, [pc, #184]	; (800500c <TIM_OC1_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_OC1_SetConfig+0x88>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <TIM_OC1_SetConfig+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC1_SetConfig+0x88>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <TIM_OC1_SetConfig+0x12c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC1_SetConfig+0x88>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <TIM_OC1_SetConfig+0x130>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10c      	bne.n	8004f8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0308 	bic.w	r3, r3, #8
 8004f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_OC1_SetConfig+0xd2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <TIM_OC1_SetConfig+0x120>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_OC1_SetConfig+0xd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	; (800500c <TIM_OC1_SetConfig+0x124>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_OC1_SetConfig+0xd2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <TIM_OC1_SetConfig+0x128>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_OC1_SetConfig+0xd2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a19      	ldr	r2, [pc, #100]	; (8005014 <TIM_OC1_SetConfig+0x12c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC1_SetConfig+0xd2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a18      	ldr	r2, [pc, #96]	; (8005018 <TIM_OC1_SetConfig+0x130>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d111      	bne.n	8004fde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	40015000 	.word	0x40015000

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0320 	bic.w	r3, r3, #32
 800506a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2c      	ldr	r2, [pc, #176]	; (800512c <TIM_OC2_SetConfig+0x110>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_OC2_SetConfig+0x74>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_OC2_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC2_SetConfig+0x74>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_OC2_SetConfig+0x118>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1f      	ldr	r2, [pc, #124]	; (800512c <TIM_OC2_SetConfig+0x110>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_OC2_SetConfig+0xc0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <TIM_OC2_SetConfig+0x114>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_OC2_SetConfig+0xc0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <TIM_OC2_SetConfig+0x11c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_OC2_SetConfig+0xc0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a1d      	ldr	r2, [pc, #116]	; (800513c <TIM_OC2_SetConfig+0x120>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_OC2_SetConfig+0xc0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <TIM_OC2_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC2_SetConfig+0xc0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a17      	ldr	r2, [pc, #92]	; (8005134 <TIM_OC2_SetConfig+0x118>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d113      	bne.n	8005104 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ea:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40015000 	.word	0x40015000
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800

08005144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <TIM_OC3_SetConfig+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC3_SetConfig+0x72>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <TIM_OC3_SetConfig+0x110>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0x72>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a29      	ldr	r2, [pc, #164]	; (8005258 <TIM_OC3_SetConfig+0x114>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10d      	bne.n	80051d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <TIM_OC3_SetConfig+0x10c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <TIM_OC3_SetConfig+0xbe>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_OC3_SetConfig+0x110>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00f      	beq.n	8005202 <TIM_OC3_SetConfig+0xbe>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_OC3_SetConfig+0x118>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_OC3_SetConfig+0xbe>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <TIM_OC3_SetConfig+0x11c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_OC3_SetConfig+0xbe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC3_SetConfig+0x120>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC3_SetConfig+0xbe>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a16      	ldr	r2, [pc, #88]	; (8005258 <TIM_OC3_SetConfig+0x114>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d113      	bne.n	800522a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40013400 	.word	0x40013400
 8005258:	40015000 	.word	0x40015000
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <TIM_OC4_SetConfig+0xc8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <TIM_OC4_SetConfig+0x8c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <TIM_OC4_SetConfig+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_OC4_SetConfig+0x8c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <TIM_OC4_SetConfig+0xd0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_OC4_SetConfig+0x8c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <TIM_OC4_SetConfig+0xd4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_OC4_SetConfig+0x8c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <TIM_OC4_SetConfig+0xd8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC4_SetConfig+0x8c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <TIM_OC4_SetConfig+0xdc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d109      	bne.n	8005308 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	019b      	lsls	r3, r3, #6
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800
 8005344:	40015000 	.word	0x40015000

08005348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800538c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_OC5_SetConfig+0xbc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_OC5_SetConfig+0x82>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_OC5_SetConfig+0xc0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_OC5_SetConfig+0x82>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC5_SetConfig+0xc4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_OC5_SetConfig+0x82>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC5_SetConfig+0xc8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_OC5_SetConfig+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a15      	ldr	r2, [pc, #84]	; (8005414 <TIM_OC5_SetConfig+0xcc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_OC5_SetConfig+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a14      	ldr	r2, [pc, #80]	; (8005418 <TIM_OC5_SetConfig+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d109      	bne.n	80053de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800
 8005418:	40015000 	.word	0x40015000

0800541c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	051b      	lsls	r3, r3, #20
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1a      	ldr	r2, [pc, #104]	; (80054dc <TIM_OC6_SetConfig+0xc0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <TIM_OC6_SetConfig+0x84>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <TIM_OC6_SetConfig+0xc4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00f      	beq.n	80054a0 <TIM_OC6_SetConfig+0x84>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <TIM_OC6_SetConfig+0xc8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_OC6_SetConfig+0x84>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <TIM_OC6_SetConfig+0xcc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_OC6_SetConfig+0x84>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a16      	ldr	r2, [pc, #88]	; (80054ec <TIM_OC6_SetConfig+0xd0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC6_SetConfig+0x84>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <TIM_OC6_SetConfig+0xd4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d109      	bne.n	80054b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40015000 	.word	0x40015000

080054f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005522:	f023 0307 	bic.w	r3, r3, #7
 8005526:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b70      	cmp	r3, #112	; 0x70
 8005540:	d01a      	beq.n	8005578 <TIM_SlaveTimer_SetConfig+0x84>
 8005542:	2b70      	cmp	r3, #112	; 0x70
 8005544:	d860      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 8005546:	2b60      	cmp	r3, #96	; 0x60
 8005548:	d054      	beq.n	80055f4 <TIM_SlaveTimer_SetConfig+0x100>
 800554a:	2b60      	cmp	r3, #96	; 0x60
 800554c:	d85c      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 800554e:	2b50      	cmp	r3, #80	; 0x50
 8005550:	d046      	beq.n	80055e0 <TIM_SlaveTimer_SetConfig+0xec>
 8005552:	2b50      	cmp	r3, #80	; 0x50
 8005554:	d858      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d019      	beq.n	800558e <TIM_SlaveTimer_SetConfig+0x9a>
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d854      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 800555e:	2b30      	cmp	r3, #48	; 0x30
 8005560:	d055      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x11a>
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d850      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 8005566:	2b20      	cmp	r3, #32
 8005568:	d051      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x11a>
 800556a:	2b20      	cmp	r3, #32
 800556c:	d84c      	bhi.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04d      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x11a>
 8005572:	2b10      	cmp	r3, #16
 8005574:	d04b      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x11a>
 8005576:	e047      	b.n	8005608 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	f000 f9e6 	bl	8005958 <TIM_ETR_SetConfig>
      break;
 800558c:	e040      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d101      	bne.n	800559a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e03b      	b.n	8005612 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
      break;
 80055de:	e017      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ec:	461a      	mov	r2, r3
 80055ee:	f000 f883 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      break;
 80055f2:	e00d      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005600:	461a      	mov	r2, r3
 8005602:	f000 f8e5 	bl	80057d0 <TIM_TI2_ConfigInputStage>
      break;
 8005606:	e003      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
      break;
 800560c:	e000      	b.n	8005610 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800560e:	bf00      	nop
  }

  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <TIM_TI1_SetConfig+0xc4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d013      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <TIM_TI1_SetConfig+0xc8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <TIM_TI1_SetConfig+0xcc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <TIM_TI1_SetConfig+0xd0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <TIM_TI1_SetConfig+0xd4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_TI1_SetConfig+0x5e>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <TIM_TI1_SetConfig+0xd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d101      	bne.n	800567e <TIM_TI1_SetConfig+0x62>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <TIM_TI1_SetConfig+0x64>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e003      	b.n	800569e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f023 030a 	bic.w	r3, r3, #10
 80056b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f003 030a 	and.w	r3, r3, #10
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40013400 	.word	0x40013400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40015000 	.word	0x40015000

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f023 0210 	bic.w	r2, r3, #16
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	b29b      	uxth	r3, r3
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	031b      	lsls	r3, r3, #12
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 0303 	bic.w	r3, r3, #3
 800585c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	b2db      	uxtb	r3, r3
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	031b      	lsls	r3, r3, #12
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80058fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	621a      	str	r2, [r3, #32]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	f043 0307 	orr.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]
}
 800594c:	bf00      	nop
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	431a      	orrs	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2201      	movs	r2, #1
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1a      	ldr	r2, [r3, #32]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	401a      	ands	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e06d      	b.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a30      	ldr	r2, [pc, #192]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d108      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01d      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d018      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a11      	ldr	r2, [pc, #68]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40015000 	.word	0x40015000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40014000 	.word	0x40014000

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e040      	b.n	8005bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb fb6a 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fbca 	bl	8006310 <UART_SetConfig>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e022      	b.n	8005bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd92 	bl	80066b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fe19 	bl	80067fc <UART_CheckIdleState>
 8005bca:	4603      	mov	r3, r0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b08b      	sub	sp, #44	; 0x2c
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d147      	bne.n	8005c7a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_UART_Transmit_IT+0x22>
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e040      	b.n	8005c7c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2221      	movs	r2, #33	; 0x21
 8005c22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2c:	d107      	bne.n	8005c3e <HAL_UART_Transmit_IT+0x6a>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <HAL_UART_Transmit_IT+0xb4>)
 8005c3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c3c:	e002      	b.n	8005c44 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <HAL_UART_Transmit_IT+0xb8>)
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	69f9      	ldr	r1, [r7, #28]
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e6      	bne.n	8005c44 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	372c      	adds	r7, #44	; 0x2c
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	08006d55 	.word	0x08006d55
 8005c8c:	08006c9d 	.word	0x08006c9d

08005c90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d132      	bne.n	8005d0e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_Receive_IT+0x24>
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e02b      	b.n	8005d10 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	69f9      	ldr	r1, [r7, #28]
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	461a      	mov	r2, r3
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fe89 	bl	8006a1c <UART_Start_Receive_IT>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	e000      	b.n	8005d10 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b0ba      	sub	sp, #232	; 0xe8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d46:	4013      	ands	r3, r2
 8005d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d115      	bne.n	8005d80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00f      	beq.n	8005d80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 82ab 	beq.w	80062cc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
      }
      return;
 8005d7e:	e2a5      	b.n	80062cc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8117 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d9a:	4b85      	ldr	r3, [pc, #532]	; (8005fb0 <HAL_UART_IRQHandler+0x298>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 810a 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d011      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xbc>
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dca:	f043 0201 	orr.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d011      	beq.n	8005e04 <HAL_UART_IRQHandler+0xec>
 8005de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2202      	movs	r2, #2
 8005df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	f043 0204 	orr.w	r2, r3, #4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <HAL_UART_IRQHandler+0x11c>
 8005e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2204      	movs	r2, #4
 8005e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	f043 0202 	orr.w	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d017      	beq.n	8005e70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e66:	f043 0208 	orr.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d012      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18a>
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8211 	beq.w	80062d0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005edc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d005      	beq.n	8005efa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d04f      	beq.n	8005f9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fe54 	bl	8006ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d141      	bne.n	8005f92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1d9      	bne.n	8005f0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d013      	beq.n	8005f8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <HAL_UART_IRQHandler+0x29c>)
 8005f68:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fb fcc4 	bl	80018fc <HAL_DMA_Abort_IT>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	e00f      	b.n	8005faa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9aa 	bl	80062e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	e00b      	b.n	8005faa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9a6 	bl	80062e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f98:	e007      	b.n	8005faa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9a2 	bl	80062e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005fa8:	e192      	b.n	80062d0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	bf00      	nop
    return;
 8005fac:	e190      	b.n	80062d0 <HAL_UART_IRQHandler+0x5b8>
 8005fae:	bf00      	nop
 8005fb0:	04000120 	.word	0x04000120
 8005fb4:	08006c71 	.word	0x08006c71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	f040 814b 	bne.w	8006258 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8144 	beq.w	8006258 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 813d 	beq.w	8006258 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2210      	movs	r2, #16
 8005fe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	f040 80b5 	bne.w	8006160 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006002:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8164 	beq.w	80062d4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006016:	429a      	cmp	r2, r3
 8006018:	f080 815c 	bcs.w	80062d4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006022:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b20      	cmp	r3, #32
 800602e:	f000 8086 	beq.w	800613e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800604a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800605c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006060:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006068:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1da      	bne.n	8006032 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800608c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e1      	bne.n	800607c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e3      	bne.n	80060b8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	f023 0310 	bic.w	r3, r3, #16
 8006112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006120:	65bb      	str	r3, [r7, #88]	; 0x58
 8006122:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e4      	bne.n	80060fe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006138:	4618      	mov	r0, r3
 800613a:	f7fb fba6 	bl	800188a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006150:	b29b      	uxth	r3, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	b29b      	uxth	r3, r3
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f8cd 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800615e:	e0b9      	b.n	80062d4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800616c:	b29b      	uxth	r3, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80ab 	beq.w	80062d8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80a6 	beq.w	80062d8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ae:	647b      	str	r3, [r7, #68]	; 0x44
 80061b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e4      	bne.n	800618c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	623b      	str	r3, [r7, #32]
   return(result);
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061e6:	633a      	str	r2, [r7, #48]	; 0x30
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	60fb      	str	r3, [r7, #12]
   return(result);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	617b      	str	r3, [r7, #20]
   return(result);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e4      	bne.n	800620e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800624a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f851 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006256:	e03f      	b.n	80062d8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <HAL_UART_IRQHandler+0x56a>
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 ff9c 	bl	80071b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006280:	e02d      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01c      	beq.n	80062dc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
    }
    return;
 80062aa:	e017      	b.n	80062dc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <HAL_UART_IRQHandler+0x5c6>
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fda5 	bl	8006e14 <UART_EndTransmit_IT>
    return;
 80062ca:	e008      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
      return;
 80062cc:	bf00      	nop
 80062ce:	e006      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
    return;
 80062d0:	bf00      	nop
 80062d2:	e004      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
      return;
 80062d4:	bf00      	nop
 80062d6:	e002      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
      return;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <HAL_UART_IRQHandler+0x5c6>
    return;
 80062dc:	bf00      	nop
  }

}
 80062de:	37e8      	adds	r7, #232	; 0xe8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b92      	ldr	r3, [pc, #584]	; (8006584 <UART_SetConfig+0x274>)
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	430b      	orrs	r3, r1
 8006346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a80      	ldr	r2, [pc, #512]	; (8006588 <UART_SetConfig+0x278>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d120      	bne.n	80063ce <UART_SetConfig+0xbe>
 800638c:	4b7f      	ldr	r3, [pc, #508]	; (800658c <UART_SetConfig+0x27c>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d817      	bhi.n	80063c8 <UART_SetConfig+0xb8>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <UART_SetConfig+0x90>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063bd 	.word	0x080063bd
 80063a8:	080063c3 	.word	0x080063c3
 80063ac:	080063b7 	.word	0x080063b7
 80063b0:	2301      	movs	r3, #1
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0b5      	b.n	8006522 <UART_SetConfig+0x212>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0b2      	b.n	8006522 <UART_SetConfig+0x212>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0af      	b.n	8006522 <UART_SetConfig+0x212>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e0ac      	b.n	8006522 <UART_SetConfig+0x212>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e0a9      	b.n	8006522 <UART_SetConfig+0x212>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6f      	ldr	r2, [pc, #444]	; (8006590 <UART_SetConfig+0x280>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d124      	bne.n	8006422 <UART_SetConfig+0x112>
 80063d8:	4b6c      	ldr	r3, [pc, #432]	; (800658c <UART_SetConfig+0x27c>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063e4:	d011      	beq.n	800640a <UART_SetConfig+0xfa>
 80063e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063ea:	d817      	bhi.n	800641c <UART_SetConfig+0x10c>
 80063ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f0:	d011      	beq.n	8006416 <UART_SetConfig+0x106>
 80063f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f6:	d811      	bhi.n	800641c <UART_SetConfig+0x10c>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <UART_SetConfig+0xf4>
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d006      	beq.n	8006410 <UART_SetConfig+0x100>
 8006402:	e00b      	b.n	800641c <UART_SetConfig+0x10c>
 8006404:	2300      	movs	r3, #0
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e08b      	b.n	8006522 <UART_SetConfig+0x212>
 800640a:	2302      	movs	r3, #2
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e088      	b.n	8006522 <UART_SetConfig+0x212>
 8006410:	2304      	movs	r3, #4
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e085      	b.n	8006522 <UART_SetConfig+0x212>
 8006416:	2308      	movs	r3, #8
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e082      	b.n	8006522 <UART_SetConfig+0x212>
 800641c:	2310      	movs	r3, #16
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e07f      	b.n	8006522 <UART_SetConfig+0x212>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5b      	ldr	r2, [pc, #364]	; (8006594 <UART_SetConfig+0x284>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d124      	bne.n	8006476 <UART_SetConfig+0x166>
 800642c:	4b57      	ldr	r3, [pc, #348]	; (800658c <UART_SetConfig+0x27c>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006434:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006438:	d011      	beq.n	800645e <UART_SetConfig+0x14e>
 800643a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800643e:	d817      	bhi.n	8006470 <UART_SetConfig+0x160>
 8006440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006444:	d011      	beq.n	800646a <UART_SetConfig+0x15a>
 8006446:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800644a:	d811      	bhi.n	8006470 <UART_SetConfig+0x160>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <UART_SetConfig+0x148>
 8006450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006454:	d006      	beq.n	8006464 <UART_SetConfig+0x154>
 8006456:	e00b      	b.n	8006470 <UART_SetConfig+0x160>
 8006458:	2300      	movs	r3, #0
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e061      	b.n	8006522 <UART_SetConfig+0x212>
 800645e:	2302      	movs	r3, #2
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e05e      	b.n	8006522 <UART_SetConfig+0x212>
 8006464:	2304      	movs	r3, #4
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e05b      	b.n	8006522 <UART_SetConfig+0x212>
 800646a:	2308      	movs	r3, #8
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e058      	b.n	8006522 <UART_SetConfig+0x212>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e055      	b.n	8006522 <UART_SetConfig+0x212>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a47      	ldr	r2, [pc, #284]	; (8006598 <UART_SetConfig+0x288>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d124      	bne.n	80064ca <UART_SetConfig+0x1ba>
 8006480:	4b42      	ldr	r3, [pc, #264]	; (800658c <UART_SetConfig+0x27c>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006488:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800648c:	d011      	beq.n	80064b2 <UART_SetConfig+0x1a2>
 800648e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006492:	d817      	bhi.n	80064c4 <UART_SetConfig+0x1b4>
 8006494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006498:	d011      	beq.n	80064be <UART_SetConfig+0x1ae>
 800649a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649e:	d811      	bhi.n	80064c4 <UART_SetConfig+0x1b4>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <UART_SetConfig+0x19c>
 80064a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a8:	d006      	beq.n	80064b8 <UART_SetConfig+0x1a8>
 80064aa:	e00b      	b.n	80064c4 <UART_SetConfig+0x1b4>
 80064ac:	2300      	movs	r3, #0
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e037      	b.n	8006522 <UART_SetConfig+0x212>
 80064b2:	2302      	movs	r3, #2
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e034      	b.n	8006522 <UART_SetConfig+0x212>
 80064b8:	2304      	movs	r3, #4
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e031      	b.n	8006522 <UART_SetConfig+0x212>
 80064be:	2308      	movs	r3, #8
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e02e      	b.n	8006522 <UART_SetConfig+0x212>
 80064c4:	2310      	movs	r3, #16
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e02b      	b.n	8006522 <UART_SetConfig+0x212>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a33      	ldr	r2, [pc, #204]	; (800659c <UART_SetConfig+0x28c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d124      	bne.n	800651e <UART_SetConfig+0x20e>
 80064d4:	4b2d      	ldr	r3, [pc, #180]	; (800658c <UART_SetConfig+0x27c>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80064dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064e0:	d011      	beq.n	8006506 <UART_SetConfig+0x1f6>
 80064e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064e6:	d817      	bhi.n	8006518 <UART_SetConfig+0x208>
 80064e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ec:	d011      	beq.n	8006512 <UART_SetConfig+0x202>
 80064ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064f2:	d811      	bhi.n	8006518 <UART_SetConfig+0x208>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x1f0>
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fc:	d006      	beq.n	800650c <UART_SetConfig+0x1fc>
 80064fe:	e00b      	b.n	8006518 <UART_SetConfig+0x208>
 8006500:	2300      	movs	r3, #0
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e00d      	b.n	8006522 <UART_SetConfig+0x212>
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e00a      	b.n	8006522 <UART_SetConfig+0x212>
 800650c:	2304      	movs	r3, #4
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e007      	b.n	8006522 <UART_SetConfig+0x212>
 8006512:	2308      	movs	r3, #8
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e004      	b.n	8006522 <UART_SetConfig+0x212>
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e001      	b.n	8006522 <UART_SetConfig+0x212>
 800651e:	2310      	movs	r3, #16
 8006520:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652a:	d16b      	bne.n	8006604 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800652c:	7ffb      	ldrb	r3, [r7, #31]
 800652e:	2b08      	cmp	r3, #8
 8006530:	d838      	bhi.n	80065a4 <UART_SetConfig+0x294>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x228>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	080065a5 	.word	0x080065a5
 8006548:	08006573 	.word	0x08006573
 800654c:	080065a5 	.word	0x080065a5
 8006550:	080065a5 	.word	0x080065a5
 8006554:	080065a5 	.word	0x080065a5
 8006558:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fc ff02 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8006560:	61b8      	str	r0, [r7, #24]
        break;
 8006562:	e024      	b.n	80065ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fc ff20 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8006568:	61b8      	str	r0, [r7, #24]
        break;
 800656a:	e020      	b.n	80065ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <UART_SetConfig+0x290>)
 800656e:	61bb      	str	r3, [r7, #24]
        break;
 8006570:	e01d      	b.n	80065ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fc fe81 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8006576:	61b8      	str	r0, [r7, #24]
        break;
 8006578:	e019      	b.n	80065ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	61bb      	str	r3, [r7, #24]
        break;
 8006580:	e015      	b.n	80065ae <UART_SetConfig+0x29e>
 8006582:	bf00      	nop
 8006584:	efff69f3 	.word	0xefff69f3
 8006588:	40013800 	.word	0x40013800
 800658c:	40021000 	.word	0x40021000
 8006590:	40004400 	.word	0x40004400
 8006594:	40004800 	.word	0x40004800
 8006598:	40004c00 	.word	0x40004c00
 800659c:	40005000 	.word	0x40005000
 80065a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	77bb      	strb	r3, [r7, #30]
        break;
 80065ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d073      	beq.n	800669c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	005a      	lsls	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	441a      	add	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b0f      	cmp	r3, #15
 80065ce:	d916      	bls.n	80065fe <UART_SetConfig+0x2ee>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d6:	d212      	bcs.n	80065fe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f023 030f 	bic.w	r3, r3, #15
 80065e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	89fa      	ldrh	r2, [r7, #14]
 80065fa:	60da      	str	r2, [r3, #12]
 80065fc:	e04e      	b.n	800669c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	77bb      	strb	r3, [r7, #30]
 8006602:	e04b      	b.n	800669c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006604:	7ffb      	ldrb	r3, [r7, #31]
 8006606:	2b08      	cmp	r3, #8
 8006608:	d827      	bhi.n	800665a <UART_SetConfig+0x34a>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x300>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006635 	.word	0x08006635
 8006614:	0800663d 	.word	0x0800663d
 8006618:	08006645 	.word	0x08006645
 800661c:	0800665b 	.word	0x0800665b
 8006620:	0800664b 	.word	0x0800664b
 8006624:	0800665b 	.word	0x0800665b
 8006628:	0800665b 	.word	0x0800665b
 800662c:	0800665b 	.word	0x0800665b
 8006630:	08006653 	.word	0x08006653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fc fe96 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8006638:	61b8      	str	r0, [r7, #24]
        break;
 800663a:	e013      	b.n	8006664 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fc feb4 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8006640:	61b8      	str	r0, [r7, #24]
        break;
 8006642:	e00f      	b.n	8006664 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <UART_SetConfig+0x3a4>)
 8006646:	61bb      	str	r3, [r7, #24]
        break;
 8006648:	e00c      	b.n	8006664 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664a:	f7fc fe15 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 800664e:	61b8      	str	r0, [r7, #24]
        break;
 8006650:	e008      	b.n	8006664 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	61bb      	str	r3, [r7, #24]
        break;
 8006658:	e004      	b.n	8006664 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	77bb      	strb	r3, [r7, #30]
        break;
 8006662:	bf00      	nop
    }

    if (pclk != 0U)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085a      	lsrs	r2, r3, #1
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b0f      	cmp	r3, #15
 8006682:	d909      	bls.n	8006698 <UART_SetConfig+0x388>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668a:	d205      	bcs.n	8006698 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	e001      	b.n	800669c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	007a1200 	.word	0x007a1200

080066b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01a      	beq.n	80067ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067b6:	d10a      	bne.n	80067ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]
  }
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b098      	sub	sp, #96	; 0x60
 8006800:	af02      	add	r7, sp, #8
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800680c:	f7fa fe7a 	bl	8001504 <HAL_GetTick>
 8006810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b08      	cmp	r3, #8
 800681e:	d12e      	bne.n	800687e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006828:	2200      	movs	r2, #0
 800682a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f88c 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d021      	beq.n	800687e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684e:	653b      	str	r3, [r7, #80]	; 0x50
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	647b      	str	r3, [r7, #68]	; 0x44
 800685a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800685e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e6      	bne.n	800683a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e062      	b.n	8006944 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b04      	cmp	r3, #4
 800688a:	d149      	bne.n	8006920 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800688c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006894:	2200      	movs	r2, #0
 8006896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f856 	bl	800694c <UART_WaitOnFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d03c      	beq.n	8006920 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	623b      	str	r3, [r7, #32]
   return(result);
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c4:	633b      	str	r3, [r7, #48]	; 0x30
 80068c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e6      	bne.n	80068a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f8:	61fa      	str	r2, [r7, #28]
 80068fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	617b      	str	r3, [r7, #20]
   return(result);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e011      	b.n	8006944 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3758      	adds	r7, #88	; 0x58
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695c:	e049      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d045      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fa fdcd 	bl	8001504 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <UART_WaitOnFlagUntilTimeout+0x30>
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e048      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d031      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d110      	bne.n	80069be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2208      	movs	r2, #8
 80069a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f8ff 	bl	8006ba8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2208      	movs	r2, #8
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e029      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069cc:	d111      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f8e5 	bl	8006ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e00f      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d0a6      	beq.n	800695e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b097      	sub	sp, #92	; 0x5c
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4e:	d10e      	bne.n	8006a6e <UART_Start_Receive_IT+0x52>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <UART_Start_Receive_IT+0x48>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a62:	e02d      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	22ff      	movs	r2, #255	; 0xff
 8006a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a6c:	e028      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10d      	bne.n	8006a92 <UART_Start_Receive_IT+0x76>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <UART_Start_Receive_IT+0x6c>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a86:	e01b      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	227f      	movs	r2, #127	; 0x7f
 8006a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a90:	e016      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a9a:	d10d      	bne.n	8006ab8 <UART_Start_Receive_IT+0x9c>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <UART_Start_Receive_IT+0x92>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	227f      	movs	r2, #127	; 0x7f
 8006aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aac:	e008      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	223f      	movs	r2, #63	; 0x3f
 8006ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab6:	e003      	b.n	8006ac0 <UART_Start_Receive_IT+0xa4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	; 0x22
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006af0:	64ba      	str	r2, [r7, #72]	; 0x48
 8006af2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0c:	d107      	bne.n	8006b1e <UART_Start_Receive_IT+0x102>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <UART_Start_Receive_IT+0x184>)
 8006b1a:	669a      	str	r2, [r3, #104]	; 0x68
 8006b1c:	e002      	b.n	8006b24 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <UART_Start_Receive_IT+0x188>)
 8006b22:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d019      	beq.n	8006b60 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e6      	bne.n	8006b2c <UART_Start_Receive_IT+0x110>
 8006b5e:	e018      	b.n	8006b92 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f043 0320 	orr.w	r3, r3, #32
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	69f9      	ldr	r1, [r7, #28]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e6      	bne.n	8006b60 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	375c      	adds	r7, #92	; 0x5c
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	08007011 	.word	0x08007011
 8006ba4:	08006e69 	.word	0x08006e69

08006ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b095      	sub	sp, #84	; 0x54
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bce:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3308      	adds	r3, #8
 8006be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d118      	bne.n	8006c50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0310 	bic.w	r3, r3, #16
 8006c32:	647b      	str	r3, [r7, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c64:	bf00      	nop
 8006c66:	3754      	adds	r7, #84	; 0x54
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fb28 	bl	80062e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b08f      	sub	sp, #60	; 0x3c
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ca8:	2b21      	cmp	r3, #33	; 0x21
 8006caa:	d14d      	bne.n	8006d48 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d132      	bne.n	8006d1e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e6      	bne.n	8006cb8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6979      	ldr	r1, [r7, #20]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	613b      	str	r3, [r7, #16]
   return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006d1c:	e014      	b.n	8006d48 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d48:	bf00      	nop
 8006d4a:	373c      	adds	r7, #60	; 0x3c
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b091      	sub	sp, #68	; 0x44
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d60:	2b21      	cmp	r3, #33	; 0x21
 8006d62:	d151      	bne.n	8006e08 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d132      	bne.n	8006dd6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e6      	bne.n	8006d70 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006dd4:	e018      	b.n	8006e08 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dde:	881a      	ldrh	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de8:	b292      	uxth	r2, r2
 8006dea:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	1c9a      	adds	r2, r3, #2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e08:	bf00      	nop
 8006e0a:	3744      	adds	r7, #68	; 0x44
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7f9 fdc2 	bl	80009e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e60:	bf00      	nop
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b09c      	sub	sp, #112	; 0x70
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e80:	2b22      	cmp	r3, #34	; 0x22
 8006e82:	f040 80b9 	bne.w	8006ff8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006e94:	b2d9      	uxtb	r1, r3
 8006e96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 809c 	bne.w	8007008 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ef0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f22:	647a      	str	r2, [r7, #68]	; 0x44
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d018      	beq.n	8006f8a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	623b      	str	r3, [r7, #32]
   return(result);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30
 8006f78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d12e      	bne.n	8006ff0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f023 0310 	bic.w	r3, r3, #16
 8006fac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	69b9      	ldr	r1, [r7, #24]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e6      	bne.n	8006f98 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d103      	bne.n	8006fe0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2210      	movs	r2, #16
 8006fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff f985 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fee:	e00b      	b.n	8007008 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7f9 fd2b 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 8006ff6:	e007      	b.n	8007008 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0208 	orr.w	r2, r2, #8
 8007006:	619a      	str	r2, [r3, #24]
}
 8007008:	bf00      	nop
 800700a:	3770      	adds	r7, #112	; 0x70
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b09c      	sub	sp, #112	; 0x70
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800701e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007028:	2b22      	cmp	r3, #34	; 0x22
 800702a:	f040 80b9 	bne.w	80071a0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007034:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800703e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007042:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007046:	4013      	ands	r3, r2
 8007048:	b29a      	uxth	r2, r3
 800704a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800704c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 809c 	bne.w	80071b0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800708c:	667b      	str	r3, [r7, #100]	; 0x64
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007096:	657b      	str	r3, [r7, #84]	; 0x54
 8007098:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800709c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	663b      	str	r3, [r7, #96]	; 0x60
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070ca:	643a      	str	r2, [r7, #64]	; 0x40
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d018      	beq.n	8007132 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	61fb      	str	r3, [r7, #28]
   return(result);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007120:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	2b01      	cmp	r3, #1
 8007138:	d12e      	bne.n	8007198 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	60bb      	str	r3, [r7, #8]
   return(result);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	65bb      	str	r3, [r7, #88]	; 0x58
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6979      	ldr	r1, [r7, #20]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	613b      	str	r3, [r7, #16]
   return(result);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b10      	cmp	r3, #16
 800717e:	d103      	bne.n	8007188 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2210      	movs	r2, #16
 8007186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff f8b1 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007196:	e00b      	b.n	80071b0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7f9 fc57 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 800719e:	e007      	b.n	80071b0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0208 	orr.w	r2, r2, #8
 80071ae:	619a      	str	r2, [r3, #24]
}
 80071b0:	bf00      	nop
 80071b2:	3770      	adds	r7, #112	; 0x70
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <atoi>:
 80071cc:	220a      	movs	r2, #10
 80071ce:	2100      	movs	r1, #0
 80071d0:	f000 b882 	b.w	80072d8 <strtol>

080071d4 <_strtol_l.constprop.0>:
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071da:	d001      	beq.n	80071e0 <_strtol_l.constprop.0+0xc>
 80071dc:	2b24      	cmp	r3, #36	; 0x24
 80071de:	d906      	bls.n	80071ee <_strtol_l.constprop.0+0x1a>
 80071e0:	f000 f8de 	bl	80073a0 <__errno>
 80071e4:	2316      	movs	r3, #22
 80071e6:	6003      	str	r3, [r0, #0]
 80071e8:	2000      	movs	r0, #0
 80071ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80072d4 <_strtol_l.constprop.0+0x100>
 80071f2:	460d      	mov	r5, r1
 80071f4:	462e      	mov	r6, r5
 80071f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80071fe:	f017 0708 	ands.w	r7, r7, #8
 8007202:	d1f7      	bne.n	80071f4 <_strtol_l.constprop.0+0x20>
 8007204:	2c2d      	cmp	r4, #45	; 0x2d
 8007206:	d132      	bne.n	800726e <_strtol_l.constprop.0+0x9a>
 8007208:	782c      	ldrb	r4, [r5, #0]
 800720a:	2701      	movs	r7, #1
 800720c:	1cb5      	adds	r5, r6, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d05b      	beq.n	80072ca <_strtol_l.constprop.0+0xf6>
 8007212:	2b10      	cmp	r3, #16
 8007214:	d109      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 8007216:	2c30      	cmp	r4, #48	; 0x30
 8007218:	d107      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 800721a:	782c      	ldrb	r4, [r5, #0]
 800721c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007220:	2c58      	cmp	r4, #88	; 0x58
 8007222:	d14d      	bne.n	80072c0 <_strtol_l.constprop.0+0xec>
 8007224:	786c      	ldrb	r4, [r5, #1]
 8007226:	2310      	movs	r3, #16
 8007228:	3502      	adds	r5, #2
 800722a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800722e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007232:	f04f 0e00 	mov.w	lr, #0
 8007236:	fbb8 f9f3 	udiv	r9, r8, r3
 800723a:	4676      	mov	r6, lr
 800723c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007240:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007244:	f1bc 0f09 	cmp.w	ip, #9
 8007248:	d816      	bhi.n	8007278 <_strtol_l.constprop.0+0xa4>
 800724a:	4664      	mov	r4, ip
 800724c:	42a3      	cmp	r3, r4
 800724e:	dd24      	ble.n	800729a <_strtol_l.constprop.0+0xc6>
 8007250:	f1be 3fff 	cmp.w	lr, #4294967295
 8007254:	d008      	beq.n	8007268 <_strtol_l.constprop.0+0x94>
 8007256:	45b1      	cmp	r9, r6
 8007258:	d31c      	bcc.n	8007294 <_strtol_l.constprop.0+0xc0>
 800725a:	d101      	bne.n	8007260 <_strtol_l.constprop.0+0x8c>
 800725c:	45a2      	cmp	sl, r4
 800725e:	db19      	blt.n	8007294 <_strtol_l.constprop.0+0xc0>
 8007260:	fb06 4603 	mla	r6, r6, r3, r4
 8007264:	f04f 0e01 	mov.w	lr, #1
 8007268:	f815 4b01 	ldrb.w	r4, [r5], #1
 800726c:	e7e8      	b.n	8007240 <_strtol_l.constprop.0+0x6c>
 800726e:	2c2b      	cmp	r4, #43	; 0x2b
 8007270:	bf04      	itt	eq
 8007272:	782c      	ldrbeq	r4, [r5, #0]
 8007274:	1cb5      	addeq	r5, r6, #2
 8007276:	e7ca      	b.n	800720e <_strtol_l.constprop.0+0x3a>
 8007278:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800727c:	f1bc 0f19 	cmp.w	ip, #25
 8007280:	d801      	bhi.n	8007286 <_strtol_l.constprop.0+0xb2>
 8007282:	3c37      	subs	r4, #55	; 0x37
 8007284:	e7e2      	b.n	800724c <_strtol_l.constprop.0+0x78>
 8007286:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800728a:	f1bc 0f19 	cmp.w	ip, #25
 800728e:	d804      	bhi.n	800729a <_strtol_l.constprop.0+0xc6>
 8007290:	3c57      	subs	r4, #87	; 0x57
 8007292:	e7db      	b.n	800724c <_strtol_l.constprop.0+0x78>
 8007294:	f04f 3eff 	mov.w	lr, #4294967295
 8007298:	e7e6      	b.n	8007268 <_strtol_l.constprop.0+0x94>
 800729a:	f1be 3fff 	cmp.w	lr, #4294967295
 800729e:	d105      	bne.n	80072ac <_strtol_l.constprop.0+0xd8>
 80072a0:	2322      	movs	r3, #34	; 0x22
 80072a2:	6003      	str	r3, [r0, #0]
 80072a4:	4646      	mov	r6, r8
 80072a6:	b942      	cbnz	r2, 80072ba <_strtol_l.constprop.0+0xe6>
 80072a8:	4630      	mov	r0, r6
 80072aa:	e79e      	b.n	80071ea <_strtol_l.constprop.0+0x16>
 80072ac:	b107      	cbz	r7, 80072b0 <_strtol_l.constprop.0+0xdc>
 80072ae:	4276      	negs	r6, r6
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d0f9      	beq.n	80072a8 <_strtol_l.constprop.0+0xd4>
 80072b4:	f1be 0f00 	cmp.w	lr, #0
 80072b8:	d000      	beq.n	80072bc <_strtol_l.constprop.0+0xe8>
 80072ba:	1e69      	subs	r1, r5, #1
 80072bc:	6011      	str	r1, [r2, #0]
 80072be:	e7f3      	b.n	80072a8 <_strtol_l.constprop.0+0xd4>
 80072c0:	2430      	movs	r4, #48	; 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1b1      	bne.n	800722a <_strtol_l.constprop.0+0x56>
 80072c6:	2308      	movs	r3, #8
 80072c8:	e7af      	b.n	800722a <_strtol_l.constprop.0+0x56>
 80072ca:	2c30      	cmp	r4, #48	; 0x30
 80072cc:	d0a5      	beq.n	800721a <_strtol_l.constprop.0+0x46>
 80072ce:	230a      	movs	r3, #10
 80072d0:	e7ab      	b.n	800722a <_strtol_l.constprop.0+0x56>
 80072d2:	bf00      	nop
 80072d4:	08007d19 	.word	0x08007d19

080072d8 <strtol>:
 80072d8:	4613      	mov	r3, r2
 80072da:	460a      	mov	r2, r1
 80072dc:	4601      	mov	r1, r0
 80072de:	4802      	ldr	r0, [pc, #8]	; (80072e8 <strtol+0x10>)
 80072e0:	6800      	ldr	r0, [r0, #0]
 80072e2:	f7ff bf77 	b.w	80071d4 <_strtol_l.constprop.0>
 80072e6:	bf00      	nop
 80072e8:	20000080 	.word	0x20000080

080072ec <siprintf>:
 80072ec:	b40e      	push	{r1, r2, r3}
 80072ee:	b500      	push	{lr}
 80072f0:	b09c      	sub	sp, #112	; 0x70
 80072f2:	ab1d      	add	r3, sp, #116	; 0x74
 80072f4:	9002      	str	r0, [sp, #8]
 80072f6:	9006      	str	r0, [sp, #24]
 80072f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072fc:	4809      	ldr	r0, [pc, #36]	; (8007324 <siprintf+0x38>)
 80072fe:	9107      	str	r1, [sp, #28]
 8007300:	9104      	str	r1, [sp, #16]
 8007302:	4909      	ldr	r1, [pc, #36]	; (8007328 <siprintf+0x3c>)
 8007304:	f853 2b04 	ldr.w	r2, [r3], #4
 8007308:	9105      	str	r1, [sp, #20]
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	a902      	add	r1, sp, #8
 8007310:	f000 f9d2 	bl	80076b8 <_svfiprintf_r>
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	b01c      	add	sp, #112	; 0x70
 800731c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007320:	b003      	add	sp, #12
 8007322:	4770      	bx	lr
 8007324:	20000080 	.word	0x20000080
 8007328:	ffff0208 	.word	0xffff0208

0800732c <_vsiprintf_r>:
 800732c:	b500      	push	{lr}
 800732e:	b09b      	sub	sp, #108	; 0x6c
 8007330:	9100      	str	r1, [sp, #0]
 8007332:	9104      	str	r1, [sp, #16]
 8007334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007338:	9105      	str	r1, [sp, #20]
 800733a:	9102      	str	r1, [sp, #8]
 800733c:	4905      	ldr	r1, [pc, #20]	; (8007354 <_vsiprintf_r+0x28>)
 800733e:	9103      	str	r1, [sp, #12]
 8007340:	4669      	mov	r1, sp
 8007342:	f000 f9b9 	bl	80076b8 <_svfiprintf_r>
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	b01b      	add	sp, #108	; 0x6c
 800734e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007352:	bf00      	nop
 8007354:	ffff0208 	.word	0xffff0208

08007358 <vsiprintf>:
 8007358:	4613      	mov	r3, r2
 800735a:	460a      	mov	r2, r1
 800735c:	4601      	mov	r1, r0
 800735e:	4802      	ldr	r0, [pc, #8]	; (8007368 <vsiprintf+0x10>)
 8007360:	6800      	ldr	r0, [r0, #0]
 8007362:	f7ff bfe3 	b.w	800732c <_vsiprintf_r>
 8007366:	bf00      	nop
 8007368:	20000080 	.word	0x20000080

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <strncmp>:
 800737c:	b510      	push	{r4, lr}
 800737e:	b16a      	cbz	r2, 800739c <strncmp+0x20>
 8007380:	3901      	subs	r1, #1
 8007382:	1884      	adds	r4, r0, r2
 8007384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007388:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800738c:	429a      	cmp	r2, r3
 800738e:	d103      	bne.n	8007398 <strncmp+0x1c>
 8007390:	42a0      	cmp	r0, r4
 8007392:	d001      	beq.n	8007398 <strncmp+0x1c>
 8007394:	2a00      	cmp	r2, #0
 8007396:	d1f5      	bne.n	8007384 <strncmp+0x8>
 8007398:	1ad0      	subs	r0, r2, r3
 800739a:	bd10      	pop	{r4, pc}
 800739c:	4610      	mov	r0, r2
 800739e:	e7fc      	b.n	800739a <strncmp+0x1e>

080073a0 <__errno>:
 80073a0:	4b01      	ldr	r3, [pc, #4]	; (80073a8 <__errno+0x8>)
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	20000080 	.word	0x20000080

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	4d0d      	ldr	r5, [pc, #52]	; (80073e4 <__libc_init_array+0x38>)
 80073b0:	4c0d      	ldr	r4, [pc, #52]	; (80073e8 <__libc_init_array+0x3c>)
 80073b2:	1b64      	subs	r4, r4, r5
 80073b4:	10a4      	asrs	r4, r4, #2
 80073b6:	2600      	movs	r6, #0
 80073b8:	42a6      	cmp	r6, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	4d0b      	ldr	r5, [pc, #44]	; (80073ec <__libc_init_array+0x40>)
 80073be:	4c0c      	ldr	r4, [pc, #48]	; (80073f0 <__libc_init_array+0x44>)
 80073c0:	f000 fc6a 	bl	8007c98 <_init>
 80073c4:	1b64      	subs	r4, r4, r5
 80073c6:	10a4      	asrs	r4, r4, #2
 80073c8:	2600      	movs	r6, #0
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d4:	4798      	blx	r3
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f855 3b04 	ldr.w	r3, [r5], #4
 80073de:	4798      	blx	r3
 80073e0:	3601      	adds	r6, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	08007e4c 	.word	0x08007e4c
 80073e8:	08007e4c 	.word	0x08007e4c
 80073ec:	08007e4c 	.word	0x08007e4c
 80073f0:	08007e50 	.word	0x08007e50

080073f4 <__retarget_lock_acquire_recursive>:
 80073f4:	4770      	bx	lr

080073f6 <__retarget_lock_release_recursive>:
 80073f6:	4770      	bx	lr

080073f8 <memcpy>:
 80073f8:	440a      	add	r2, r1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007400:	d100      	bne.n	8007404 <memcpy+0xc>
 8007402:	4770      	bx	lr
 8007404:	b510      	push	{r4, lr}
 8007406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740e:	4291      	cmp	r1, r2
 8007410:	d1f9      	bne.n	8007406 <memcpy+0xe>
 8007412:	bd10      	pop	{r4, pc}

08007414 <_free_r>:
 8007414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007416:	2900      	cmp	r1, #0
 8007418:	d044      	beq.n	80074a4 <_free_r+0x90>
 800741a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741e:	9001      	str	r0, [sp, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f1a1 0404 	sub.w	r4, r1, #4
 8007426:	bfb8      	it	lt
 8007428:	18e4      	addlt	r4, r4, r3
 800742a:	f000 f8df 	bl	80075ec <__malloc_lock>
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <_free_r+0x94>)
 8007430:	9801      	ldr	r0, [sp, #4]
 8007432:	6813      	ldr	r3, [r2, #0]
 8007434:	b933      	cbnz	r3, 8007444 <_free_r+0x30>
 8007436:	6063      	str	r3, [r4, #4]
 8007438:	6014      	str	r4, [r2, #0]
 800743a:	b003      	add	sp, #12
 800743c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007440:	f000 b8da 	b.w	80075f8 <__malloc_unlock>
 8007444:	42a3      	cmp	r3, r4
 8007446:	d908      	bls.n	800745a <_free_r+0x46>
 8007448:	6825      	ldr	r5, [r4, #0]
 800744a:	1961      	adds	r1, r4, r5
 800744c:	428b      	cmp	r3, r1
 800744e:	bf01      	itttt	eq
 8007450:	6819      	ldreq	r1, [r3, #0]
 8007452:	685b      	ldreq	r3, [r3, #4]
 8007454:	1949      	addeq	r1, r1, r5
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	e7ed      	b.n	8007436 <_free_r+0x22>
 800745a:	461a      	mov	r2, r3
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	b10b      	cbz	r3, 8007464 <_free_r+0x50>
 8007460:	42a3      	cmp	r3, r4
 8007462:	d9fa      	bls.n	800745a <_free_r+0x46>
 8007464:	6811      	ldr	r1, [r2, #0]
 8007466:	1855      	adds	r5, r2, r1
 8007468:	42a5      	cmp	r5, r4
 800746a:	d10b      	bne.n	8007484 <_free_r+0x70>
 800746c:	6824      	ldr	r4, [r4, #0]
 800746e:	4421      	add	r1, r4
 8007470:	1854      	adds	r4, r2, r1
 8007472:	42a3      	cmp	r3, r4
 8007474:	6011      	str	r1, [r2, #0]
 8007476:	d1e0      	bne.n	800743a <_free_r+0x26>
 8007478:	681c      	ldr	r4, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	6053      	str	r3, [r2, #4]
 800747e:	440c      	add	r4, r1
 8007480:	6014      	str	r4, [r2, #0]
 8007482:	e7da      	b.n	800743a <_free_r+0x26>
 8007484:	d902      	bls.n	800748c <_free_r+0x78>
 8007486:	230c      	movs	r3, #12
 8007488:	6003      	str	r3, [r0, #0]
 800748a:	e7d6      	b.n	800743a <_free_r+0x26>
 800748c:	6825      	ldr	r5, [r4, #0]
 800748e:	1961      	adds	r1, r4, r5
 8007490:	428b      	cmp	r3, r1
 8007492:	bf04      	itt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	bf04      	itt	eq
 800749c:	1949      	addeq	r1, r1, r5
 800749e:	6021      	streq	r1, [r4, #0]
 80074a0:	6054      	str	r4, [r2, #4]
 80074a2:	e7ca      	b.n	800743a <_free_r+0x26>
 80074a4:	b003      	add	sp, #12
 80074a6:	bd30      	pop	{r4, r5, pc}
 80074a8:	200008c0 	.word	0x200008c0

080074ac <sbrk_aligned>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	4e0e      	ldr	r6, [pc, #56]	; (80074e8 <sbrk_aligned+0x3c>)
 80074b0:	460c      	mov	r4, r1
 80074b2:	6831      	ldr	r1, [r6, #0]
 80074b4:	4605      	mov	r5, r0
 80074b6:	b911      	cbnz	r1, 80074be <sbrk_aligned+0x12>
 80074b8:	f000 fba6 	bl	8007c08 <_sbrk_r>
 80074bc:	6030      	str	r0, [r6, #0]
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 fba1 	bl	8007c08 <_sbrk_r>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d00a      	beq.n	80074e0 <sbrk_aligned+0x34>
 80074ca:	1cc4      	adds	r4, r0, #3
 80074cc:	f024 0403 	bic.w	r4, r4, #3
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d007      	beq.n	80074e4 <sbrk_aligned+0x38>
 80074d4:	1a21      	subs	r1, r4, r0
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 fb96 	bl	8007c08 <_sbrk_r>
 80074dc:	3001      	adds	r0, #1
 80074de:	d101      	bne.n	80074e4 <sbrk_aligned+0x38>
 80074e0:	f04f 34ff 	mov.w	r4, #4294967295
 80074e4:	4620      	mov	r0, r4
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	200008c4 	.word	0x200008c4

080074ec <_malloc_r>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	1ccd      	adds	r5, r1, #3
 80074f2:	f025 0503 	bic.w	r5, r5, #3
 80074f6:	3508      	adds	r5, #8
 80074f8:	2d0c      	cmp	r5, #12
 80074fa:	bf38      	it	cc
 80074fc:	250c      	movcc	r5, #12
 80074fe:	2d00      	cmp	r5, #0
 8007500:	4607      	mov	r7, r0
 8007502:	db01      	blt.n	8007508 <_malloc_r+0x1c>
 8007504:	42a9      	cmp	r1, r5
 8007506:	d905      	bls.n	8007514 <_malloc_r+0x28>
 8007508:	230c      	movs	r3, #12
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	2600      	movs	r6, #0
 800750e:	4630      	mov	r0, r6
 8007510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075e8 <_malloc_r+0xfc>
 8007518:	f000 f868 	bl	80075ec <__malloc_lock>
 800751c:	f8d8 3000 	ldr.w	r3, [r8]
 8007520:	461c      	mov	r4, r3
 8007522:	bb5c      	cbnz	r4, 800757c <_malloc_r+0x90>
 8007524:	4629      	mov	r1, r5
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff ffc0 	bl	80074ac <sbrk_aligned>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	4604      	mov	r4, r0
 8007530:	d155      	bne.n	80075de <_malloc_r+0xf2>
 8007532:	f8d8 4000 	ldr.w	r4, [r8]
 8007536:	4626      	mov	r6, r4
 8007538:	2e00      	cmp	r6, #0
 800753a:	d145      	bne.n	80075c8 <_malloc_r+0xdc>
 800753c:	2c00      	cmp	r4, #0
 800753e:	d048      	beq.n	80075d2 <_malloc_r+0xe6>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	4631      	mov	r1, r6
 8007544:	4638      	mov	r0, r7
 8007546:	eb04 0903 	add.w	r9, r4, r3
 800754a:	f000 fb5d 	bl	8007c08 <_sbrk_r>
 800754e:	4581      	cmp	r9, r0
 8007550:	d13f      	bne.n	80075d2 <_malloc_r+0xe6>
 8007552:	6821      	ldr	r1, [r4, #0]
 8007554:	1a6d      	subs	r5, r5, r1
 8007556:	4629      	mov	r1, r5
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ffa7 	bl	80074ac <sbrk_aligned>
 800755e:	3001      	adds	r0, #1
 8007560:	d037      	beq.n	80075d2 <_malloc_r+0xe6>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	442b      	add	r3, r5
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	f8d8 3000 	ldr.w	r3, [r8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d038      	beq.n	80075e2 <_malloc_r+0xf6>
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	42a2      	cmp	r2, r4
 8007574:	d12b      	bne.n	80075ce <_malloc_r+0xe2>
 8007576:	2200      	movs	r2, #0
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	e00f      	b.n	800759c <_malloc_r+0xb0>
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	1b52      	subs	r2, r2, r5
 8007580:	d41f      	bmi.n	80075c2 <_malloc_r+0xd6>
 8007582:	2a0b      	cmp	r2, #11
 8007584:	d917      	bls.n	80075b6 <_malloc_r+0xca>
 8007586:	1961      	adds	r1, r4, r5
 8007588:	42a3      	cmp	r3, r4
 800758a:	6025      	str	r5, [r4, #0]
 800758c:	bf18      	it	ne
 800758e:	6059      	strne	r1, [r3, #4]
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	bf08      	it	eq
 8007594:	f8c8 1000 	streq.w	r1, [r8]
 8007598:	5162      	str	r2, [r4, r5]
 800759a:	604b      	str	r3, [r1, #4]
 800759c:	4638      	mov	r0, r7
 800759e:	f104 060b 	add.w	r6, r4, #11
 80075a2:	f000 f829 	bl	80075f8 <__malloc_unlock>
 80075a6:	f026 0607 	bic.w	r6, r6, #7
 80075aa:	1d23      	adds	r3, r4, #4
 80075ac:	1af2      	subs	r2, r6, r3
 80075ae:	d0ae      	beq.n	800750e <_malloc_r+0x22>
 80075b0:	1b9b      	subs	r3, r3, r6
 80075b2:	50a3      	str	r3, [r4, r2]
 80075b4:	e7ab      	b.n	800750e <_malloc_r+0x22>
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	6862      	ldr	r2, [r4, #4]
 80075ba:	d1dd      	bne.n	8007578 <_malloc_r+0x8c>
 80075bc:	f8c8 2000 	str.w	r2, [r8]
 80075c0:	e7ec      	b.n	800759c <_malloc_r+0xb0>
 80075c2:	4623      	mov	r3, r4
 80075c4:	6864      	ldr	r4, [r4, #4]
 80075c6:	e7ac      	b.n	8007522 <_malloc_r+0x36>
 80075c8:	4634      	mov	r4, r6
 80075ca:	6876      	ldr	r6, [r6, #4]
 80075cc:	e7b4      	b.n	8007538 <_malloc_r+0x4c>
 80075ce:	4613      	mov	r3, r2
 80075d0:	e7cc      	b.n	800756c <_malloc_r+0x80>
 80075d2:	230c      	movs	r3, #12
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	4638      	mov	r0, r7
 80075d8:	f000 f80e 	bl	80075f8 <__malloc_unlock>
 80075dc:	e797      	b.n	800750e <_malloc_r+0x22>
 80075de:	6025      	str	r5, [r4, #0]
 80075e0:	e7dc      	b.n	800759c <_malloc_r+0xb0>
 80075e2:	605b      	str	r3, [r3, #4]
 80075e4:	deff      	udf	#255	; 0xff
 80075e6:	bf00      	nop
 80075e8:	200008c0 	.word	0x200008c0

080075ec <__malloc_lock>:
 80075ec:	4801      	ldr	r0, [pc, #4]	; (80075f4 <__malloc_lock+0x8>)
 80075ee:	f7ff bf01 	b.w	80073f4 <__retarget_lock_acquire_recursive>
 80075f2:	bf00      	nop
 80075f4:	200008bc 	.word	0x200008bc

080075f8 <__malloc_unlock>:
 80075f8:	4801      	ldr	r0, [pc, #4]	; (8007600 <__malloc_unlock+0x8>)
 80075fa:	f7ff befc 	b.w	80073f6 <__retarget_lock_release_recursive>
 80075fe:	bf00      	nop
 8007600:	200008bc 	.word	0x200008bc

08007604 <__ssputs_r>:
 8007604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	688e      	ldr	r6, [r1, #8]
 800760a:	461f      	mov	r7, r3
 800760c:	42be      	cmp	r6, r7
 800760e:	680b      	ldr	r3, [r1, #0]
 8007610:	4682      	mov	sl, r0
 8007612:	460c      	mov	r4, r1
 8007614:	4690      	mov	r8, r2
 8007616:	d82c      	bhi.n	8007672 <__ssputs_r+0x6e>
 8007618:	898a      	ldrh	r2, [r1, #12]
 800761a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800761e:	d026      	beq.n	800766e <__ssputs_r+0x6a>
 8007620:	6965      	ldr	r5, [r4, #20]
 8007622:	6909      	ldr	r1, [r1, #16]
 8007624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007628:	eba3 0901 	sub.w	r9, r3, r1
 800762c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007630:	1c7b      	adds	r3, r7, #1
 8007632:	444b      	add	r3, r9
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	429d      	cmp	r5, r3
 8007638:	bf38      	it	cc
 800763a:	461d      	movcc	r5, r3
 800763c:	0553      	lsls	r3, r2, #21
 800763e:	d527      	bpl.n	8007690 <__ssputs_r+0x8c>
 8007640:	4629      	mov	r1, r5
 8007642:	f7ff ff53 	bl	80074ec <_malloc_r>
 8007646:	4606      	mov	r6, r0
 8007648:	b360      	cbz	r0, 80076a4 <__ssputs_r+0xa0>
 800764a:	6921      	ldr	r1, [r4, #16]
 800764c:	464a      	mov	r2, r9
 800764e:	f7ff fed3 	bl	80073f8 <memcpy>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	6126      	str	r6, [r4, #16]
 8007660:	6165      	str	r5, [r4, #20]
 8007662:	444e      	add	r6, r9
 8007664:	eba5 0509 	sub.w	r5, r5, r9
 8007668:	6026      	str	r6, [r4, #0]
 800766a:	60a5      	str	r5, [r4, #8]
 800766c:	463e      	mov	r6, r7
 800766e:	42be      	cmp	r6, r7
 8007670:	d900      	bls.n	8007674 <__ssputs_r+0x70>
 8007672:	463e      	mov	r6, r7
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	4632      	mov	r2, r6
 8007678:	4641      	mov	r1, r8
 800767a:	f000 faab 	bl	8007bd4 <memmove>
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	1b9b      	subs	r3, r3, r6
 8007682:	60a3      	str	r3, [r4, #8]
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	4433      	add	r3, r6
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	2000      	movs	r0, #0
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	462a      	mov	r2, r5
 8007692:	f000 fac9 	bl	8007c28 <_realloc_r>
 8007696:	4606      	mov	r6, r0
 8007698:	2800      	cmp	r0, #0
 800769a:	d1e0      	bne.n	800765e <__ssputs_r+0x5a>
 800769c:	6921      	ldr	r1, [r4, #16]
 800769e:	4650      	mov	r0, sl
 80076a0:	f7ff feb8 	bl	8007414 <_free_r>
 80076a4:	230c      	movs	r3, #12
 80076a6:	f8ca 3000 	str.w	r3, [sl]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	e7e9      	b.n	800768c <__ssputs_r+0x88>

080076b8 <_svfiprintf_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4698      	mov	r8, r3
 80076be:	898b      	ldrh	r3, [r1, #12]
 80076c0:	061b      	lsls	r3, r3, #24
 80076c2:	b09d      	sub	sp, #116	; 0x74
 80076c4:	4607      	mov	r7, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	4614      	mov	r4, r2
 80076ca:	d50e      	bpl.n	80076ea <_svfiprintf_r+0x32>
 80076cc:	690b      	ldr	r3, [r1, #16]
 80076ce:	b963      	cbnz	r3, 80076ea <_svfiprintf_r+0x32>
 80076d0:	2140      	movs	r1, #64	; 0x40
 80076d2:	f7ff ff0b 	bl	80074ec <_malloc_r>
 80076d6:	6028      	str	r0, [r5, #0]
 80076d8:	6128      	str	r0, [r5, #16]
 80076da:	b920      	cbnz	r0, 80076e6 <_svfiprintf_r+0x2e>
 80076dc:	230c      	movs	r3, #12
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	e0d0      	b.n	8007888 <_svfiprintf_r+0x1d0>
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	616b      	str	r3, [r5, #20]
 80076ea:	2300      	movs	r3, #0
 80076ec:	9309      	str	r3, [sp, #36]	; 0x24
 80076ee:	2320      	movs	r3, #32
 80076f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076f8:	2330      	movs	r3, #48	; 0x30
 80076fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078a0 <_svfiprintf_r+0x1e8>
 80076fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007702:	f04f 0901 	mov.w	r9, #1
 8007706:	4623      	mov	r3, r4
 8007708:	469a      	mov	sl, r3
 800770a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800770e:	b10a      	cbz	r2, 8007714 <_svfiprintf_r+0x5c>
 8007710:	2a25      	cmp	r2, #37	; 0x25
 8007712:	d1f9      	bne.n	8007708 <_svfiprintf_r+0x50>
 8007714:	ebba 0b04 	subs.w	fp, sl, r4
 8007718:	d00b      	beq.n	8007732 <_svfiprintf_r+0x7a>
 800771a:	465b      	mov	r3, fp
 800771c:	4622      	mov	r2, r4
 800771e:	4629      	mov	r1, r5
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff ff6f 	bl	8007604 <__ssputs_r>
 8007726:	3001      	adds	r0, #1
 8007728:	f000 80a9 	beq.w	800787e <_svfiprintf_r+0x1c6>
 800772c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800772e:	445a      	add	r2, fp
 8007730:	9209      	str	r2, [sp, #36]	; 0x24
 8007732:	f89a 3000 	ldrb.w	r3, [sl]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80a1 	beq.w	800787e <_svfiprintf_r+0x1c6>
 800773c:	2300      	movs	r3, #0
 800773e:	f04f 32ff 	mov.w	r2, #4294967295
 8007742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007746:	f10a 0a01 	add.w	sl, sl, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	9307      	str	r3, [sp, #28]
 800774e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007752:	931a      	str	r3, [sp, #104]	; 0x68
 8007754:	4654      	mov	r4, sl
 8007756:	2205      	movs	r2, #5
 8007758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775c:	4850      	ldr	r0, [pc, #320]	; (80078a0 <_svfiprintf_r+0x1e8>)
 800775e:	f7f8 fd47 	bl	80001f0 <memchr>
 8007762:	9a04      	ldr	r2, [sp, #16]
 8007764:	b9d8      	cbnz	r0, 800779e <_svfiprintf_r+0xe6>
 8007766:	06d0      	lsls	r0, r2, #27
 8007768:	bf44      	itt	mi
 800776a:	2320      	movmi	r3, #32
 800776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007770:	0711      	lsls	r1, r2, #28
 8007772:	bf44      	itt	mi
 8007774:	232b      	movmi	r3, #43	; 0x2b
 8007776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800777a:	f89a 3000 	ldrb.w	r3, [sl]
 800777e:	2b2a      	cmp	r3, #42	; 0x2a
 8007780:	d015      	beq.n	80077ae <_svfiprintf_r+0xf6>
 8007782:	9a07      	ldr	r2, [sp, #28]
 8007784:	4654      	mov	r4, sl
 8007786:	2000      	movs	r0, #0
 8007788:	f04f 0c0a 	mov.w	ip, #10
 800778c:	4621      	mov	r1, r4
 800778e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007792:	3b30      	subs	r3, #48	; 0x30
 8007794:	2b09      	cmp	r3, #9
 8007796:	d94d      	bls.n	8007834 <_svfiprintf_r+0x17c>
 8007798:	b1b0      	cbz	r0, 80077c8 <_svfiprintf_r+0x110>
 800779a:	9207      	str	r2, [sp, #28]
 800779c:	e014      	b.n	80077c8 <_svfiprintf_r+0x110>
 800779e:	eba0 0308 	sub.w	r3, r0, r8
 80077a2:	fa09 f303 	lsl.w	r3, r9, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	46a2      	mov	sl, r4
 80077ac:	e7d2      	b.n	8007754 <_svfiprintf_r+0x9c>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	1d19      	adds	r1, r3, #4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	9103      	str	r1, [sp, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bfbb      	ittet	lt
 80077ba:	425b      	neglt	r3, r3
 80077bc:	f042 0202 	orrlt.w	r2, r2, #2
 80077c0:	9307      	strge	r3, [sp, #28]
 80077c2:	9307      	strlt	r3, [sp, #28]
 80077c4:	bfb8      	it	lt
 80077c6:	9204      	strlt	r2, [sp, #16]
 80077c8:	7823      	ldrb	r3, [r4, #0]
 80077ca:	2b2e      	cmp	r3, #46	; 0x2e
 80077cc:	d10c      	bne.n	80077e8 <_svfiprintf_r+0x130>
 80077ce:	7863      	ldrb	r3, [r4, #1]
 80077d0:	2b2a      	cmp	r3, #42	; 0x2a
 80077d2:	d134      	bne.n	800783e <_svfiprintf_r+0x186>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	9203      	str	r2, [sp, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfb8      	it	lt
 80077e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80077e4:	3402      	adds	r4, #2
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078b0 <_svfiprintf_r+0x1f8>
 80077ec:	7821      	ldrb	r1, [r4, #0]
 80077ee:	2203      	movs	r2, #3
 80077f0:	4650      	mov	r0, sl
 80077f2:	f7f8 fcfd 	bl	80001f0 <memchr>
 80077f6:	b138      	cbz	r0, 8007808 <_svfiprintf_r+0x150>
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	eba0 000a 	sub.w	r0, r0, sl
 80077fe:	2240      	movs	r2, #64	; 0x40
 8007800:	4082      	lsls	r2, r0
 8007802:	4313      	orrs	r3, r2
 8007804:	3401      	adds	r4, #1
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780c:	4825      	ldr	r0, [pc, #148]	; (80078a4 <_svfiprintf_r+0x1ec>)
 800780e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007812:	2206      	movs	r2, #6
 8007814:	f7f8 fcec 	bl	80001f0 <memchr>
 8007818:	2800      	cmp	r0, #0
 800781a:	d038      	beq.n	800788e <_svfiprintf_r+0x1d6>
 800781c:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <_svfiprintf_r+0x1f0>)
 800781e:	bb1b      	cbnz	r3, 8007868 <_svfiprintf_r+0x1b0>
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	3307      	adds	r3, #7
 8007824:	f023 0307 	bic.w	r3, r3, #7
 8007828:	3308      	adds	r3, #8
 800782a:	9303      	str	r3, [sp, #12]
 800782c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782e:	4433      	add	r3, r6
 8007830:	9309      	str	r3, [sp, #36]	; 0x24
 8007832:	e768      	b.n	8007706 <_svfiprintf_r+0x4e>
 8007834:	fb0c 3202 	mla	r2, ip, r2, r3
 8007838:	460c      	mov	r4, r1
 800783a:	2001      	movs	r0, #1
 800783c:	e7a6      	b.n	800778c <_svfiprintf_r+0xd4>
 800783e:	2300      	movs	r3, #0
 8007840:	3401      	adds	r4, #1
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	4619      	mov	r1, r3
 8007846:	f04f 0c0a 	mov.w	ip, #10
 800784a:	4620      	mov	r0, r4
 800784c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007850:	3a30      	subs	r2, #48	; 0x30
 8007852:	2a09      	cmp	r2, #9
 8007854:	d903      	bls.n	800785e <_svfiprintf_r+0x1a6>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0c6      	beq.n	80077e8 <_svfiprintf_r+0x130>
 800785a:	9105      	str	r1, [sp, #20]
 800785c:	e7c4      	b.n	80077e8 <_svfiprintf_r+0x130>
 800785e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007862:	4604      	mov	r4, r0
 8007864:	2301      	movs	r3, #1
 8007866:	e7f0      	b.n	800784a <_svfiprintf_r+0x192>
 8007868:	ab03      	add	r3, sp, #12
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	462a      	mov	r2, r5
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <_svfiprintf_r+0x1f4>)
 8007870:	a904      	add	r1, sp, #16
 8007872:	4638      	mov	r0, r7
 8007874:	f3af 8000 	nop.w
 8007878:	1c42      	adds	r2, r0, #1
 800787a:	4606      	mov	r6, r0
 800787c:	d1d6      	bne.n	800782c <_svfiprintf_r+0x174>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	065b      	lsls	r3, r3, #25
 8007882:	f53f af2d 	bmi.w	80076e0 <_svfiprintf_r+0x28>
 8007886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007888:	b01d      	add	sp, #116	; 0x74
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <_svfiprintf_r+0x1f4>)
 8007896:	a904      	add	r1, sp, #16
 8007898:	4638      	mov	r0, r7
 800789a:	f000 f879 	bl	8007990 <_printf_i>
 800789e:	e7eb      	b.n	8007878 <_svfiprintf_r+0x1c0>
 80078a0:	08007e19 	.word	0x08007e19
 80078a4:	08007e23 	.word	0x08007e23
 80078a8:	00000000 	.word	0x00000000
 80078ac:	08007605 	.word	0x08007605
 80078b0:	08007e1f 	.word	0x08007e1f

080078b4 <_printf_common>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	4616      	mov	r6, r2
 80078ba:	4699      	mov	r9, r3
 80078bc:	688a      	ldr	r2, [r1, #8]
 80078be:	690b      	ldr	r3, [r1, #16]
 80078c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078c4:	4293      	cmp	r3, r2
 80078c6:	bfb8      	it	lt
 80078c8:	4613      	movlt	r3, r2
 80078ca:	6033      	str	r3, [r6, #0]
 80078cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078d0:	4607      	mov	r7, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	b10a      	cbz	r2, 80078da <_printf_common+0x26>
 80078d6:	3301      	adds	r3, #1
 80078d8:	6033      	str	r3, [r6, #0]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	0699      	lsls	r1, r3, #26
 80078de:	bf42      	ittt	mi
 80078e0:	6833      	ldrmi	r3, [r6, #0]
 80078e2:	3302      	addmi	r3, #2
 80078e4:	6033      	strmi	r3, [r6, #0]
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	f015 0506 	ands.w	r5, r5, #6
 80078ec:	d106      	bne.n	80078fc <_printf_common+0x48>
 80078ee:	f104 0a19 	add.w	sl, r4, #25
 80078f2:	68e3      	ldr	r3, [r4, #12]
 80078f4:	6832      	ldr	r2, [r6, #0]
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	dc26      	bgt.n	800794a <_printf_common+0x96>
 80078fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007900:	1e13      	subs	r3, r2, #0
 8007902:	6822      	ldr	r2, [r4, #0]
 8007904:	bf18      	it	ne
 8007906:	2301      	movne	r3, #1
 8007908:	0692      	lsls	r2, r2, #26
 800790a:	d42b      	bmi.n	8007964 <_printf_common+0xb0>
 800790c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007910:	4649      	mov	r1, r9
 8007912:	4638      	mov	r0, r7
 8007914:	47c0      	blx	r8
 8007916:	3001      	adds	r0, #1
 8007918:	d01e      	beq.n	8007958 <_printf_common+0xa4>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	6922      	ldr	r2, [r4, #16]
 800791e:	f003 0306 	and.w	r3, r3, #6
 8007922:	2b04      	cmp	r3, #4
 8007924:	bf02      	ittt	eq
 8007926:	68e5      	ldreq	r5, [r4, #12]
 8007928:	6833      	ldreq	r3, [r6, #0]
 800792a:	1aed      	subeq	r5, r5, r3
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	bf0c      	ite	eq
 8007930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007934:	2500      	movne	r5, #0
 8007936:	4293      	cmp	r3, r2
 8007938:	bfc4      	itt	gt
 800793a:	1a9b      	subgt	r3, r3, r2
 800793c:	18ed      	addgt	r5, r5, r3
 800793e:	2600      	movs	r6, #0
 8007940:	341a      	adds	r4, #26
 8007942:	42b5      	cmp	r5, r6
 8007944:	d11a      	bne.n	800797c <_printf_common+0xc8>
 8007946:	2000      	movs	r0, #0
 8007948:	e008      	b.n	800795c <_printf_common+0xa8>
 800794a:	2301      	movs	r3, #1
 800794c:	4652      	mov	r2, sl
 800794e:	4649      	mov	r1, r9
 8007950:	4638      	mov	r0, r7
 8007952:	47c0      	blx	r8
 8007954:	3001      	adds	r0, #1
 8007956:	d103      	bne.n	8007960 <_printf_common+0xac>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	3501      	adds	r5, #1
 8007962:	e7c6      	b.n	80078f2 <_printf_common+0x3e>
 8007964:	18e1      	adds	r1, r4, r3
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	2030      	movs	r0, #48	; 0x30
 800796a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800796e:	4422      	add	r2, r4
 8007970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007978:	3302      	adds	r3, #2
 800797a:	e7c7      	b.n	800790c <_printf_common+0x58>
 800797c:	2301      	movs	r3, #1
 800797e:	4622      	mov	r2, r4
 8007980:	4649      	mov	r1, r9
 8007982:	4638      	mov	r0, r7
 8007984:	47c0      	blx	r8
 8007986:	3001      	adds	r0, #1
 8007988:	d0e6      	beq.n	8007958 <_printf_common+0xa4>
 800798a:	3601      	adds	r6, #1
 800798c:	e7d9      	b.n	8007942 <_printf_common+0x8e>
	...

08007990 <_printf_i>:
 8007990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	7e0f      	ldrb	r7, [r1, #24]
 8007996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007998:	2f78      	cmp	r7, #120	; 0x78
 800799a:	4691      	mov	r9, r2
 800799c:	4680      	mov	r8, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	469a      	mov	sl, r3
 80079a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079a6:	d807      	bhi.n	80079b8 <_printf_i+0x28>
 80079a8:	2f62      	cmp	r7, #98	; 0x62
 80079aa:	d80a      	bhi.n	80079c2 <_printf_i+0x32>
 80079ac:	2f00      	cmp	r7, #0
 80079ae:	f000 80d4 	beq.w	8007b5a <_printf_i+0x1ca>
 80079b2:	2f58      	cmp	r7, #88	; 0x58
 80079b4:	f000 80c0 	beq.w	8007b38 <_printf_i+0x1a8>
 80079b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079c0:	e03a      	b.n	8007a38 <_printf_i+0xa8>
 80079c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079c6:	2b15      	cmp	r3, #21
 80079c8:	d8f6      	bhi.n	80079b8 <_printf_i+0x28>
 80079ca:	a101      	add	r1, pc, #4	; (adr r1, 80079d0 <_printf_i+0x40>)
 80079cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d0:	08007a29 	.word	0x08007a29
 80079d4:	08007a3d 	.word	0x08007a3d
 80079d8:	080079b9 	.word	0x080079b9
 80079dc:	080079b9 	.word	0x080079b9
 80079e0:	080079b9 	.word	0x080079b9
 80079e4:	080079b9 	.word	0x080079b9
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	080079b9 	.word	0x080079b9
 80079f0:	080079b9 	.word	0x080079b9
 80079f4:	080079b9 	.word	0x080079b9
 80079f8:	080079b9 	.word	0x080079b9
 80079fc:	08007b41 	.word	0x08007b41
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007afb 	.word	0x08007afb
 8007a08:	080079b9 	.word	0x080079b9
 8007a0c:	080079b9 	.word	0x080079b9
 8007a10:	08007b63 	.word	0x08007b63
 8007a14:	080079b9 	.word	0x080079b9
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	080079b9 	.word	0x080079b9
 8007a20:	080079b9 	.word	0x080079b9
 8007a24:	08007b03 	.word	0x08007b03
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	1d1a      	adds	r2, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	602a      	str	r2, [r5, #0]
 8007a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e09f      	b.n	8007b7c <_printf_i+0x1ec>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	0607      	lsls	r7, r0, #24
 8007a42:	f103 0104 	add.w	r1, r3, #4
 8007a46:	6029      	str	r1, [r5, #0]
 8007a48:	d501      	bpl.n	8007a4e <_printf_i+0xbe>
 8007a4a:	681e      	ldr	r6, [r3, #0]
 8007a4c:	e003      	b.n	8007a56 <_printf_i+0xc6>
 8007a4e:	0646      	lsls	r6, r0, #25
 8007a50:	d5fb      	bpl.n	8007a4a <_printf_i+0xba>
 8007a52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	da03      	bge.n	8007a62 <_printf_i+0xd2>
 8007a5a:	232d      	movs	r3, #45	; 0x2d
 8007a5c:	4276      	negs	r6, r6
 8007a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a62:	485a      	ldr	r0, [pc, #360]	; (8007bcc <_printf_i+0x23c>)
 8007a64:	230a      	movs	r3, #10
 8007a66:	e012      	b.n	8007a8e <_printf_i+0xfe>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	1d19      	adds	r1, r3, #4
 8007a6e:	6029      	str	r1, [r5, #0]
 8007a70:	0605      	lsls	r5, r0, #24
 8007a72:	d501      	bpl.n	8007a78 <_printf_i+0xe8>
 8007a74:	681e      	ldr	r6, [r3, #0]
 8007a76:	e002      	b.n	8007a7e <_printf_i+0xee>
 8007a78:	0641      	lsls	r1, r0, #25
 8007a7a:	d5fb      	bpl.n	8007a74 <_printf_i+0xe4>
 8007a7c:	881e      	ldrh	r6, [r3, #0]
 8007a7e:	4853      	ldr	r0, [pc, #332]	; (8007bcc <_printf_i+0x23c>)
 8007a80:	2f6f      	cmp	r7, #111	; 0x6f
 8007a82:	bf0c      	ite	eq
 8007a84:	2308      	moveq	r3, #8
 8007a86:	230a      	movne	r3, #10
 8007a88:	2100      	movs	r1, #0
 8007a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a8e:	6865      	ldr	r5, [r4, #4]
 8007a90:	60a5      	str	r5, [r4, #8]
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	bfa2      	ittt	ge
 8007a96:	6821      	ldrge	r1, [r4, #0]
 8007a98:	f021 0104 	bicge.w	r1, r1, #4
 8007a9c:	6021      	strge	r1, [r4, #0]
 8007a9e:	b90e      	cbnz	r6, 8007aa4 <_printf_i+0x114>
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	d04b      	beq.n	8007b3c <_printf_i+0x1ac>
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8007aae:	5dc7      	ldrb	r7, [r0, r7]
 8007ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ab4:	4637      	mov	r7, r6
 8007ab6:	42bb      	cmp	r3, r7
 8007ab8:	460e      	mov	r6, r1
 8007aba:	d9f4      	bls.n	8007aa6 <_printf_i+0x116>
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d10b      	bne.n	8007ad8 <_printf_i+0x148>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	07de      	lsls	r6, r3, #31
 8007ac4:	d508      	bpl.n	8007ad8 <_printf_i+0x148>
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6861      	ldr	r1, [r4, #4]
 8007aca:	4299      	cmp	r1, r3
 8007acc:	bfde      	ittt	le
 8007ace:	2330      	movle	r3, #48	; 0x30
 8007ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ad8:	1b52      	subs	r2, r2, r5
 8007ada:	6122      	str	r2, [r4, #16]
 8007adc:	f8cd a000 	str.w	sl, [sp]
 8007ae0:	464b      	mov	r3, r9
 8007ae2:	aa03      	add	r2, sp, #12
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f7ff fee4 	bl	80078b4 <_printf_common>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d14a      	bne.n	8007b86 <_printf_i+0x1f6>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	b004      	add	sp, #16
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	f043 0320 	orr.w	r3, r3, #32
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	4833      	ldr	r0, [pc, #204]	; (8007bd0 <_printf_i+0x240>)
 8007b04:	2778      	movs	r7, #120	; 0x78
 8007b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	6829      	ldr	r1, [r5, #0]
 8007b0e:	061f      	lsls	r7, r3, #24
 8007b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b14:	d402      	bmi.n	8007b1c <_printf_i+0x18c>
 8007b16:	065f      	lsls	r7, r3, #25
 8007b18:	bf48      	it	mi
 8007b1a:	b2b6      	uxthmi	r6, r6
 8007b1c:	07df      	lsls	r7, r3, #31
 8007b1e:	bf48      	it	mi
 8007b20:	f043 0320 	orrmi.w	r3, r3, #32
 8007b24:	6029      	str	r1, [r5, #0]
 8007b26:	bf48      	it	mi
 8007b28:	6023      	strmi	r3, [r4, #0]
 8007b2a:	b91e      	cbnz	r6, 8007b34 <_printf_i+0x1a4>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f023 0320 	bic.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	2310      	movs	r3, #16
 8007b36:	e7a7      	b.n	8007a88 <_printf_i+0xf8>
 8007b38:	4824      	ldr	r0, [pc, #144]	; (8007bcc <_printf_i+0x23c>)
 8007b3a:	e7e4      	b.n	8007b06 <_printf_i+0x176>
 8007b3c:	4615      	mov	r5, r2
 8007b3e:	e7bd      	b.n	8007abc <_printf_i+0x12c>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	6826      	ldr	r6, [r4, #0]
 8007b44:	6961      	ldr	r1, [r4, #20]
 8007b46:	1d18      	adds	r0, r3, #4
 8007b48:	6028      	str	r0, [r5, #0]
 8007b4a:	0635      	lsls	r5, r6, #24
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	d501      	bpl.n	8007b54 <_printf_i+0x1c4>
 8007b50:	6019      	str	r1, [r3, #0]
 8007b52:	e002      	b.n	8007b5a <_printf_i+0x1ca>
 8007b54:	0670      	lsls	r0, r6, #25
 8007b56:	d5fb      	bpl.n	8007b50 <_printf_i+0x1c0>
 8007b58:	8019      	strh	r1, [r3, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	4615      	mov	r5, r2
 8007b60:	e7bc      	b.n	8007adc <_printf_i+0x14c>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	1d1a      	adds	r2, r3, #4
 8007b66:	602a      	str	r2, [r5, #0]
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	6862      	ldr	r2, [r4, #4]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f7f8 fb3e 	bl	80001f0 <memchr>
 8007b74:	b108      	cbz	r0, 8007b7a <_printf_i+0x1ea>
 8007b76:	1b40      	subs	r0, r0, r5
 8007b78:	6060      	str	r0, [r4, #4]
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b84:	e7aa      	b.n	8007adc <_printf_i+0x14c>
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d0ad      	beq.n	8007af0 <_printf_i+0x160>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	079b      	lsls	r3, r3, #30
 8007b98:	d413      	bmi.n	8007bc2 <_printf_i+0x232>
 8007b9a:	68e0      	ldr	r0, [r4, #12]
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	4298      	cmp	r0, r3
 8007ba0:	bfb8      	it	lt
 8007ba2:	4618      	movlt	r0, r3
 8007ba4:	e7a6      	b.n	8007af4 <_printf_i+0x164>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4632      	mov	r2, r6
 8007baa:	4649      	mov	r1, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	47d0      	blx	sl
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d09d      	beq.n	8007af0 <_printf_i+0x160>
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	68e3      	ldr	r3, [r4, #12]
 8007bb8:	9903      	ldr	r1, [sp, #12]
 8007bba:	1a5b      	subs	r3, r3, r1
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	dcf2      	bgt.n	8007ba6 <_printf_i+0x216>
 8007bc0:	e7eb      	b.n	8007b9a <_printf_i+0x20a>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	f104 0619 	add.w	r6, r4, #25
 8007bc8:	e7f5      	b.n	8007bb6 <_printf_i+0x226>
 8007bca:	bf00      	nop
 8007bcc:	08007e2a 	.word	0x08007e2a
 8007bd0:	08007e3b 	.word	0x08007e3b

08007bd4 <memmove>:
 8007bd4:	4288      	cmp	r0, r1
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	eb01 0402 	add.w	r4, r1, r2
 8007bdc:	d902      	bls.n	8007be4 <memmove+0x10>
 8007bde:	4284      	cmp	r4, r0
 8007be0:	4623      	mov	r3, r4
 8007be2:	d807      	bhi.n	8007bf4 <memmove+0x20>
 8007be4:	1e43      	subs	r3, r0, #1
 8007be6:	42a1      	cmp	r1, r4
 8007be8:	d008      	beq.n	8007bfc <memmove+0x28>
 8007bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bf2:	e7f8      	b.n	8007be6 <memmove+0x12>
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	428a      	cmp	r2, r1
 8007bfa:	d100      	bne.n	8007bfe <memmove+0x2a>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c06:	e7f7      	b.n	8007bf8 <memmove+0x24>

08007c08 <_sbrk_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	; (8007c24 <_sbrk_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7f9 fbaa 	bl	800136c <_sbrk>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_sbrk_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_sbrk_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	200008b8 	.word	0x200008b8

08007c28 <_realloc_r>:
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4614      	mov	r4, r2
 8007c30:	460e      	mov	r6, r1
 8007c32:	b921      	cbnz	r1, 8007c3e <_realloc_r+0x16>
 8007c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	4611      	mov	r1, r2
 8007c3a:	f7ff bc57 	b.w	80074ec <_malloc_r>
 8007c3e:	b92a      	cbnz	r2, 8007c4c <_realloc_r+0x24>
 8007c40:	f7ff fbe8 	bl	8007414 <_free_r>
 8007c44:	4625      	mov	r5, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	f000 f81b 	bl	8007c86 <_malloc_usable_size_r>
 8007c50:	4284      	cmp	r4, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	d802      	bhi.n	8007c5c <_realloc_r+0x34>
 8007c56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c5a:	d812      	bhi.n	8007c82 <_realloc_r+0x5a>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff fc44 	bl	80074ec <_malloc_r>
 8007c64:	4605      	mov	r5, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0ed      	beq.n	8007c46 <_realloc_r+0x1e>
 8007c6a:	42bc      	cmp	r4, r7
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4631      	mov	r1, r6
 8007c70:	bf28      	it	cs
 8007c72:	463a      	movcs	r2, r7
 8007c74:	f7ff fbc0 	bl	80073f8 <memcpy>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff fbca 	bl	8007414 <_free_r>
 8007c80:	e7e1      	b.n	8007c46 <_realloc_r+0x1e>
 8007c82:	4635      	mov	r5, r6
 8007c84:	e7df      	b.n	8007c46 <_realloc_r+0x1e>

08007c86 <_malloc_usable_size_r>:
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	1f18      	subs	r0, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbc      	itt	lt
 8007c90:	580b      	ldrlt	r3, [r1, r0]
 8007c92:	18c0      	addlt	r0, r0, r3
 8007c94:	4770      	bx	lr
	...

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
